<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.theoryRoot org.eventb.core.configuration="org.eventb.theory.core.thy">
<org.eventb.theory.core.importTheoryProject name="'" org.eventb.theory.core.importTheoryProject="/BaseNNums">
<org.eventb.theory.core.importTheory name="'" org.eventb.theory.core.importTheory="/BaseNNums/BaseNLeq.dtf|org.eventb.theory.core.deployedTheoryRoot#BaseNLeq"/>
</org.eventb.theory.core.importTheoryProject>
<org.eventb.theory.core.theorem name="H" org.eventb.core.label="BNumMKKsN suc to append" org.eventb.core.predicate="∀n, x·BNumMkKsN(x, suc(n)) = append(BNumMkKsN(x, n), x)"/>
<org.eventb.theory.core.importTheoryProject name=")" org.eventb.theory.core.importTheoryProject="/Ordered">
<org.eventb.theory.core.importTheory name="'" org.eventb.theory.core.importTheory="/Ordered/OrderedSets.dtf|org.eventb.theory.core.deployedTheoryRoot#OrderedSets"/>
</org.eventb.theory.core.importTheoryProject>
<org.eventb.theory.core.theorem name="-" org.eventb.core.label="nil |-&gt; 2 infimum" org.eventb.core.predicate="∀x·BNumIsWD(BNumList(x), BNumBase(x)) ⇒ nil ↦ two BNumLeq x"/>
<org.eventb.theory.core.theorem name="(" org.eventb.core.label="Ordered With Infimum" org.eventb.core.predicate="BNumLeqB_P ↦ (nil ↦ two) ∈ leqInfim(BNumNorm)"/>
<org.eventb.theory.core.theorem name="3" org.eventb.core.label="WGoodDecrReduceFirstDigitToZero" org.eventb.core.predicate="∀xH·∀xT, B·xT ≠ nil ⇒ BNumDecrN(cons(xH, xT) ↦ B, xH) = cons(zero, xT) ↦ B pAdd xH"/>
<org.eventb.theory.core.theorem name="*" org.eventb.core.label="Ordered Infinmum Decr" org.eventb.core.predicate="BNumLeqB_P ↦ (nil ↦ two) ↦ WGoodDecr_P ∈ Decrementer(BNumNorm)"/>
<org.eventb.theory.core.theorem name="7" org.eventb.core.label="Decr nil |-&gt; two = nil |-&gt; two" org.eventb.core.predicate="∀n·BNumDecrN(nil ↦ two, n) = nil ↦ two"/>
<org.eventb.theory.core.theorem name="8" org.eventb.core.label="decr nil |-&gt; B at least once gives nil |-&gt; two" org.eventb.core.predicate="∀B, n· n≠ zero ⇒ BNumDecrN(nil ↦ B, n) = nil ↦ two"/>
<org.eventb.theory.core.theorem name="9" org.eventb.core.label="WGoodDecr out of baseNDecr" org.eventb.core.predicate="∀n·∀x·BNumDecrN(WGoodDecr(x), n) = WGoodDecr(BNumDecrN(x, n))"/>
<org.eventb.theory.core.theorem name="6" org.eventb.core.label="DecrN expansion" org.eventb.core.predicate="∀n·∀x·x ∈ BNumNorm ⇒ BNumDecrN(x, suc(n)) = BNumDecrN(BNumDecrN(x, n), one)"/>
<org.eventb.theory.core.theorem name="=" org.eventb.core.label="length BNumDigitsLtNInternal" org.eventb.core.predicate="∀n·∀x·n pLeq length(x) ⇒  length(BNumDigitsLtNInternal(x, n)) = n"/>
<org.eventb.theory.core.theorem name="&gt;" org.eventb.core.label="length BNumDigitsGreqNInternal" org.eventb.core.predicate="∀n·∀x· n pLeq length(x) ⇒ length(BNumDigitsGreqNInternal(x, n)) pAdd n = length(x)"/>
<org.eventb.theory.core.theorem name=":" org.eventb.core.label="Split out BNum" org.eventb.core.predicate="∀x·∀n·x ≠ nil ∧ n pLt length(x) ⇒ x = appendList(append(BNumDigitsLtNInternal(x, n), BNumNthDigitInternal(x, n)), BNumDigitsGreqNInternal(x, suc(n))) ∧ length(x) = suc(length(BNumDigitsLtNInternal(x, n)) pAdd length(BNumDigitsGreqNInternal(x, suc(n))))"/>
<org.eventb.theory.core.theorem name="@" org.eventb.core.label="Split BNum With Existance" org.eventb.core.predicate="∀x, n·x ≠ nil ∧ n pLt length(x) ⇒ (∃xH, xN, xT·xH = BNumDigitsLtNInternal(x, n) ∧ xN = BNumNthDigitInternal(x, n) ∧ xT = BNumDigitsGreqNInternal(x, suc(n)) &#10;∧ appendList(append(xH, xN), xT) = x ∧ length(x) = suc(length(xH) pAdd length(xT)))"/>
<org.eventb.theory.core.theorem name="A" org.eventb.core.label="LtDigits Spilt Counting" org.eventb.core.predicate="∀n·∀x·n pLt length(x) ∧ n ≠ zero ⇒ n = suc(length(BNumDigitsLtNInternal(x, n)))"/>
<org.eventb.theory.core.theorem name="D" org.eventb.core.label="Greq on cons(xH, xT)" org.eventb.core.predicate="∀xH, xT, n· BNumDigitsGreqNInternal(xT, n) = BNumDigitsGreqNInternal(cons(xH, xT), suc(n))"/>
<org.eventb.theory.core.theorem name="G" org.eventb.core.label="Greq One less" org.eventb.core.predicate="∀xH, xN, xT·BNumDigitsGreqNInternal(appendList(append(xH,xN),xT), length(xH)) = cons(xN, xT)"/>
<org.eventb.theory.core.theorem name="B" org.eventb.core.label="greqDigits Split Counting" org.eventb.core.predicate="∀n·∀x·length(x) pMinus n = length(BNumDigitsGreqNInternal(x, n))"/>
<org.eventb.theory.core.theorem name="C" org.eventb.core.label="nth Digit of split num" org.eventb.core.predicate="∀n·∀xH, xN, xT·length(xH) = n ⇒ BNumNthDigitInternal(appendList(append(xH, xN), xT), n) = xN"/>
<org.eventb.theory.core.theorem name="?" org.eventb.core.label="Zero case Decr All Zeros" org.eventb.core.predicate="∀pH·∀pT, B· cons(pH,pT) ↦ B∈BNumNorm ∧ two pLeq length(cons(pH,pT)) &#10;⇒ BNumDecrN(cons(pH, pT) ↦ B, suc(pH)) = cons(B pAdd pH, BaseNDecrementInternal(pT, suc(B pAdd pH))) ↦ suc(B pAdd pH)"/>
<org.eventb.theory.core.theorem name="4" org.eventb.core.label="Decr All cases" org.eventb.core.predicate="∀n·∀x, B·x ↦ B ∈ BNumNorm ∧ n pLt length(x)&#10;  ⇒ (∃m, Bm· BNumDecrN(x ↦ B, m) = appendList(BNumMkKsN(pDecrement(Bm), n), BaseNDecrementInternal(BNumDigitsGreqNInternal(x, n), Bm)) ↦ Bm)"/>
<org.eventb.theory.core.theorem name="2" org.eventb.core.label="Multiple Decr will reduce nth digit to zero" org.eventb.core.predicate="∀x, n·∀B·x ↦ B ∈ BNumNorm ∧ n pLeq length(x) ∧ one pLt length(x) ∧ x ≠ nil ∧ x ≠ append(BNumMkZeros(pDecrement(n)), one) &#10;  ⇒ (∃m·BNumNthDigit(BNumDecrN(x ↦ B, m), n) = zero)"/>
<org.eventb.theory.core.theorem name="." org.eventb.core.label="Multiple Decr Decrements next digit" org.eventb.core.predicate="∀x, n·∀B·n ≠ zero ∧ x ↦ B ∈ BNumNorm ∧ n pLeq length(x) ∧ BNumNthDigitInternal(x, n) ≠ zero ∧ x ≠ append(BNumMkZeros(pDecrement(n)), one) &#10;  ⇒ (∃m·BNumNthDigitInternal(x, n) = suc(BNumNthDigit(BNumDecrN(x ↦ B, m), n)))"/>
<org.eventb.theory.core.theorem name="," org.eventb.core.label="Multiple Decr" org.eventb.core.predicate="∀x·∀y·x ∈ BNumNorm ∧ y ∈ BNumNorm ∧ x ≠ nil ↦ two ⇒ (∃n·BNumDecrN(x, n)  BNumLeq y)"/>
<org.eventb.theory.core.newOperatorDefinition name="+" org.eventb.core.label="BNumDecrN" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.recursiveOperatorDefinition name="'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="zero" org.eventb.theory.core.formula="d"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="suc(dn)" org.eventb.theory.core.formula="BNumDecrN(WGoodDecr(d), dn)"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="BNum" org.eventb.core.identifier="d"/>
<org.eventb.theory.core.operatorArgument name=")" org.eventb.core.expression="pNat" org.eventb.core.identifier="n"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="/" org.eventb.core.comment="Need a list theory with an identity to allow &#10;The return of the identity in cases where the &#10;list is nil. This would allow functions like nth Digit&#10;to be part of the list theory instead of reimplemented &#10;in various places." org.eventb.core.label="BNumNthDigitInternal" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="List(pNat)" org.eventb.core.identifier="l"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="pNat" org.eventb.core.identifier="n"/>
<org.eventb.theory.core.recursiveOperatorDefinition name=")" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="zero" org.eventb.theory.core.formula="BNumLSDInternal(l)"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.theory.core.formula="BNumNthDigitInternal(BNumShiftLeftInternal(l), ns)"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="1" org.eventb.core.label="BNumNthDigit" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="BNum" org.eventb.core.identifier="BN"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="pNat" org.eventb.core.identifier="n"/>
<org.eventb.theory.core.directOperatorDefinition name=")" org.eventb.theory.core.formula="BNumNthDigitInternal(BNumList(BN), n)"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="0" org.eventb.core.label="BNumMkZeros" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="pNat" org.eventb.core.identifier="n"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="(" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="zero" org.eventb.theory.core.formula="nil ⦂ List(pNat)"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.theory.core.formula="cons(zero, BNumMkZeros(ns))"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="F" org.eventb.core.comment="Make a number out of n lost of K digits." org.eventb.core.label="BNumMkKsN" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="pNat" org.eventb.core.identifier="k"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="pNat" org.eventb.core.identifier="n"/>
<org.eventb.theory.core.recursiveOperatorDefinition name=")" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="zero" org.eventb.theory.core.formula="nil ⦂ List(pNat)"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.theory.core.formula="cons(k, BNumMkKsN(k, ns))"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="5" org.eventb.core.comment="Includes Digit At  position N" org.eventb.core.label="BNumDigitsGreqNInternal" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="List(pNat)" org.eventb.core.identifier="x"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="pNat" org.eventb.core.identifier="n"/>
<org.eventb.theory.core.recursiveOperatorDefinition name=")" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="zero" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.theory.core.formula="BNumDigitsGreqNInternal(BNumShiftLeftInternal(x), ns)"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name=";" org.eventb.core.comment="Digits before the position N (not including N)" org.eventb.core.label="BNumDigitsLtNInternal" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="List(pNat)" org.eventb.core.identifier="x"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="pNat" org.eventb.core.identifier="n"/>
<org.eventb.theory.core.recursiveOperatorDefinition name=")" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="zero" org.eventb.theory.core.formula="nil ⦂ List(pNat)"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.theory.core.formula="COND(x = nil, nil, cons(BNumLSDInternal(x), BNumDigitsLtNInternal(BNumShiftLeftInternal(x), ns)))"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
</org.eventb.theory.core.theoryRoot>
