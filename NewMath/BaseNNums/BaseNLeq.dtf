<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.deployedTheoryRoot org.eventb.core.accurate="true" org.eventb.core.comment="GENERATED THEORY FILE: !DO NOT CHANGE!" org.eventb.theory.core.modificationHashValue="2a20270bf323a8180ecb35ee0dddfa0c" org.eventb.theory.core.outdated="false">
<org.eventb.theory.core.useTheory name="BaseNMinus" org.eventb.core.scTarget="/BaseNNums/BaseNMinus.dtf|org.eventb.theory.core.deployedTheoryRoot#BaseNMinus"/>
<org.eventb.theory.core.scNewOperatorDefinition name="(" org.eventb.core.label="BNumLeqMinus" org.eventb.core.predicate="x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧BNumList(x)=BNumList(y)∧x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))∧((∃z⦂pNat·BNumBase(x) pAdd z=BNumBase(y))∨(x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))))∧((∃z⦂pNat·BNumBase(x) pAdd z=BNumBase(y))∨(∀z⦂pNat·¬BNumBase(x) pAdd z=BNumBase(y)))∧x∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧y∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧BNumBase(x) pLeq BNumBase(y))∨(x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧BNumList(x)≠BNumList(y)∧x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧x∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧x∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧x∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧x BNumMinus y=(nil ⦂ List(pNat)) ↦ BNumBase(x))∨(((x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧¬BNumList(x)=BNumList(y))∨(x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))∧((∃z⦂pNat·BNumBase(x) pAdd z=BNumBase(y))∨(x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))))∧((∃z⦂pNat·BNumBase(x) pAdd z=BNumBase(y))∨(∀z⦂pNat·¬BNumBase(x) pAdd z=BNumBase(y)))∧x∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧y∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧¬BNumBase(x) pLeq BNumBase(y)))∧((x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧¬BNumList(x)≠BNumList(y))∨(x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧x∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧x∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧x∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧¬x BNumMinus y=(nil ⦂ List(pNat)) ↦ BNumBase(x))))">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="(BNumList(x)=BNumList(y)∧BNumBase(x) pLeq BNumBase(y))∨(BNumList(x)≠BNumList(y)∧x BNumMinus y=(nil ⦂ List(pNat)) ↦ BNumBase(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name=")" org.eventb.core.label="BNumLeqRevInternal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="xL" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scOperatorArgument name="yL" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="xL">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(pNat)" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xH,xT)" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xH pLt BNumLSDInternal(yL)∨(xH=BNumLSDInternal(yL)∧BNumLeqRevInternal(xT,BNumShiftLeftInternal(yL)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="*" org.eventb.core.label="BNumLeq" org.eventb.core.predicate="x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧BNumList(x)=BNumList(y)∧x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))∧((∃z⦂pNat·BNumBase(x) pAdd z=BNumBase(y))∨(x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))))∧((∃z⦂pNat·BNumBase(x) pAdd z=BNumBase(y))∨(∀z⦂pNat·¬BNumBase(x) pAdd z=BNumBase(y)))∧x∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧y∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧BNumBase(x) pLeq BNumBase(y))∨(x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))∧((length(BNumList(x)) pLeq length(BNumList(y))∧length(BNumList(x))≠length(BNumList(y)))∨(x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))∧(¬length(BNumList(x)) pLeq length(BNumList(y))∨(x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))))))∧((length(BNumList(x)) pLeq length(BNumList(y))∧length(BNumList(x))≠length(BNumList(y)))∨¬length(BNumList(x)) pLeq length(BNumList(y))∨¬length(BNumList(x))≠length(BNumList(y)))∧x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧length(BNumList(x)) pLt length(BNumList(y)))∨(x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧length(BNumList(x))=length(BNumList(y))∧x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧BNumList(x)≠BNumList(y)∧x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧BNumLeqRevInternal(reverse(BNumList(x)),reverse(BNumList(y))))∨(((x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧¬BNumList(x)=BNumList(y))∨(x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))∧((∃z⦂pNat·BNumBase(x) pAdd z=BNumBase(y))∨(x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))))∧((∃z⦂pNat·BNumBase(x) pAdd z=BNumBase(y))∨(∀z⦂pNat·¬BNumBase(x) pAdd z=BNumBase(y)))∧x∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧y∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧¬BNumBase(x) pLeq BNumBase(y)))∧x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))∧((length(BNumList(x)) pLeq length(BNumList(y))∧length(BNumList(x))≠length(BNumList(y)))∨(x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))∧(¬length(BNumList(x)) pLeq length(BNumList(y))∨(x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))))))∧((length(BNumList(x)) pLeq length(BNumList(y))∧length(BNumList(x))≠length(BNumList(y)))∨¬length(BNumList(x)) pLeq length(BNumList(y))∨¬length(BNumList(x))≠length(BNumList(y)))∧x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧¬length(BNumList(x)) pLt length(BNumList(y))∧((x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧¬length(BNumList(x))=length(BNumList(y)))∨(x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧¬BNumList(x)≠BNumList(y))∨(x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧¬BNumLeqRevInternal(reverse(BNumList(x)),reverse(BNumList(y))))))">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="(BNumList(x)=BNumList(y)∧BNumBase(x) pLeq BNumBase(y))∨length(BNumList(x)) pLt length(BNumList(y))∨(length(BNumList(x))=length(BNumList(y))∧BNumList(x)≠BNumList(y)∧BNumLeqRevInternal(reverse(BNumList(x)),reverse(BNumList(y))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="+" org.eventb.core.label="BNumLeqB" org.eventb.core.predicate="xB∈(BNum ⦂ ℙ(List(pNat)×pNat))∧yB∈(BNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="xB" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scOperatorArgument name="yB" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="bool(xB BNumLeq yB)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="," org.eventb.core.label="BNumLeqB_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(pNat)×pNat×(List(pNat)×pNat)×BOOL)" org.eventb.theory.core.wd="∀c⦂List(pNat)×pNat,d⦂List(pNat)×pNat·((∀Num⦂List(pNat),Base⦂pNat·(Num∈List(pNat ⦂ ℙ(pNat))∧Base∈(pNat ⦂ ℙ(pNat))∧BNumIsNormal(Num ↦ Base))∨¬Num∈List(pNat ⦂ ℙ(pNat))∨¬Base∈(pNat ⦂ ℙ(pNat))∨¬BNumIsNormal(Num ↦ Base))∧c∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))∧(∀Num⦂List(pNat),Base⦂pNat·(Num∈List(pNat ⦂ ℙ(pNat))∧Base∈(pNat ⦂ ℙ(pNat))∧BNumIsNormal(Num ↦ Base))∨¬Num∈List(pNat ⦂ ℙ(pNat))∨¬Base∈(pNat ⦂ ℙ(pNat))∨¬BNumIsNormal(Num ↦ Base))∧d∈(BNumNorm ⦂ ℙ(List(pNat)×pNat)))∨((∀Num⦂List(pNat),Base⦂pNat·(Num∈List(pNat ⦂ ℙ(pNat))∧Base∈(pNat ⦂ ℙ(pNat))∧BNumIsNormal(Num ↦ Base))∨¬Num∈List(pNat ⦂ ℙ(pNat))∨¬Base∈(pNat ⦂ ℙ(pNat))∨¬BNumIsNormal(Num ↦ Base))∧¬c∈(BNumNorm ⦂ ℙ(List(pNat)×pNat)))∨((∀Num⦂List(pNat),Base⦂pNat·(Num∈List(pNat ⦂ ℙ(pNat))∧Base∈(pNat ⦂ ℙ(pNat))∧BNumIsNormal(Num ↦ Base))∨¬Num∈List(pNat ⦂ ℙ(pNat))∨¬Base∈(pNat ⦂ ℙ(pNat))∨¬BNumIsNormal(Num ↦ Base))∧¬d∈(BNumNorm ⦂ ℙ(List(pNat)×pNat)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λc⦂List(pNat)×pNat ↦ d⦂List(pNat)×pNat·c∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))∧d∈(BNumNorm ⦂ ℙ(List(pNat)×pNat)) ∣ c BNumLeqB d"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scTheorem name="generatedBlocl" org.eventb.core.label="x LeqInternal x" org.eventb.core.predicate="∀x⦂List(pNat)·BNumLeqRevInternal(x,x)" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.theorem#," org.eventb.theory.core.order="0"/>
<org.eventb.theory.core.scTheorem name="generatedBlocm" org.eventb.core.label="LeqInternalCancellation" org.eventb.core.predicate="∀x⦂List(pNat),xH1⦂pNat,xH2⦂pNat·BNumLeqRevInternal(append(x,xH1),append(x,xH2))⇔xH1 pLeq xH2" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.theorem#." org.eventb.theory.core.order="1"/>
<org.eventb.theory.core.scTheorem name="generatedBlocn" org.eventb.core.label="LeqInternal Cancell Appended" org.eventb.core.predicate="∀x⦂List(pNat)·∀y⦂List(pNat),xH⦂pNat,yH⦂pNat·length(x)=length(y)∧x≠y⇒(BNumLeqRevInternal(x,y)⇔BNumLeqRevInternal(append(x,xH),append(y,yH)))" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.theorem#\/" org.eventb.theory.core.order="2"/>
<org.eventb.theory.core.scTheorem name="generatedBloco" org.eventb.core.label="Not Equ Append not difference right" org.eventb.core.predicate="∀x⦂List(pNat)·∀y⦂List(pNat),yH⦂pNat·length(x)=length(y)∧x≠y⇒(BNumLeqRevInternal(x,y)⇔BNumLeqRevInternal(x,append(y,yH)))" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.theorem#0" org.eventb.theory.core.order="3"/>
<org.eventb.theory.core.scTheorem name="generatedBlocp" org.eventb.core.label="longer nums are normally bigger" org.eventb.core.predicate="∀x⦂List(pNat),xH⦂pNat·xH≠(zero ⦂ pNat)⇒¬BNumLeqRevInternal(append(x,xH),x)" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.theorem#7" org.eventb.theory.core.order="4"/>
<org.eventb.theory.core.scTheorem name="generatedBlocq" org.eventb.core.label="Leqs Equiv Cororally" org.eventb.core.predicate="∀y⦂List(pNat)·∀x⦂List(pNat),B⦂pNat·BaseNIsNormalInternal(x)∧BaseNIsNormalInternal(y)∧(two ⦂ pNat) pLeq B∧length(x)=length(y)∧BaseNMinusInternal(x,y,B)=(nil ⦂ List(pNat))⇒BNumLeqRevInternal(reverse(x),reverse(y))" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.theorem#-" org.eventb.theory.core.order="5"/>
<org.eventb.theory.core.scTheorem name="generatedBlocr" org.eventb.core.label="Leqs are equivalent" org.eventb.core.predicate="∀x⦂List(pNat)×pNat,y⦂List(pNat)×pNat·x∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))∧y∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))⇒(x BNumLeq y⇔x BNumLeqMinus y)" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.theorem#+" org.eventb.theory.core.order="6"/>
<org.eventb.theory.core.scTheorem name="generatedBlocs" org.eventb.core.label="not x leq y =&gt; x /= y" org.eventb.core.predicate="∀x⦂List(pNat)×pNat,y⦂List(pNat)×pNat·x∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))∧y∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))∧¬x BNumLeq y⇒x≠y" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.theorem#8" org.eventb.theory.core.order="7"/>
<org.eventb.theory.core.scTheorem name="generatedBloct" org.eventb.core.label="Antisymetry" org.eventb.core.predicate="(BNumLeqB_P ⦂ ℙ(List(pNat)×pNat×(List(pNat)×pNat)×BOOL))∈AntiSymmetry(BNumNorm ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.theorem#4" org.eventb.theory.core.order="8"/>
<org.eventb.theory.core.scTheorem name="generatedBlocu" org.eventb.core.label="Transitivity" org.eventb.core.predicate="(BNumLeqB_P ⦂ ℙ(List(pNat)×pNat×(List(pNat)×pNat)×BOOL))∈Transitivity(BNumNorm ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.theorem#5" org.eventb.theory.core.order="9"/>
<org.eventb.theory.core.scTheorem name="generatedBlocv" org.eventb.core.label="Totallity" org.eventb.core.predicate="(BNumLeqB_P ⦂ ℙ(List(pNat)×pNat×(List(pNat)×pNat)×BOOL))∈Totality(BNumNorm ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.theorem#6" org.eventb.theory.core.order="10"/>
<org.eventb.theory.core.scTheorem name="generatedBlocw" org.eventb.core.label="BNumLeqB_P in leq(BNumNorm)" org.eventb.core.predicate="(BNumLeqB_P ⦂ ℙ(List(pNat)×pNat×(List(pNat)×pNat)×BOOL))∈leq(BNumNorm ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.theorem#3" org.eventb.theory.core.order="11"/>
<org.eventb.theory.core.scProofRulesBlock name="generatedBlock" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#'">
<org.eventb.theory.core.scMetavariable name="x" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scMetavariable name="y" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scMetavariable name="xL" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scMetavariable name="yL" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scMetavariable name="xH" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scMetavariable name="xT" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scMetavariable name="xB" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scMetavariable name="yB" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scRewriteRule name="BaseNLeq.BNumLeqMinus" org.eventb.core.accurate="true" org.eventb.core.label="BaseNLeq.BNumLeqMinus" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumLeqMinus expansion" org.eventb.theory.core.formula="x BNumLeqMinus y">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumLeqMinus rhs" org.eventb.core.label="BNumLeqMinus rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.formula="(BNumList(x)=BNumList(y)∧BNumBase(x) pLeq BNumBase(y))∨(BNumList(x)≠BNumList(y)∧x BNumMinus y=(nil ⦂ List(pNat)) ↦ BNumBase(x))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNLeq.BNumLeqRevInternal case 0" org.eventb.core.accurate="true" org.eventb.core.label="BaseNLeq.BNumLeqRevInternal case 0" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumLeqRevInternal expansion" org.eventb.theory.core.formula="BNumLeqRevInternal(nil ⦂ List(pNat),yL)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumLeqRevInternal rhs" org.eventb.core.label="BNumLeqRevInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNLeq.BNumLeqRevInternal case 1" org.eventb.core.accurate="true" org.eventb.core.label="BaseNLeq.BNumLeqRevInternal case 1" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumLeqRevInternal expansion" org.eventb.theory.core.formula="BNumLeqRevInternal(cons(xH,xT),yL)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumLeqRevInternal rhs" org.eventb.core.label="BNumLeqRevInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.formula="xH pLt BNumLSDInternal(yL)∨(xH=BNumLSDInternal(yL)∧BNumLeqRevInternal(xT,BNumShiftLeftInternal(yL)))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNLeq.BNumLeq" org.eventb.core.accurate="true" org.eventb.core.label="BaseNLeq.BNumLeq" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumLeq expansion" org.eventb.theory.core.formula="x BNumLeq y">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumLeq rhs" org.eventb.core.label="BNumLeq rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.formula="(BNumList(x)=BNumList(y)∧BNumBase(x) pLeq BNumBase(y))∨length(BNumList(x)) pLt length(BNumList(y))∨(length(BNumList(x))=length(BNumList(y))∧BNumList(x)≠BNumList(y)∧BNumLeqRevInternal(reverse(BNumList(x)),reverse(BNumList(y))))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNLeq.BNumLeqB" org.eventb.core.accurate="true" org.eventb.core.label="BaseNLeq.BNumLeqB" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumLeqB expansion" org.eventb.theory.core.formula="xB BNumLeqB yB">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumLeqB rhs" org.eventb.core.label="BNumLeqB rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.formula="bool(xB BNumLeq yB)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNLeq.BNumLeqB_P" org.eventb.core.accurate="true" org.eventb.core.label="BaseNLeq.BNumLeqB_P" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumLeqB_P expansion" org.eventb.theory.core.formula="BNumLeqB_P ⦂ ℙ(List(pNat)×pNat×(List(pNat)×pNat)×BOOL)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumLeqB_P rhs" org.eventb.core.label="BNumLeqB_P rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNLeq.tuf|org.eventb.theory.core.theoryRoot#BaseNLeq|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.formula="λc⦂List(pNat)×pNat ↦ d⦂List(pNat)×pNat·c∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))∧d∈(BNumNorm ⦂ ℙ(List(pNat)×pNat)) ∣ c BNumLeqB d"/>
</org.eventb.theory.core.scRewriteRule>
</org.eventb.theory.core.scProofRulesBlock>
</org.eventb.theory.core.deployedTheoryRoot>
