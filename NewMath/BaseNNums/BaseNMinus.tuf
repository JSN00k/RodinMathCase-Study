<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.theoryRoot org.eventb.core.configuration="org.eventb.theory.core.thy">
<org.eventb.theory.core.newOperatorDefinition name="(" org.eventb.core.label="BaseNMinusInternal" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="List(pNat)" org.eventb.core.identifier="xL"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="List(pNat)" org.eventb.core.identifier="yL"/>
<org.eventb.theory.core.operatorArgument name=")" org.eventb.core.expression="pNat" org.eventb.core.identifier="B"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="*" org.eventb.theory.core.inductiveArgument="xL">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="nil" org.eventb.theory.core.formula="nil ⦂ List(pNat)"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="cons(xH, xT)" org.eventb.theory.core.formula="COND(xH pLeq BNumLSDInternal(yL),&#10;  COND(xT = nil,&#10;    nil,&#10;&#9;COND(BaseNMinusInternal(xT, BNumShiftLeftInternal(yL), B) = nil,&#10;&#9;  nil,&#10;&#9;  COND(xH = BNumLSDInternal(yL),&#10;&#9;    cons(zero, BaseNMinusInternal(xT, BNumShiftLeftInternal(yL), B)),&#10;&#9;    COND(BaseNDecrementInternal(xT, B) = BNumShiftLeftInternal(yL),&#10;&#9;      cons((xH pAdd B) pMinus BNumLSDInternal(yL), nil),&#10; &#9;      cons((xH pAdd B) pMinus BNumLSDInternal(yL), &#10;            BaseNMinusInternal(BaseNDecrementInternal(xT, B), BNumShiftLeftInternal(yL), B)))))),&#10;  cons(xH pMinus BNumLSDInternal(yL), BaseNMinusInternal(xT, BNumShiftLeftInternal(yL), B)))"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name=")" org.eventb.core.label="BNumMinus" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="INFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="BNum" org.eventb.core.identifier="x"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="BNum" org.eventb.core.identifier="y"/>
<org.eventb.theory.core.directOperatorDefinition name=")" org.eventb.theory.core.formula="BaseNMinusInternal(BNumList(x), BNumList(y), BNumBase(x)) ↦ BNumBase(x)"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.theorem name="," org.eventb.core.label="Zero is the end" org.eventb.core.predicate="∀x, B· x ∈ BNumNorm ⇒ ((nil ⦂ List(pNat)) ↦ B) BNumMinus x = ((nil ⦂ List(pNat)) ↦  B)"/>
<org.eventb.theory.core.theorem name="5" org.eventb.core.label="x - 0 = x not WD" org.eventb.core.predicate="∀x, B·BaseNIsNormalInternal(x) ⇒ BaseNMinusInternal(x, nil, B) = x"/>
<org.eventb.theory.core.theorem name="-" org.eventb.core.label="x - 0 = x" org.eventb.core.predicate="∀x, B·x ∈ BNumNorm ∧ BNumBase(x) = B ⇒ x BNumMinus ((nil ⦂ List(pNat)) ↦ B) = x"/>
<org.eventb.theory.core.theorem name="6" org.eventb.core.label="x - x = nil" org.eventb.core.predicate="∀x, y·x ∈ BNumNorm ∧ y ∈ BNumNorm ∧ BNumList(x) = BNumList(y) ⇒ x BNumMinus y = nil ↦ BNumBase(x)"/>
<org.eventb.theory.core.theorem name="." org.eventb.core.label="Longer Nums cororally" org.eventb.core.predicate="∀x, B·x↦B ∈ BNumNorm⇒(∀y, yH·x↦B ∈ BNumNorm ∧ y ↦ B ∈ BNumNorm ∧ BaseNMinusInternal(x, y, B) = nil ⇒ BaseNMinusInternal(x, cons(yH, y), B) = nil)"/>
<org.eventb.theory.core.theorem name="0" org.eventb.core.label="subtracting from small num nil" org.eventb.core.predicate="∀x, B·x↦B ∈ BNumNorm⇒(∀y, xH·x↦B ∈ BNumNorm ∧ y ↦ B ∈ BNumNorm ∧ BaseNMinusInternal(cons(xH, x), y, B) = nil ⇒ BaseNMinusInternal(x, y, B) = nil)"/>
<org.eventb.theory.core.theorem name="1" org.eventb.core.label="sub shift left doesn't give nil" org.eventb.core.predicate="∀x, B·BaseNIsNormalInternal(x) ∧ x ≠ nil ⇒ BaseNMinusInternal(x, BNumShiftLeftInternal(x), B) ≠ nil"/>
<org.eventb.theory.core.theorem name="2" org.eventb.core.label="sub shift left doesn't give nil with Decr" org.eventb.core.predicate="∀x, B·BaseNIsNormalInternal(x) ∧ x ≠ nil ⇒ BaseNMinusInternal(x, BNumShiftLeftInternal(BaseNDecrementInternal(x, B)), B) ≠ nil"/>
<org.eventb.theory.core.theorem name="3" org.eventb.core.label="x - decr x not nil" org.eventb.core.predicate="∀x, B·x ≠ nil ∧ BaseNIsNormalInternal(x) ⇒ BaseNMinusInternal(x, BaseNDecrementInternal(x, B), B) ≠ nil "/>
<org.eventb.theory.core.theorem name="4" org.eventb.core.label="minus a smaller number not nil" org.eventb.core.predicate="∀y, B·∀x·BaseNIsNormalInternal(x) ∧ BaseNIsNormalInternal(y) ∧ BaseNMinusInternal(x, y, B)≠nil ⇒ BaseNMinusInternal(x, BNumShiftLeftInternal(y), B) ≠ nil"/>
<org.eventb.theory.core.theorem name="/" org.eventb.core.label="Longer Nums cororally 2" org.eventb.core.predicate="∀x, B·x ↦ B ∈ BNumNorm ⇒ (∀y, yH, yB·y ↦ yB ∈ BNumNorm &#10;  ∧ BaseNMinusInternal(x, y, B) = nil ⇒ BaseNMinusInternal(x, cons(yH, y), B) = nil)"/>
<org.eventb.theory.core.importTheoryProject name="+" org.eventb.theory.core.importTheoryProject="/BaseNNums">
<org.eventb.theory.core.importTheory name="'" org.eventb.theory.core.importTheory="/BaseNNums/BaseNNum.dtf|org.eventb.theory.core.deployedTheoryRoot#BaseNNum"/>
</org.eventb.theory.core.importTheoryProject>
<org.eventb.theory.core.theorem name="*" org.eventb.core.label="Longer numbers are bigger" org.eventb.core.predicate="∀x, y·x ∈ BNumNorm ∧ y ∈ BNumNorm ∧ length(BNumList(x)) pLt length(BNumList(y)) &#10;  ⇒ x BNumMinus y = nil ↦ BNumBase(x)"/>
</org.eventb.theory.core.theoryRoot>
