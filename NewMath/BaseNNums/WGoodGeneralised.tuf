<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.theoryRoot org.eventb.core.configuration="org.eventb.theory.core.thy">
<org.eventb.theory.core.importTheoryProject name="'" org.eventb.theory.core.importTheoryProject="/BaseNNums">
<org.eventb.theory.core.importTheory name="'" org.eventb.theory.core.importTheory="/BaseNNums/BaseNOrderedSets.dtf|org.eventb.theory.core.deployedTheoryRoot#BaseNOrderedSets"/>
</org.eventb.theory.core.importTheoryProject>
<org.eventb.theory.core.typeParameter name="(" org.eventb.core.identifier="T"/>
<org.eventb.theory.core.newOperatorDefinition name="-" org.eventb.core.label="ListIsZero" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="List(pNat)" org.eventb.core.identifier="L"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="(" org.eventb.theory.core.inductiveArgument="L">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="nil" org.eventb.theory.core.formula="⊤ "/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="cons(LH, LT)" org.eventb.theory.core.formula="LH = zero ∧ ListIsZero(LT)"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name=")" org.eventb.core.label="BaseInfo" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.directOperatorDefinition name="(" org.eventb.theory.core.formula="{ s ↦ getBase ↦ nextInfo ∣ s ∈ t ∧ getBase ∈ (t × List(pNat) → pNat) ∧ nextInfo ∈ t → t  }"/>
<org.eventb.theory.core.operatorArgument name=")" org.eventb.core.expression="ℙ(T)" org.eventb.core.identifier="t"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="6" org.eventb.core.label="BaseInfoGetState" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.directOperatorDefinition name="(" org.eventb.theory.core.formula="prj1(prj1(BI))"/>
<org.eventb.theory.core.operatorArgument name=")" org.eventb.core.expression="ℙ(T)" org.eventb.core.identifier="t"/>
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="BaseInfo(t)" org.eventb.core.identifier="BI"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="/" org.eventb.core.label="BaseInfoGetBaseFunc" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.directOperatorDefinition name=")" org.eventb.theory.core.formula="prj2(prj1(BI))"/>
<org.eventb.theory.core.operatorArgument name="*" org.eventb.core.expression="ℙ(T)" org.eventb.core.identifier="t"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="BaseInfo(t)" org.eventb.core.identifier="BI"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="7" org.eventb.core.label="BaseInfoGetBase" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="ℙ(T)" org.eventb.core.identifier="t"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="BaseInfo(t)" org.eventb.core.identifier="BI"/>
<org.eventb.theory.core.operatorArgument name=")" org.eventb.core.expression="List(pNat)" org.eventb.core.identifier="L"/>
<org.eventb.theory.core.directOperatorDefinition name="*" org.eventb.theory.core.formula="BaseInfoGetBaseFunc(t, BI)(BaseInfoGetState(t, BI) ↦ L)"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="0" org.eventb.core.label="BaseInfoGetNextS" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="ℙ(T)" org.eventb.core.identifier="t"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="BaseInfo(t)" org.eventb.core.identifier="BI"/>
<org.eventb.theory.core.directOperatorDefinition name=")" org.eventb.theory.core.formula="prj2(BI)(BaseInfoGetState(t, BI))"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="5" org.eventb.core.label="BaseInfoGetNextBI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="ℙ(T)" org.eventb.core.identifier="t"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="BaseInfo(t)" org.eventb.core.identifier="BI"/>
<org.eventb.theory.core.directOperatorDefinition name=")" org.eventb.theory.core.formula="BaseInfoGetNextS(t, BI) ↦ BaseInfoGetBaseFunc(t, BI) ↦ prj2(BI)"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="+" org.eventb.core.label="ExtNum" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="ℙ(T)" org.eventb.core.identifier="t"/>
<org.eventb.theory.core.directOperatorDefinition name="*" org.eventb.theory.core.formula="List(pNat) × BaseInfo(t)"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="3" org.eventb.core.label="ExtNumList" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name=")" org.eventb.core.expression="ℙ(T)" org.eventb.core.identifier="t"/>
<org.eventb.theory.core.directOperatorDefinition name="(" org.eventb.theory.core.formula="prj1(xNum)"/>
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="ExtNum(t)" org.eventb.core.identifier="xNum"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="4" org.eventb.core.label="ExtNumBI" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name=")" org.eventb.core.expression="ℙ(T)" org.eventb.core.identifier="t"/>
<org.eventb.theory.core.directOperatorDefinition name="(" org.eventb.theory.core.formula="prj2(xNum)"/>
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="ExtNum(t)" org.eventb.core.identifier="xNum"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="8" org.eventb.core.label="ExtNumChangeBase" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="ℙ(T)" org.eventb.core.identifier="t"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="ExtNum(t)" org.eventb.core.identifier="xNum"/>
<org.eventb.theory.core.directOperatorDefinition name=")" org.eventb.theory.core.formula="ExtNumList(t, xNum) ↦ BaseInfoGetNextBI(t, ExtNumBI(t, xNum))"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="1" org.eventb.core.label="DecrInternalExt" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="ℙ(T)" org.eventb.core.identifier="t"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="List(pNat)" org.eventb.core.identifier="x"/>
<org.eventb.theory.core.operatorArgument name=")" org.eventb.core.expression="BaseInfo(t)" org.eventb.core.identifier="BI"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="nil" org.eventb.theory.core.formula="nil ⦂ List(pNat)"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="cons(xH, xT)" org.eventb.theory.core.formula="COND((xH = zero ∧ ListIsZero(xT)) ∨ (xH = one ∧ xT = nil), &#10;  nil,&#10;  COND(xH = zero,&#10;    COND(xT = cons(suc(zero), nil),&#10;      cons(pDecrement(BaseInfoGetBase(t, BI, cons(xH, xT))), nil),&#10;      cons(pDecrement(BaseInfoGetBase(t, BI, cons(xH, xT))), DecrInternalExt(t, xT, BI))),&#10;    cons(pDecrement(xH), xT)))"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="2" org.eventb.core.label="WGoodDecrExt" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="ℙ(T)" org.eventb.core.identifier="t"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="ExtNum(t)" org.eventb.core.identifier="xNum"/>
<org.eventb.theory.core.directOperatorDefinition name=")" org.eventb.theory.core.formula="DecrInternalExt(t, ExtNumList(t, ExtNumChangeBase(t, xNum)), ExtNumBI(t, ExtNumChangeBase(t, xNum))) ↦ BaseInfoGetNextBI(t, ExtNumBI(t, xNum))"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="9" org.eventb.core.label="DecrNExt" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="ℙ(T)" org.eventb.core.identifier="t"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="ExtNum(t)" org.eventb.core.identifier="xNum"/>
<org.eventb.theory.core.operatorArgument name=")" org.eventb.core.expression="pNat" org.eventb.core.identifier="n"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="*" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="zero" org.eventb.theory.core.formula="xNum"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.theory.core.formula="DecrNExt(t, WGoodDecrExt(t, xNum), ns)"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.theorem name=";" org.eventb.core.label="WGood Type preservation" org.eventb.core.predicate="∀x, t·t ∈ ℙ(T) ∧ x ∈ ExtNum(t) ⇒ WGoodDecrExt(t, x) ∈ ExtNum(t)"/>
<org.eventb.theory.core.theorem name="=" org.eventb.core.label="DecrNExt type preservation" org.eventb.core.predicate="∀n·∀x, t·t ∈ ℙ(T) ∧ x ∈ ExtNum(t) ⇒ DecrNExt(t, x, n) ∈ ExtNum(t)"/>
<org.eventb.theory.core.theorem name="?" org.eventb.core.label="BaseInfoGetNextBI gives a Bi" org.eventb.core.predicate="∀B, t·t ∈ ℙ(T) ∧ B ∈ BaseInfo(t) ⇒ BaseInfoGetNextBI(t, B) ∈ BaseInfo(t)"/>
<org.eventb.theory.core.theorem name=":" org.eventb.core.label="DecrNExt addition" org.eventb.core.predicate="∀m, n·∀x, t· t ∈ ℙ(T) ∧ x ∈ ExtNum(t) ⇒ (DecrNExt(t, x, m pAdd n) = DecrNExt(t, DecrNExt(t, x, m), n))"/>
<org.eventb.theory.core.theorem name="&gt;" org.eventb.core.label="WGoodDecrExt leq length" org.eventb.core.predicate="∀x, t·t ∈ ℙ(T) ∧ x ∈ ExtNum(t) ⇒ length(ExtNumList(t, WGoodDecrExt(t, x))) pLeq length(ExtNumList(t, x))"/>
<org.eventb.theory.core.theorem name="@" org.eventb.core.label="WGoodDecrExt out of baseNDecrExt" org.eventb.core.predicate="∀n·∀x, t·t ∈ ℙ(T) ∧x ∈ ExtNum(t) ⇒ DecrNExt(t, WGoodDecrExt(t, x), n) = WGoodDecrExt(t, DecrNExt(t, x, n))"/>
<org.eventb.theory.core.theorem name="A" org.eventb.core.label="DecrNExt leq length" org.eventb.core.predicate="∀n·∀x, t·t ∈ ℙ(T) ∧ x ∈ ExtNum(t) ⇒ length(ExtNumList(t, DecrNExt(t, x, n))) pLeq length(ExtNumList(t, x))"/>
<org.eventb.theory.core.theorem name="B" org.eventb.core.label="DecrNExt Expansion" org.eventb.core.predicate="∀n·∀x, t·x ∈ ExtNum(t) ∧ t ∈ ℙ(T) ⇒ DecrNExt(t, x, suc(n)) = DecrNExt(t, DecrNExt(t, x, n), one)"/>
<org.eventb.theory.core.theorem name="C" org.eventb.core.comment="There's an additional case to consider here as the number&#10;can end in lots of zeros in which case this is no&#10;longer true. This needs to be dealt with." org.eventb.core.label="DecrNExt decrements all digits" org.eventb.core.predicate="∀n·∀x, t·t ∈ ℙ(T) ∧ x ∈ ExtNum(t) ∧ t ∈ ℙ(T) ∧ n pLt length(ExtNumList(t, x))&#10;  ⇒ (∃m· DecrNExt(t, x, m) = appendList(BNumMkKsN(pDecrement(BaseInfoGetBase(t, ExtNumBI(t, DecrNExt(t, x, m)), ExtNumList(t, DecrNExt(t, x, m)))), n), DecrInternalExt(t, BNumDigitsGreqNInternal(ExtNumList(t, x), n), ExtNumBI(t, DecrNExt(t, x, m)))) ↦ ExtNumBI(t, DecrNExt(t, x, m)))"/>
</org.eventb.theory.core.theoryRoot>
