<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.deployedTheoryRoot org.eventb.core.accurate="true" org.eventb.core.comment="GENERATED THEORY FILE: !DO NOT CHANGE!" org.eventb.theory.core.modificationHashValue="a9338fe36ab18d7dd77826a3f866fe1d" org.eventb.theory.core.outdated="false">
<org.eventb.theory.core.useTheory name="pNat" org.eventb.core.scTarget="/PeanoNaturals/pNat.dtf|org.eventb.theory.core.deployedTheoryRoot#pNat"/>
<org.eventb.theory.core.useTheory name="List" org.eventb.core.scTarget="/ListTheory/List.dtf|org.eventb.theory.core.deployedTheoryRoot#List"/>
<org.eventb.theory.core.scNewOperatorDefinition name=")" org.eventb.core.label="BNum" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(pNat)×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="*" org.eventb.core.label="BNumList" org.eventb.core.predicate="BaseNum∈(BNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(pNat)" org.eventb.theory.core.wd="BaseNum∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))">
<org.eventb.theory.core.scOperatorArgument name="BaseNum" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(BaseNum)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="+" org.eventb.core.label="BNumBase" org.eventb.core.predicate="BaseNum∈(BNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="BaseNum∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))">
<org.eventb.theory.core.scOperatorArgument name="BaseNum" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(BaseNum)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="," org.eventb.core.label="BaseNIsZeroInternal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="L" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="L">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(pNat)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(LH,LT)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="LH=(zero ⦂ pNat)∧BaseNIsZeroInternal(LT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="-" org.eventb.core.label="BNumIsZero" org.eventb.core.predicate="n∈(BNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="BaseNIsZeroInternal(BNumList(n))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="." org.eventb.core.label="BaseNIsNormalInternal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="L" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="L">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(pNat)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="cons(LH,LT)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(LT=(nil ⦂ List(pNat))∧LH≠(zero ⦂ pNat))∨(LT≠(nil ⦂ List(pNat))∧BaseNIsNormalInternal(LT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="/" org.eventb.core.label="BNumIsWD" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="L" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scOperatorArgument name="B" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="L">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(pNat)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤∧(two ⦂ pNat) pLeq B"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(L_head,L_tail)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(two ⦂ pNat) pLeq B∧L_head pLeq pDecrement(B)∧BNumIsWD(L_tail,B)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="0" org.eventb.core.label="BNumIsNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="(Num∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧Num∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧BNumIsWD((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(Num),(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(Num))∧BaseNIsNormalInternal(BNumList(Num)))∨(Num∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧Num∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧¬BNumIsWD((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(Num),(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(Num)))∨¬BaseNIsNormalInternal(BNumList(Num))">
<org.eventb.theory.core.scOperatorArgument name="Num" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="BNumIsWD((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(Num),(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(Num))∧BaseNIsNormalInternal(BNumList(Num))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="1" org.eventb.core.label="BNumNorm" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(pNat)×pNat)" org.eventb.theory.core.wd="∀Num⦂List(pNat),Base⦂pNat·(Num∈List(pNat ⦂ ℙ(pNat))∧Base∈(pNat ⦂ ℙ(pNat))∧BNumIsNormal(Num ↦ Base))∨¬Num∈List(pNat ⦂ ℙ(pNat))∨¬Base∈(pNat ⦂ ℙ(pNat))∨¬BNumIsNormal(Num ↦ Base)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{Num⦂List(pNat),Base⦂pNat·Num∈List(pNat ⦂ ℙ(pNat))∧Base∈(pNat ⦂ ℙ(pNat))∧BNumIsNormal(Num ↦ Base) ∣ Num ↦ Base}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="2" org.eventb.core.label="BaseNDecrementInternal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="L" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scOperatorArgument name="B" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="L">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(pNat)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(pNat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(LH,LT)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(LH=(one ⦂ pNat)∧LT=(nil ⦂ List(pNat)),nil ⦂ List(pNat),COND(LH=(zero ⦂ pNat),COND(LT=cons(suc(zero ⦂ pNat),nil ⦂ List(pNat)),cons(pDecrement(B),nil ⦂ List(pNat)),cons(pDecrement(B),BaseNDecrementInternal(LT,B))),cons(pDecrement(LH),LT)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="3" org.eventb.core.label="BaseNDecrement" org.eventb.core.predicate="n∈(BNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(pNat)×pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="BaseNDecrementInternal(BNumList(n),BNumBase(n)) ↦ BNumBase(n)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="4" org.eventb.core.label="BNumLSDInternal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="L" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="L">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(pNat)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ pNat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(LH,LT)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="LH"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="5" org.eventb.core.label="BNumLSD" org.eventb.core.predicate="n∈(BNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat×pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="BNumLSDInternal(BNumList(n)) ↦ BNumBase(n)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="6" org.eventb.core.label="BNumShiftLeftInternal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="L" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="L">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(pNat)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(pNat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(LH,LT)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="LT"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="7" org.eventb.core.label="BNumShiftLeft" org.eventb.core.predicate="n∈(BNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#A" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(pNat)×pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="BNumShiftLeftInternal(BNumList(n)) ↦ BNumBase(n)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="8" org.eventb.core.label="WGoodDecr" org.eventb.core.predicate="xy∈(BNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#C" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(pNat)×pNat" org.eventb.theory.core.wd="xy∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(xy)=(nil ⦂ List(pNat))⇒⊤)∧(¬(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(xy)=(nil ⦂ List(pNat))⇒xy∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧xy∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat)))">
<org.eventb.theory.core.scOperatorArgument name="xy" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#C|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#C|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(xy)=(nil ⦂ List(pNat)),(nil ⦂ List(pNat)) ↦ suc(suc(zero ⦂ pNat)),BaseNDecrementInternal((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(xy),suc((prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(xy))) ↦ suc((prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(xy)))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="9" org.eventb.core.label="WGoodDecr_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#M" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(pNat)×pNat×(List(pNat)×pNat))" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#M|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(pNat)×pNat·x∈(BNumNorm ⦂ ℙ(List(pNat)×pNat)) ∣ WGoodDecr(x)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scTheorem name="generatedBlocl" org.eventb.core.label="WD Base is two or more" org.eventb.core.predicate="∀xL⦂List(pNat),xB⦂pNat·BNumIsWD(xL,xB)⇒(two ⦂ pNat) pLeq xB" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#L" org.eventb.theory.core.order="0"/>
<org.eventb.theory.core.scTheorem name="generatedBlocm" org.eventb.core.label="EndingWithZerosIsNotNormal" org.eventb.core.predicate="∀x⦂List(pNat)·x≠(nil ⦂ List(pNat))∧BaseNIsZeroInternal(x)⇒(∀B⦂pNat·¬BNumIsNormal(x ↦ B))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#8" org.eventb.theory.core.order="1"/>
<org.eventb.theory.core.scTheorem name="generatedBlocn" org.eventb.core.label="DecrInternal Maintains Normality" org.eventb.core.predicate="∀x⦂List(pNat),B⦂pNat·(two ⦂ pNat) pLeq B∧BaseNIsNormalInternal(x)⇒BaseNIsNormalInternal(BaseNDecrementInternal(x,B))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#F" org.eventb.theory.core.order="2"/>
<org.eventb.theory.core.scTheorem name="generatedBloco" org.eventb.core.label="BNDecrementMaintainsNormalityCororally" org.eventb.core.predicate="∀L⦂List(pNat)·∀B⦂pNat·L ↦ B∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))⇒BaseNDecrement(L ↦ B)∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#:" org.eventb.theory.core.order="3"/>
<org.eventb.theory.core.scTheorem name="generatedBlocp" org.eventb.core.label="BNDecrementMaintainsNormality" org.eventb.core.predicate="∀num⦂List(pNat)×pNat·num∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))⇒BaseNDecrement(num)∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#9" org.eventb.theory.core.order="4"/>
<org.eventb.theory.core.scTheorem name="generatedBlocq" org.eventb.core.label="Decr reduces size by 1 max" org.eventb.core.predicate="∀x⦂List(pNat),B⦂pNat·BaseNIsNormalInternal(x)∧(two ⦂ pNat) pLeq B⇒length(x)=length(BaseNDecrementInternal(x,B))∨length(x)=suc(length(BaseNDecrementInternal(x,B)))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#H" org.eventb.theory.core.order="5"/>
<org.eventb.theory.core.scTheorem name="generatedBlocr" org.eventb.core.label="Decr reduces size full rules" org.eventb.core.predicate="∀x⦂List(pNat),B⦂pNat·BaseNIsNormalInternal(x)⇒(length(x)=suc(length(BaseNDecrementInternal(x,B)))⇔(BNumShiftLeftInternal(x)=(nil ⦂ List(pNat))∧BNumLSDInternal(x)=(one ⦂ pNat))∨(BNumLSDInternal(x)=(zero ⦂ pNat)∧x≠(nil ⦂ List(pNat))))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#I" org.eventb.theory.core.order="6"/>
<org.eventb.theory.core.scTheorem name="generatedBlocs" org.eventb.core.label="shiftLeftInternal Maintains normality" org.eventb.core.predicate="∀x⦂List(pNat)·BaseNIsNormalInternal(x)⇒BaseNIsNormalInternal(BNumShiftLeftInternal(x))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#E" org.eventb.theory.core.order="7"/>
<org.eventb.theory.core.scTheorem name="generatedBloct" org.eventb.core.label="shiftLeftInternal reduces length" org.eventb.core.predicate="∀x⦂List(pNat)·x≠(nil ⦂ List(pNat))⇒length(x)=suc(length(BNumShiftLeftInternal(x)))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#G" org.eventb.theory.core.order="8"/>
<org.eventb.theory.core.scTheorem name="generatedBlocu" org.eventb.core.label="Shift left maintains normality" org.eventb.core.predicate="∀x⦂List(pNat)×pNat·x∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))⇒BNumShiftLeft(x)∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#B" org.eventb.theory.core.order="9"/>
<org.eventb.theory.core.scTheorem name="generatedBlocv" org.eventb.core.label="shift left into append" org.eventb.core.predicate="∀x⦂List(pNat),xH⦂pNat·x≠(nil ⦂ List(pNat))⇒BNumShiftLeftInternal(append(x,xH))=append(BNumShiftLeftInternal(x),xH)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#O" org.eventb.theory.core.order="10"/>
<org.eventb.theory.core.scTheorem name="generatedBlocw" org.eventb.core.label="shift left into appendList" org.eventb.core.predicate="∀x⦂List(pNat),y⦂List(pNat)·x≠(nil ⦂ List(pNat))⇒BNumShiftLeftInternal(appendList(x,y))=appendList(BNumShiftLeftInternal(x),y)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#N" org.eventb.theory.core.order="11"/>
<org.eventb.theory.core.scTheorem name="generatedBlocx" org.eventb.core.label="WGoodDecr Maintains Normality Cororally" org.eventb.core.predicate="∀x⦂List(pNat)×pNat·x∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))⇒BNumList(x) ↦ suc(BNumBase(x))∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#=" org.eventb.theory.core.order="12"/>
<org.eventb.theory.core.scTheorem name="generatedBlocy" org.eventb.core.label="WGood is closed" org.eventb.core.predicate="∀a⦂List(pNat)×pNat·a∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))⇒WGoodDecr(a)∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#D" org.eventb.theory.core.order="13"/>
<org.eventb.theory.core.scProofRulesBlock name="generatedBlock" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#1">
<org.eventb.theory.core.scMetavariable name="BaseNum" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scMetavariable name="L" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scMetavariable name="LH" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scMetavariable name="LT" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scMetavariable name="n" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scMetavariable name="B" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scMetavariable name="L_head" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scMetavariable name="L_tail" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scMetavariable name="Num" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#." org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scMetavariable name="xy" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#C" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNum" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNum" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNum expansion" org.eventb.theory.core.formula="BNum ⦂ ℙ(List(pNat)×pNat)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNum rhs" org.eventb.core.label="BNum rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.formula="List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumList" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumList" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumList expansion" org.eventb.theory.core.formula="BNumList(BaseNum)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumList rhs" org.eventb.core.label="BNumList rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(BaseNum)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumBase" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumBase" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumBase expansion" org.eventb.theory.core.formula="BNumBase(BaseNum)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumBase rhs" org.eventb.core.label="BNumBase rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(BaseNum)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNIsZeroInternal case 0" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNIsZeroInternal case 0" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNIsZeroInternal expansion" org.eventb.theory.core.formula="BaseNIsZeroInternal(nil ⦂ List(pNat))">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNIsZeroInternal rhs" org.eventb.core.label="BaseNIsZeroInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNIsZeroInternal case 1" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNIsZeroInternal case 1" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNIsZeroInternal expansion" org.eventb.theory.core.formula="BaseNIsZeroInternal(cons(LH,LT))">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNIsZeroInternal rhs" org.eventb.core.label="BaseNIsZeroInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.formula="LH=(zero ⦂ pNat)∧BaseNIsZeroInternal(LT)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumIsZero" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumIsZero" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumIsZero expansion" org.eventb.theory.core.formula="BNumIsZero(n)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumIsZero rhs" org.eventb.core.label="BNumIsZero rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.formula="BaseNIsZeroInternal(BNumList(n))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNIsNormalInternal case 0" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNIsNormalInternal case 0" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNIsNormalInternal expansion" org.eventb.theory.core.formula="BaseNIsNormalInternal(nil ⦂ List(pNat))">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNIsNormalInternal rhs" org.eventb.core.label="BaseNIsNormalInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNIsNormalInternal case 1" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNIsNormalInternal case 1" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNIsNormalInternal expansion" org.eventb.theory.core.formula="BaseNIsNormalInternal(cons(LH,LT))">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNIsNormalInternal rhs" org.eventb.core.label="BaseNIsNormalInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.formula="(LT=(nil ⦂ List(pNat))∧LH≠(zero ⦂ pNat))∨(LT≠(nil ⦂ List(pNat))∧BaseNIsNormalInternal(LT))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumIsWD case 0" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumIsWD case 0" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumIsWD expansion" org.eventb.theory.core.formula="BNumIsWD(nil ⦂ List(pNat),B)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumIsWD rhs" org.eventb.core.label="BNumIsWD rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.formula="⊤∧(two ⦂ pNat) pLeq B"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumIsWD case 1" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumIsWD case 1" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumIsWD expansion" org.eventb.theory.core.formula="BNumIsWD(cons(L_head,L_tail),B)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumIsWD rhs" org.eventb.core.label="BNumIsWD rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.formula="(two ⦂ pNat) pLeq B∧L_head pLeq pDecrement(B)∧BNumIsWD(L_tail,B)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumIsNormal" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumIsNormal" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumIsNormal expansion" org.eventb.theory.core.formula="BNumIsNormal(Num)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumIsNormal rhs" org.eventb.core.label="BNumIsNormal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.formula="BNumIsWD((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(Num),(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(Num))∧BaseNIsNormalInternal(BNumList(Num))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumNorm" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumNorm" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumNorm expansion" org.eventb.theory.core.formula="BNumNorm ⦂ ℙ(List(pNat)×pNat)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumNorm rhs" org.eventb.core.label="BNumNorm rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.formula="{Num⦂List(pNat),Base⦂pNat·Num∈List(pNat ⦂ ℙ(pNat))∧Base∈(pNat ⦂ ℙ(pNat))∧BNumIsNormal(Num ↦ Base) ∣ Num ↦ Base}"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNDecrementInternal case 0" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNDecrementInternal case 0" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNDecrementInternal expansion" org.eventb.theory.core.formula="BaseNDecrementInternal(nil ⦂ List(pNat),B)">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNDecrementInternal rhs" org.eventb.core.label="BaseNDecrementInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.formula="nil ⦂ List(pNat)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNDecrementInternal case 1" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNDecrementInternal case 1" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNDecrementInternal expansion" org.eventb.theory.core.formula="BaseNDecrementInternal(cons(LH,LT),B)">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNDecrementInternal rhs" org.eventb.core.label="BaseNDecrementInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.formula="COND(LH=(one ⦂ pNat)∧LT=(nil ⦂ List(pNat)),nil ⦂ List(pNat),COND(LH=(zero ⦂ pNat),COND(LT=cons(suc(zero ⦂ pNat),nil ⦂ List(pNat)),cons(pDecrement(B),nil ⦂ List(pNat)),cons(pDecrement(B),BaseNDecrementInternal(LT,B))),cons(pDecrement(LH),LT)))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNDecrement" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNDecrement" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNDecrement expansion" org.eventb.theory.core.formula="BaseNDecrement(n)">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNDecrement rhs" org.eventb.core.label="BaseNDecrement rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.formula="BaseNDecrementInternal(BNumList(n),BNumBase(n)) ↦ BNumBase(n)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumLSDInternal case 0" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumLSDInternal case 0" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumLSDInternal expansion" org.eventb.theory.core.formula="BNumLSDInternal(nil ⦂ List(pNat))">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumLSDInternal rhs" org.eventb.core.label="BNumLSDInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;" org.eventb.theory.core.formula="zero ⦂ pNat"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumLSDInternal case 1" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumLSDInternal case 1" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumLSDInternal expansion" org.eventb.theory.core.formula="BNumLSDInternal(cons(LH,LT))">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumLSDInternal rhs" org.eventb.core.label="BNumLSDInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;" org.eventb.theory.core.formula="LH"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumLSD" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumLSD" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#?" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumLSD expansion" org.eventb.theory.core.formula="BNumLSD(n)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumLSD rhs" org.eventb.core.label="BNumLSD rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#?" org.eventb.theory.core.formula="BNumLSDInternal(BNumList(n)) ↦ BNumBase(n)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumShiftLeftInternal case 0" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumShiftLeftInternal case 0" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumShiftLeftInternal expansion" org.eventb.theory.core.formula="BNumShiftLeftInternal(nil ⦂ List(pNat))">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumShiftLeftInternal rhs" org.eventb.core.label="BNumShiftLeftInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@" org.eventb.theory.core.formula="nil ⦂ List(pNat)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumShiftLeftInternal case 1" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumShiftLeftInternal case 1" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumShiftLeftInternal expansion" org.eventb.theory.core.formula="BNumShiftLeftInternal(cons(LH,LT))">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumShiftLeftInternal rhs" org.eventb.core.label="BNumShiftLeftInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@" org.eventb.theory.core.formula="LT"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumShiftLeft" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumShiftLeft" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#A" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumShiftLeft expansion" org.eventb.theory.core.formula="BNumShiftLeft(n)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumShiftLeft rhs" org.eventb.core.label="BNumShiftLeft rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#A" org.eventb.theory.core.formula="BNumShiftLeftInternal(BNumList(n)) ↦ BNumBase(n)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.WGoodDecr" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.WGoodDecr" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#C" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="WGoodDecr expansion" org.eventb.theory.core.formula="WGoodDecr(xy)">
<org.eventb.theory.core.scRewriteRuleRHS name="WGoodDecr rhs" org.eventb.core.label="WGoodDecr rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#C" org.eventb.theory.core.formula="COND((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(xy)=(nil ⦂ List(pNat)),(nil ⦂ List(pNat)) ↦ suc(suc(zero ⦂ pNat)),BaseNDecrementInternal((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(xy),suc((prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(xy))) ↦ suc((prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(xy)))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.WGoodDecr_P" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.WGoodDecr_P" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#M" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="WGoodDecr_P expansion" org.eventb.theory.core.formula="WGoodDecr_P ⦂ ℙ(List(pNat)×pNat×(List(pNat)×pNat))">
<org.eventb.theory.core.scRewriteRuleRHS name="WGoodDecr_P rhs" org.eventb.core.label="WGoodDecr_P rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#M" org.eventb.theory.core.formula="λx⦂List(pNat)×pNat·x∈(BNumNorm ⦂ ℙ(List(pNat)×pNat)) ∣ WGoodDecr(x)"/>
</org.eventb.theory.core.scRewriteRule>
</org.eventb.theory.core.scProofRulesBlock>
<org.eventb.theory.core.scProofRulesBlock name="generatedBlocz" org.eventb.core.label="Fast Expansions" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J">
<org.eventb.theory.core.scMetavariable name="xB" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.metaVariable#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scMetavariable name="xL" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.metaVariable#'" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scRewriteRule name="xM" org.eventb.core.accurate="true" org.eventb.core.label="rew1" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.rewriteRule#)" org.eventb.theory.core.applicability="automatic" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="get List" org.eventb.theory.core.formula="BNumList(xL ↦ xB)">
<org.eventb.theory.core.scRewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.rewriteRule#)|org.eventb.theory.core.rewriteRuleRHS#'" org.eventb.theory.core.formula="xL"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="xN" org.eventb.core.accurate="true" org.eventb.core.label="rew2" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.rewriteRule#*" org.eventb.theory.core.applicability="automatic" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="get Base" org.eventb.theory.core.formula="BNumBase(xL ↦ xB)">
<org.eventb.theory.core.scRewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.rewriteRule#*|org.eventb.theory.core.rewriteRuleRHS#'" org.eventb.theory.core.formula="xB"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scInferenceRule name="xO" org.eventb.core.accurate="true" org.eventb.core.label="inf1" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.inferenceRule#+" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.desc="Base is two or more" org.eventb.theory.core.reasoningType="forward">
<org.eventb.theory.core.scInfer name="(" org.eventb.core.predicate="(two ⦂ pNat) pLeq xB" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.inferenceRule#+|org.eventb.theory.core.infer#("/>
<org.eventb.theory.core.scGiven name="'" org.eventb.core.predicate="BNumIsWD(xL,xB)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.inferenceRule#+|org.eventb.theory.core.given#'" org.eventb.theory.core.hyp="false"/>
</org.eventb.theory.core.scInferenceRule>
<org.eventb.theory.core.scInferenceRule name="xP" org.eventb.core.accurate="true" org.eventb.core.label="inf2" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.inferenceRule#," org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.desc="Base is two or more" org.eventb.theory.core.reasoningType="both">
<org.eventb.theory.core.scInfer name="(" org.eventb.core.predicate="(two ⦂ pNat) pLeq xB" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.inferenceRule#,|org.eventb.theory.core.infer#("/>
<org.eventb.theory.core.scGiven name="'" org.eventb.core.predicate="BNumIsWD(xL,xB)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.inferenceRule#,|org.eventb.theory.core.given#'" org.eventb.theory.core.hyp="true"/>
</org.eventb.theory.core.scInferenceRule>
<org.eventb.theory.core.scInferenceRule name="xQ" org.eventb.core.accurate="true" org.eventb.core.label="inf3" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.inferenceRule#-" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.desc="Base is two or more" org.eventb.theory.core.reasoningType="forward">
<org.eventb.theory.core.scInfer name="(" org.eventb.core.predicate="(two ⦂ pNat) pLeq xB" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.inferenceRule#-|org.eventb.theory.core.infer#("/>
<org.eventb.theory.core.scGiven name="'" org.eventb.core.predicate="BNumIsNormal(xL ↦ xB)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.inferenceRule#-|org.eventb.theory.core.given#'" org.eventb.theory.core.hyp="false"/>
</org.eventb.theory.core.scInferenceRule>
<org.eventb.theory.core.scInferenceRule name="xR" org.eventb.core.accurate="true" org.eventb.core.label="inf4" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.inferenceRule#." org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.desc="Base is two or more" org.eventb.theory.core.reasoningType="both">
<org.eventb.theory.core.scInfer name="(" org.eventb.core.predicate="(two ⦂ pNat) pLeq xB" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.inferenceRule#.|org.eventb.theory.core.infer#("/>
<org.eventb.theory.core.scGiven name="'" org.eventb.core.predicate="BNumIsNormal(xL ↦ xB)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#J|org.eventb.theory.core.inferenceRule#.|org.eventb.theory.core.given#'" org.eventb.theory.core.hyp="true"/>
</org.eventb.theory.core.scInferenceRule>
</org.eventb.theory.core.scProofRulesBlock>
<org.eventb.theory.core.scProofRulesBlock name="generatedBloc{" org.eventb.core.label="Fast Expansions2" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#K">
<org.eventb.theory.core.scMetavariable name="xH" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#K|org.eventb.theory.core.metaVariable#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scMetavariable name="xT" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#K|org.eventb.theory.core.metaVariable#(" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scRewriteRule name="xU" org.eventb.core.accurate="true" org.eventb.core.label="rew3" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#K|org.eventb.theory.core.rewriteRule#)" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="get the head of the list" org.eventb.theory.core.formula="BNumLSDInternal(cons(xH,xT))">
<org.eventb.theory.core.scRewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#K|org.eventb.theory.core.rewriteRule#)|org.eventb.theory.core.rewriteRuleRHS#'" org.eventb.theory.core.formula="xH"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="xV" org.eventb.core.accurate="true" org.eventb.core.label="rew4" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#K|org.eventb.theory.core.rewriteRule#*" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="get the tail of the list" org.eventb.theory.core.formula="BNumShiftLeftInternal(cons(xH,xT))">
<org.eventb.theory.core.scRewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#K|org.eventb.theory.core.rewriteRule#*|org.eventb.theory.core.rewriteRuleRHS#'" org.eventb.theory.core.formula="xT"/>
</org.eventb.theory.core.scRewriteRule>
</org.eventb.theory.core.scProofRulesBlock>
<org.eventb.theory.core.scProofRulesBlock name="generatedBloc|" org.eventb.core.label="Internal Rules" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#P">
<org.eventb.theory.core.scMetavariable name="x" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#P|org.eventb.theory.core.metaVariable#'" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scMetavariable name="xH" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#P|org.eventb.theory.core.metaVariable#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scMetavariable name="y" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#P|org.eventb.theory.core.metaVariable#(" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scRewriteRule name="xI" org.eventb.core.accurate="true" org.eventb.core.label="SL into append" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#P|org.eventb.theory.core.rewriteRule#*" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="false" org.eventb.theory.core.desc="append(shiftLeft(x), xH)" org.eventb.theory.core.formula="BNumShiftLeftInternal(append(x,xH))">
<org.eventb.theory.core.scRewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="x≠(nil ⦂ List(pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#P|org.eventb.theory.core.rewriteRule#*|org.eventb.theory.core.rewriteRuleRHS#'" org.eventb.theory.core.formula="append(BNumShiftLeftInternal(x),xH)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="xJ" org.eventb.core.accurate="true" org.eventb.core.label="SL into appendList" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#P|org.eventb.theory.core.rewriteRule#+" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="false" org.eventb.theory.core.desc="appendList(shiftLeft(x), y)" org.eventb.theory.core.formula="BNumShiftLeftInternal(appendList(x,y))">
<org.eventb.theory.core.scRewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="x≠(nil ⦂ List(pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.proofRulesBlock#P|org.eventb.theory.core.rewriteRule#+|org.eventb.theory.core.rewriteRuleRHS#'" org.eventb.theory.core.formula="appendList(BNumShiftLeftInternal(x),y)"/>
</org.eventb.theory.core.scRewriteRule>
</org.eventb.theory.core.scProofRulesBlock>
</org.eventb.theory.core.deployedTheoryRoot>
