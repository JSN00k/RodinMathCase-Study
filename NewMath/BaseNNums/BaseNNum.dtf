<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.deployedTheoryRoot org.eventb.core.accurate="true" org.eventb.core.comment="GENERATED THEORY FILE: !DO NOT CHANGE!" org.eventb.theory.core.modificationHashValue="076e0b5472f8e8b0684b92075ce484ae" org.eventb.theory.core.outdated="false">
<org.eventb.theory.core.useTheory name="pNat" org.eventb.core.scTarget="/PeanoNaturals/pNat.dtf|org.eventb.theory.core.deployedTheoryRoot#pNat"/>
<org.eventb.theory.core.useTheory name="List" org.eventb.core.scTarget="/ListTheory/List.dtf|org.eventb.theory.core.deployedTheoryRoot#List"/>
<org.eventb.theory.core.scNewOperatorDefinition name=")" org.eventb.core.label="BaseNum" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(pNat)×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="*" org.eventb.core.label="BNumList" org.eventb.core.predicate="BNum∈(BaseNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(pNat)" org.eventb.theory.core.wd="BNum∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))">
<org.eventb.theory.core.scOperatorArgument name="BNum" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(BNum)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="+" org.eventb.core.label="BNumBase" org.eventb.core.predicate="BNum∈(BaseNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="BNum∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))">
<org.eventb.theory.core.scOperatorArgument name="BNum" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(BNum)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="," org.eventb.core.label="BaseNIsZeroInternal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="L" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="L">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(pNat)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(LH,LT)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="LH=(zero ⦂ pNat)∧BaseNIsZeroInternal(LT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="-" org.eventb.core.label="BaseNIsZero" org.eventb.core.predicate="BNum∈(BaseNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="BNum" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="BaseNIsZeroInternal(BNumList(BNum))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="." org.eventb.core.label="BaseNIsNormalInternal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="L" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scOperatorArgument name="B" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="L">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(pNat)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name=")" org.eventb.core.expression="cons(LH,LT)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#)" org.eventb.theory.core.formula="(LT=(nil ⦂ List(pNat))∧LH≠(zero ⦂ pNat))∨(LT≠(nil ⦂ List(pNat))∧BaseNIsNormalInternal(LT,B))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="/" org.eventb.core.label="BaseNumIsWD" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="L" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scOperatorArgument name="B" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="L">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(pNat)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤∧(two ⦂ pNat) pLeq B"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(L_head,L_tail)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(two ⦂ pNat) pLeq B∧L_head pLeq pDecrement(B)∧BaseNumIsWD(L_tail,B)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="0" org.eventb.core.label="BaseNumIsNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="(Num∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧Num∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧BaseNumIsWD((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(Num),(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(Num))∧Num∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧Num∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧BaseNIsNormalInternal((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(Num),(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(Num)))∨(Num∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧Num∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧¬BaseNumIsWD((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(Num),(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(Num)))∨(Num∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧Num∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧¬BaseNIsNormalInternal((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(Num),(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(Num)))">
<org.eventb.theory.core.scOperatorArgument name="Num" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="BaseNumIsWD((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(Num),(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(Num))∧BaseNIsNormalInternal((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(Num),(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(Num))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="1" org.eventb.core.label="BaseNumNorm" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(pNat)×pNat)" org.eventb.theory.core.wd="∀Num⦂List(pNat),Base⦂pNat·(Num∈List(pNat ⦂ ℙ(pNat))∧Base∈(pNat ⦂ ℙ(pNat))∧BaseNumIsNormal(Num ↦ Base))∨¬Num∈List(pNat ⦂ ℙ(pNat))∨¬Base∈(pNat ⦂ ℙ(pNat))∨¬BaseNumIsNormal(Num ↦ Base)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{Num⦂List(pNat),Base⦂pNat·Num∈List(pNat ⦂ ℙ(pNat))∧Base∈(pNat ⦂ ℙ(pNat))∧BaseNumIsNormal(Num ↦ Base) ∣ Num ↦ Base}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="2" org.eventb.core.label="BaseNDecrementInternal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="L" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scOperatorArgument name="B" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="L">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(pNat)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(pNat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(LH,LT)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(LH=(one ⦂ pNat)∧LT=(nil ⦂ List(pNat)),nil ⦂ List(pNat),COND(LH=(zero ⦂ pNat),COND(LT=cons(suc(zero ⦂ pNat),nil ⦂ List(pNat)),cons(pDecrement(B),nil ⦂ List(pNat)),cons(pDecrement(B),BaseNDecrementInternal(LT,B))),cons(pDecrement(LH),LT)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="3" org.eventb.core.label="BaseNDecrement" org.eventb.core.predicate="BNum∈(BaseNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(pNat)×pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="BNum" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="BaseNDecrementInternal(BNumList(BNum),BNumBase(BNum)) ↦ BNumBase(BNum)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="4" org.eventb.core.label="BNumLSDInternal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="L" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="L">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(pNat)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ pNat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(LH,LT)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="LH"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="5" org.eventb.core.label="BNumLSD" org.eventb.core.predicate="BNum∈(BaseNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat×pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="BNum" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="BNumLSDInternal(BNumList(BNum)) ↦ BNumBase(BNum)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="6" org.eventb.core.label="BNumShiftLeftInternal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="L" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="L">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(pNat)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(pNat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(LH,LT)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="LT"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="7" org.eventb.core.label="BNumShiftLeft" org.eventb.core.predicate="BNum∈(BaseNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#A" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(pNat)×pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="BNum" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="BNumShiftLeftInternal(BNumList(BNum)) ↦ BNumBase(BNum)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="8" org.eventb.core.label="WGoodDecr" org.eventb.core.predicate="BNum∈(BaseNum ⦂ ℙ(List(pNat)×pNat))∧BaseNumIsNormal(BNum)" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(pNat)×pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="BNum" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="BaseNDecrementInternal(BNumList(BNum),suc(BNumBase(BNum))) ↦ suc(BNumBase(BNum))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scTheorem name="generatedBlocl" org.eventb.core.label="EndingWithZerosIsNotNormal" org.eventb.core.predicate="∀x⦂List(pNat)·x≠(nil ⦂ List(pNat))∧BaseNIsZeroInternal(x)⇒(∀B⦂pNat·¬BaseNumIsNormal(x ↦ B))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#8" org.eventb.theory.core.order="0"/>
<org.eventb.theory.core.scTheorem name="generatedBlocm" org.eventb.core.label="BNDecrementMaintainsNormalityCororally" org.eventb.core.predicate="∀L⦂List(pNat)·∀B⦂pNat·L ↦ B∈(BaseNumNorm ⦂ ℙ(List(pNat)×pNat))⇒BaseNDecrement(L ↦ B)∈(BaseNumNorm ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#:" org.eventb.theory.core.order="1"/>
<org.eventb.theory.core.scTheorem name="generatedBlocn" org.eventb.core.label="BNDecrementMaintainsNormality" org.eventb.core.predicate="∀num⦂List(pNat)×pNat·num∈(BaseNumNorm ⦂ ℙ(List(pNat)×pNat))⇒BaseNDecrement(num)∈(BaseNumNorm ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#9" org.eventb.theory.core.order="2"/>
<org.eventb.theory.core.scTheorem name="generatedBloco" org.eventb.core.label="Shift left maintains normality" org.eventb.core.predicate="∀x⦂List(pNat)×pNat·x∈(BaseNumNorm ⦂ ℙ(List(pNat)×pNat))⇒BNumShiftLeft(x)∈(BaseNumNorm ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#B" org.eventb.theory.core.order="3"/>
<org.eventb.theory.core.scTheorem name="generatedBlocp" org.eventb.core.label="WGoodDecr Maintains Normality Cororally" org.eventb.core.predicate="∀x⦂List(pNat)×pNat·x∈(BaseNumNorm ⦂ ℙ(List(pNat)×pNat))⇒BNumList(x) ↦ suc(BNumBase(x))∈(BaseNumNorm ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#=" org.eventb.theory.core.order="4"/>
<org.eventb.theory.core.scTheorem name="generatedBlocq" org.eventb.core.label="WGoodDecr Maintains Normality" org.eventb.core.predicate="∀x⦂List(pNat)×pNat·x∈(BaseNumNorm ⦂ ℙ(List(pNat)×pNat))⇒WGoodDecr(x)∈(BaseNumNorm ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.theorem#;" org.eventb.theory.core.order="5"/>
<org.eventb.theory.core.scProofRulesBlock name="generatedBlock" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#1">
<org.eventb.theory.core.scMetavariable name="BNum" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scMetavariable name="L" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scMetavariable name="LH" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scMetavariable name="LT" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scMetavariable name="B" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scMetavariable name="L_head" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scMetavariable name="L_tail" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scMetavariable name="Num" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#." org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNum" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNum" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNum expansion" org.eventb.theory.core.formula="BaseNum ⦂ ℙ(List(pNat)×pNat)">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNum rhs" org.eventb.core.label="BaseNum rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.formula="List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumList" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumList" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumList expansion" org.eventb.theory.core.formula="BNumList(BNum)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumList rhs" org.eventb.core.label="BNumList rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(BNum)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumBase" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumBase" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumBase expansion" org.eventb.theory.core.formula="BNumBase(BNum)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumBase rhs" org.eventb.core.label="BNumBase rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(BNum)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNIsZeroInternal case 0" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNIsZeroInternal case 0" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNIsZeroInternal expansion" org.eventb.theory.core.formula="BaseNIsZeroInternal(nil ⦂ List(pNat))">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNIsZeroInternal rhs" org.eventb.core.label="BaseNIsZeroInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNIsZeroInternal case 1" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNIsZeroInternal case 1" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNIsZeroInternal expansion" org.eventb.theory.core.formula="BaseNIsZeroInternal(cons(LH,LT))">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNIsZeroInternal rhs" org.eventb.core.label="BaseNIsZeroInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.formula="LH=(zero ⦂ pNat)∧BaseNIsZeroInternal(LT)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNIsZero" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNIsZero" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNIsZero expansion" org.eventb.theory.core.formula="BaseNIsZero(BNum)">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNIsZero rhs" org.eventb.core.label="BaseNIsZero rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.formula="BaseNIsZeroInternal(BNumList(BNum))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNIsNormalInternal case 0" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNIsNormalInternal case 0" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNIsNormalInternal expansion" org.eventb.theory.core.formula="BaseNIsNormalInternal(nil ⦂ List(pNat),B)">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNIsNormalInternal rhs" org.eventb.core.label="BaseNIsNormalInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNIsNormalInternal case 1" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNIsNormalInternal case 1" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNIsNormalInternal expansion" org.eventb.theory.core.formula="BaseNIsNormalInternal(cons(LH,LT),B)">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNIsNormalInternal rhs" org.eventb.core.label="BaseNIsNormalInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.formula="(LT=(nil ⦂ List(pNat))∧LH≠(zero ⦂ pNat))∨(LT≠(nil ⦂ List(pNat))∧BaseNIsNormalInternal(LT,B))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNumIsWD case 0" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNumIsWD case 0" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNumIsWD expansion" org.eventb.theory.core.formula="BaseNumIsWD(nil ⦂ List(pNat),B)">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNumIsWD rhs" org.eventb.core.label="BaseNumIsWD rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.formula="⊤∧(two ⦂ pNat) pLeq B"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNumIsWD case 1" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNumIsWD case 1" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNumIsWD expansion" org.eventb.theory.core.formula="BaseNumIsWD(cons(L_head,L_tail),B)">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNumIsWD rhs" org.eventb.core.label="BaseNumIsWD rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.formula="(two ⦂ pNat) pLeq B∧L_head pLeq pDecrement(B)∧BaseNumIsWD(L_tail,B)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNumIsNormal" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNumIsNormal" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNumIsNormal expansion" org.eventb.theory.core.formula="BaseNumIsNormal(Num)">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNumIsNormal rhs" org.eventb.core.label="BaseNumIsNormal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.formula="BaseNumIsWD((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(Num),(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(Num))∧BaseNIsNormalInternal((prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))(Num),(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))(Num))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNumNorm" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNumNorm" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNumNorm expansion" org.eventb.theory.core.formula="BaseNumNorm ⦂ ℙ(List(pNat)×pNat)">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNumNorm rhs" org.eventb.core.label="BaseNumNorm rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.formula="{Num⦂List(pNat),Base⦂pNat·Num∈List(pNat ⦂ ℙ(pNat))∧Base∈(pNat ⦂ ℙ(pNat))∧BaseNumIsNormal(Num ↦ Base) ∣ Num ↦ Base}"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNDecrementInternal case 0" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNDecrementInternal case 0" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNDecrementInternal expansion" org.eventb.theory.core.formula="BaseNDecrementInternal(nil ⦂ List(pNat),B)">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNDecrementInternal rhs" org.eventb.core.label="BaseNDecrementInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.formula="nil ⦂ List(pNat)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNDecrementInternal case 1" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNDecrementInternal case 1" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNDecrementInternal expansion" org.eventb.theory.core.formula="BaseNDecrementInternal(cons(LH,LT),B)">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNDecrementInternal rhs" org.eventb.core.label="BaseNDecrementInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.formula="COND(LH=(one ⦂ pNat)∧LT=(nil ⦂ List(pNat)),nil ⦂ List(pNat),COND(LH=(zero ⦂ pNat),COND(LT=cons(suc(zero ⦂ pNat),nil ⦂ List(pNat)),cons(pDecrement(B),nil ⦂ List(pNat)),cons(pDecrement(B),BaseNDecrementInternal(LT,B))),cons(pDecrement(LH),LT)))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BaseNDecrement" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BaseNDecrement" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNDecrement expansion" org.eventb.theory.core.formula="BaseNDecrement(BNum)">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNDecrement rhs" org.eventb.core.label="BaseNDecrement rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.formula="BaseNDecrementInternal(BNumList(BNum),BNumBase(BNum)) ↦ BNumBase(BNum)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumLSDInternal case 0" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumLSDInternal case 0" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumLSDInternal expansion" org.eventb.theory.core.formula="BNumLSDInternal(nil ⦂ List(pNat))">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumLSDInternal rhs" org.eventb.core.label="BNumLSDInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;" org.eventb.theory.core.formula="zero ⦂ pNat"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumLSDInternal case 1" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumLSDInternal case 1" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumLSDInternal expansion" org.eventb.theory.core.formula="BNumLSDInternal(cons(LH,LT))">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumLSDInternal rhs" org.eventb.core.label="BNumLSDInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#&gt;" org.eventb.theory.core.formula="LH"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumLSD" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumLSD" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#?" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumLSD expansion" org.eventb.theory.core.formula="BNumLSD(BNum)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumLSD rhs" org.eventb.core.label="BNumLSD rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#?" org.eventb.theory.core.formula="BNumLSDInternal(BNumList(BNum)) ↦ BNumBase(BNum)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumShiftLeftInternal case 0" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumShiftLeftInternal case 0" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumShiftLeftInternal expansion" org.eventb.theory.core.formula="BNumShiftLeftInternal(nil ⦂ List(pNat))">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumShiftLeftInternal rhs" org.eventb.core.label="BNumShiftLeftInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@" org.eventb.theory.core.formula="nil ⦂ List(pNat)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumShiftLeftInternal case 1" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumShiftLeftInternal case 1" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumShiftLeftInternal expansion" org.eventb.theory.core.formula="BNumShiftLeftInternal(cons(LH,LT))">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumShiftLeftInternal rhs" org.eventb.core.label="BNumShiftLeftInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#@" org.eventb.theory.core.formula="LT"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.BNumShiftLeft" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.BNumShiftLeft" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#A" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumShiftLeft expansion" org.eventb.theory.core.formula="BNumShiftLeft(BNum)">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumShiftLeft rhs" org.eventb.core.label="BNumShiftLeft rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#A" org.eventb.theory.core.formula="BNumShiftLeftInternal(BNumList(BNum)) ↦ BNumBase(BNum)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNNum.WGoodDecr" org.eventb.core.accurate="true" org.eventb.core.label="BaseNNum.WGoodDecr" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="WGoodDecr expansion" org.eventb.theory.core.formula="WGoodDecr(BNum)">
<org.eventb.theory.core.scRewriteRuleRHS name="WGoodDecr rhs" org.eventb.core.label="WGoodDecr rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNNum.tuf|org.eventb.theory.core.theoryRoot#BaseNNum|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.formula="BaseNDecrementInternal(BNumList(BNum),suc(BNumBase(BNum))) ↦ suc(BNumBase(BNum))"/>
</org.eventb.theory.core.scRewriteRule>
</org.eventb.theory.core.scProofRulesBlock>
</org.eventb.theory.core.deployedTheoryRoot>
