<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.deployedTheoryRoot org.eventb.core.accurate="true" org.eventb.core.comment="GENERATED THEORY FILE: !DO NOT CHANGE!" org.eventb.theory.core.modificationHashValue="0ed88a9d033d71732390c386c74da367" org.eventb.theory.core.outdated="false">
<org.eventb.theory.core.useTheory name="BaseNNum" org.eventb.core.scTarget="/BaseNNums/BaseNNum.dtf|org.eventb.theory.core.deployedTheoryRoot#BaseNNum"/>
<org.eventb.theory.core.scNewOperatorDefinition name="(" org.eventb.core.label="BaseNMinusInternal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="xL" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scOperatorArgument name="yL" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scOperatorArgument name="B" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="xL">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(pNat)" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(pNat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xH,xT)" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xH pLeq BNumLSDInternal(yL),COND(xT=(nil ⦂ List(pNat)),nil ⦂ List(pNat),COND(BaseNMinusInternal(xT,BNumShiftLeftInternal(yL),B)=(nil ⦂ List(pNat)),nil ⦂ List(pNat),COND(xH=BNumLSDInternal(yL),cons(zero ⦂ pNat,BaseNMinusInternal(xT,BNumShiftLeftInternal(yL),B)),COND(BaseNDecrementInternal(xT,B)=BNumShiftLeftInternal(yL),cons((xH pAdd B) pMinus BNumLSDInternal(yL),nil ⦂ List(pNat)),cons((xH pAdd B) pMinus BNumLSDInternal(yL),BaseNMinusInternal(BaseNDecrementInternal(xT,B),BNumShiftLeftInternal(yL),B)))))),cons(xH pMinus BNumLSDInternal(yL),BaseNMinusInternal(xT,BNumShiftLeftInternal(yL),B)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name=")" org.eventb.core.label="BNumMinus" org.eventb.core.predicate="x∈(BNum ⦂ ℙ(List(pNat)×pNat))∧y∈(BNum ⦂ ℙ(List(pNat)×pNat))" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(pNat)×pNat" org.eventb.theory.core.wd="x∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧y∈dom(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∧(prj1 ⦂ ℙ(List(pNat)×pNat×List(pNat)))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ List(pNat ⦂ ℙ(pNat))∧x∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))∧x∈dom(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∧(prj2 ⦂ ℙ(List(pNat)×pNat×pNat))∈List(pNat ⦂ ℙ(pNat)) × (pNat ⦂ ℙ(pNat)) ⇸ (pNat ⦂ ℙ(pNat))">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="BaseNMinusInternal(BNumList(x),BNumList(y),BNumBase(x)) ↦ BNumBase(x)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scTheorem name="generatedBlocl" org.eventb.core.label="Zero is the end" org.eventb.core.predicate="∀x⦂List(pNat)×pNat,B⦂pNat·x∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))⇒((nil ⦂ List(pNat)) ↦ B) BNumMinus x=(nil ⦂ List(pNat)) ↦ B" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.theorem#," org.eventb.theory.core.order="0"/>
<org.eventb.theory.core.scTheorem name="generatedBlocm" org.eventb.core.label="x - 0 = x not WD" org.eventb.core.predicate="∀x⦂List(pNat),B⦂pNat·BaseNIsNormalInternal(x)⇒BaseNMinusInternal(x,nil ⦂ List(pNat),B)=x" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.theorem#5" org.eventb.theory.core.order="1"/>
<org.eventb.theory.core.scTheorem name="generatedBlocn" org.eventb.core.label="x - 0 = x" org.eventb.core.predicate="∀x⦂List(pNat)×pNat,B⦂pNat·x∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))∧BNumBase(x)=B⇒x BNumMinus ((nil ⦂ List(pNat)) ↦ B)=x" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.theorem#-" org.eventb.theory.core.order="2"/>
<org.eventb.theory.core.scTheorem name="generatedBloco" org.eventb.core.label="x - x = nil" org.eventb.core.predicate="∀x⦂List(pNat)×pNat,y⦂List(pNat)×pNat·x∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))∧y∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))∧BNumList(x)=BNumList(y)⇒x BNumMinus y=(nil ⦂ List(pNat)) ↦ BNumBase(x)" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.theorem#6" org.eventb.theory.core.order="3"/>
<org.eventb.theory.core.scTheorem name="generatedBlocp" org.eventb.core.label="sub shift left doesn't give nil" org.eventb.core.predicate="∀x⦂List(pNat),B⦂pNat·BaseNIsNormalInternal(x)∧x≠(nil ⦂ List(pNat))⇒BaseNMinusInternal(x,BNumShiftLeftInternal(x),B)≠(nil ⦂ List(pNat))" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.theorem#1" org.eventb.theory.core.order="4"/>
<org.eventb.theory.core.scTheorem name="generatedBlocq" org.eventb.core.label="sub shift left doesn't give nil with Decr" org.eventb.core.predicate="∀x⦂List(pNat),B⦂pNat·BaseNIsNormalInternal(x)∧x≠(nil ⦂ List(pNat))⇒BaseNMinusInternal(x,BNumShiftLeftInternal(BaseNDecrementInternal(x,B)),B)≠(nil ⦂ List(pNat))" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.theorem#2" org.eventb.theory.core.order="5"/>
<org.eventb.theory.core.scTheorem name="generatedBlocr" org.eventb.core.label="x - decr x not nil" org.eventb.core.predicate="∀x⦂List(pNat),B⦂pNat·x≠(nil ⦂ List(pNat))∧BaseNIsNormalInternal(x)⇒BaseNMinusInternal(x,BaseNDecrementInternal(x,B),B)≠(nil ⦂ List(pNat))" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.theorem#3" org.eventb.theory.core.order="6"/>
<org.eventb.theory.core.scTheorem name="generatedBlocs" org.eventb.core.label="minus a smaller number not nil" org.eventb.core.predicate="∀y⦂List(pNat),B⦂pNat·∀x⦂List(pNat)·BaseNIsNormalInternal(x)∧BaseNIsNormalInternal(y)∧BaseNMinusInternal(x,y,B)≠(nil ⦂ List(pNat))⇒BaseNMinusInternal(x,BNumShiftLeftInternal(y),B)≠(nil ⦂ List(pNat))" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.theorem#4" org.eventb.theory.core.order="7"/>
<org.eventb.theory.core.scTheorem name="generatedBloct" org.eventb.core.label="Longer Nums cororally 2" org.eventb.core.predicate="∀x⦂List(pNat),B⦂pNat·x ↦ B∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))⇒(∀y⦂List(pNat),yH⦂pNat,yB⦂pNat·y ↦ yB∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))∧BaseNMinusInternal(x,y,B)=(nil ⦂ List(pNat))⇒BaseNMinusInternal(x,cons(yH,y),B)=(nil ⦂ List(pNat)))" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.theorem#\/" org.eventb.theory.core.order="8"/>
<org.eventb.theory.core.scTheorem name="generatedBlocu" org.eventb.core.label="subtracting from small num nil" org.eventb.core.predicate="∀x⦂List(pNat),B⦂pNat·x ↦ B∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))⇒(∀y⦂List(pNat),xH⦂pNat·x ↦ B∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))∧y ↦ B∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))∧BaseNMinusInternal(cons(xH,x),y,B)=(nil ⦂ List(pNat))⇒BaseNMinusInternal(x,y,B)=(nil ⦂ List(pNat)))" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.theorem#0" org.eventb.theory.core.order="9"/>
<org.eventb.theory.core.scTheorem name="generatedBlocv" org.eventb.core.label="Longer Nums cororally" org.eventb.core.predicate="∀x⦂List(pNat),B⦂pNat·x ↦ B∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))⇒(∀y⦂List(pNat),yH⦂pNat·x ↦ B∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))∧y ↦ B∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))∧BaseNMinusInternal(x,y,B)=(nil ⦂ List(pNat))⇒BaseNMinusInternal(x,cons(yH,y),B)=(nil ⦂ List(pNat)))" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.theorem#." org.eventb.theory.core.order="10"/>
<org.eventb.theory.core.scTheorem name="generatedBlocw" org.eventb.core.label="Longer numbers are bigger" org.eventb.core.predicate="∀x⦂List(pNat)×pNat,y⦂List(pNat)×pNat·x∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))∧y∈(BNumNorm ⦂ ℙ(List(pNat)×pNat))∧length(BNumList(x)) pLt length(BNumList(y))⇒x BNumMinus y=(nil ⦂ List(pNat)) ↦ BNumBase(x)" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.theorem#*" org.eventb.theory.core.order="11"/>
<org.eventb.theory.core.scProofRulesBlock name="generatedBlock" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(">
<org.eventb.theory.core.scMetavariable name="xL" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scMetavariable name="yL" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scMetavariable name="B" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scMetavariable name="xH" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scMetavariable name="xT" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.core.type="List(pNat)"/>
<org.eventb.theory.core.scMetavariable name="x" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scMetavariable name="y" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.core.type="List(pNat)×pNat"/>
<org.eventb.theory.core.scRewriteRule name="BaseNMinus.BaseNMinusInternal case 0" org.eventb.core.accurate="true" org.eventb.core.label="BaseNMinus.BaseNMinusInternal case 0" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNMinusInternal expansion" org.eventb.theory.core.formula="BaseNMinusInternal(nil ⦂ List(pNat),yL,B)">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNMinusInternal rhs" org.eventb.core.label="BaseNMinusInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.formula="nil ⦂ List(pNat)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNMinus.BaseNMinusInternal case 1" org.eventb.core.accurate="true" org.eventb.core.label="BaseNMinus.BaseNMinusInternal case 1" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BaseNMinusInternal expansion" org.eventb.theory.core.formula="BaseNMinusInternal(cons(xH,xT),yL,B)">
<org.eventb.theory.core.scRewriteRuleRHS name="BaseNMinusInternal rhs" org.eventb.core.label="BaseNMinusInternal rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.formula="COND(xH pLeq BNumLSDInternal(yL),COND(xT=(nil ⦂ List(pNat)),nil ⦂ List(pNat),COND(BaseNMinusInternal(xT,BNumShiftLeftInternal(yL),B)=(nil ⦂ List(pNat)),nil ⦂ List(pNat),COND(xH=BNumLSDInternal(yL),cons(zero ⦂ pNat,BaseNMinusInternal(xT,BNumShiftLeftInternal(yL),B)),COND(BaseNDecrementInternal(xT,B)=BNumShiftLeftInternal(yL),cons((xH pAdd B) pMinus BNumLSDInternal(yL),nil ⦂ List(pNat)),cons((xH pAdd B) pMinus BNumLSDInternal(yL),BaseNMinusInternal(BaseNDecrementInternal(xT,B),BNumShiftLeftInternal(yL),B)))))),cons(xH pMinus BNumLSDInternal(yL),BaseNMinusInternal(xT,BNumShiftLeftInternal(yL),B)))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BaseNMinus.BNumMinus" org.eventb.core.accurate="true" org.eventb.core.label="BaseNMinus.BNumMinus" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="BNumMinus expansion" org.eventb.theory.core.formula="x BNumMinus y">
<org.eventb.theory.core.scRewriteRuleRHS name="BNumMinus rhs" org.eventb.core.label="BNumMinus rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BaseNNums/BaseNMinus.tuf|org.eventb.theory.core.theoryRoot#BaseNMinus|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.formula="BaseNMinusInternal(BNumList(x),BNumList(y),BNumBase(x)) ↦ BNumBase(x)"/>
</org.eventb.theory.core.scRewriteRule>
</org.eventb.theory.core.scProofRulesBlock>
</org.eventb.theory.core.deployedTheoryRoot>
