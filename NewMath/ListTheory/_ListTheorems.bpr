<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.prFile version="1">
<org.eventb.core.prProof name="diff_length_implies_not_equal/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="x,y" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="T">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="pNat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="pNat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ pNat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ pNat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Reflexivity" org.eventb.core.label="Reflexivity" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T·x∈t⇒op(x ↦ x)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Symmetry" org.eventb.core.label="Symmetry" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AntiSymmetry" org.eventb.core.label="AntiSymmetry" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)))))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒(op(x ↦ y)=TRUE∧op(y ↦ x)=TRUE⇔x=y)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Transitivity" org.eventb.core.label="Transitivity" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧op(x ↦ y)=TRUE∧op(y ↦ z)=TRUE⇒op(x ↦ z)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Totality" org.eventb.core.label="Totality" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒op(x ↦ y)=TRUE∨op(y ↦ x)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="leq" org.eventb.core.label="leq" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀order⦂ℙ(T×T×BOOL)·(order∈t × t → BOOL∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))))))∧order∈AntiSymmetry(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧order∈Transitivity(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))∧order∈Totality(t))∨¬order∈t × t → BOOL∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))))))∧¬order∈AntiSymmetry(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧¬order∈Transitivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))∧¬order∈Totality(t))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{order⦂ℙ(T×T×BOOL)·order∈t × t → BOOL∧order∈AntiSymmetry(t)∧order∈Transitivity(t)∧order∈Totality(t) ∣ order}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="EquivRel" org.eventb.core.label="EquivRel" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/EquivRel.tuf|org.eventb.theory.core.theoryRoot#EquivRel|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧op∈Transitivity(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x)))∧op∈Symmetry(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE))∧op∈Reflexivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧¬op∈Transitivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x)))∧¬op∈Symmetry(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE))∧¬op∈Reflexivity(t))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/EquivRel.tuf|org.eventb.theory.core.theoryRoot#EquivRel|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/EquivRel.tuf|org.eventb.theory.core.theoryRoot#EquivRel|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈Transitivity(t)∧op∈Symmetry(t)∧op∈Reflexivity(t) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Setoid" org.eventb.core.label="Setoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Setoid/Setoid.tuf|org.eventb.theory.core.theoryRoot#Setoid|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T)×ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀t⦂ℙ(T),op⦂ℙ(T×T×BOOL)·(t∈ℙ(T)∧(∀op⦂ℙ(T×T×BOOL)·((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧op∈Transitivity(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x)))∧op∈Symmetry(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE))∧op∈Reflexivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧¬op∈Transitivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))⇒(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL))))))∧(∀op⦂ℙ(T×T×BOOL)·((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧op∈Transitivity(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x)))∧op∈Symmetry(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE))∧op∈Reflexivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧¬op∈Transitivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x)))∧¬op∈Symmetry(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE))∧¬op∈Reflexivity(t)))∧op∈EquivRel(t))∨¬t∈ℙ(T)∨((∀op⦂ℙ(T×T×BOOL)·((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧op∈Transitivity(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x)))∧op∈Symmetry(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE))∧op∈Reflexivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧¬op∈Transitivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))⇒(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL))))))∧(∀op⦂ℙ(T×T×BOOL)·((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧op∈Transitivity(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x)))∧op∈Symmetry(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE))∧op∈Reflexivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧¬op∈Transitivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x)))∧¬op∈Symmetry(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE))∧¬op∈Reflexivity(t)))∧¬op∈EquivRel(t))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Setoid/Setoid.tuf|org.eventb.theory.core.theoryRoot#Setoid|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{t⦂ℙ(T),op⦂ℙ(T×T×BOOL)·t∈ℙ(T)∧op∈EquivRel(t) ∣ t ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t⇒op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → t∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈t × t → t∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(t)∧op∈CommOp(t))∨¬op∈AssocOp(t)∨¬op∈CommOp(t)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(t)∧op∈CommOp(t) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈t∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t⇒(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T)))))∧((op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∨¬op∈t × t → t∨(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T)))))∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(t)∧(∀x⦂T·¬x∈t∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈t∨((∀op⦂ℙ(T×T×T)·(op∈t × t → t⇒(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T)))))∧((op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∨¬op∈t × t → t∨(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T)))))∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(t))∨(∃x⦂T·x∈t∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈t∧op∈AssocOp(t)∧(∀x⦂T·x∈t⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mk_monoid" org.eventb.core.label="mk_monoid" org.eventb.core.predicate="ident∈type∧op∈AssocOp(type)" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="type" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="+" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#+" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="get_ident" org.eventb.core.label="get_ident" org.eventb.core.predicate="m∈Monoid(ℙ(T))" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))∧(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))∈ℙ(T) × ℙ(ℙ(T) × ℙ(T) × ℙ(T)) ⇸ ℙ(T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="get_op" org.eventb.core.label="get_op" org.eventb.core.predicate="m∈Monoid(ℙ(T))" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T)×ℙ(T)×ℙ(T))" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))∧(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))∈ℙ(T) × ℙ(ℙ(T) × ℙ(T) × ℙ(T)) ⇸ ℙ(ℙ(T) × ℙ(T) × ℙ(T))">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_Internal" org.eventb.core.label="pAdd_Internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs pAdd_Internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_Internal_P" org.eventb.core.label="pAdd_Internal_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pAdd_Internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd" org.eventb.core.label="pAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs pAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_P" org.eventb.core.label="pAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Power" org.eventb.core.label="Power" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="/" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(x ↦ Power(ident,op,x,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="PowerSubset" org.eventb.core.label="PowerSubset" org.eventb.core.predicate="ident∈t∧op∈AssocOp(t)∧(x∈t∧ident ↦ op∈Monoid(t))" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="," org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#," org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#,|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#,|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(x ↦ PowerSubset(t,ident,op,x,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeq" org.eventb.core.label="pLeq" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(∃z⦂pNat·x pAdd z=y)∨(∀z⦂pNat·¬x pAdd z=y)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="∃z⦂pNat·x pAdd z=y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeqB" org.eventb.core.label="pLeqB" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="bool(x pLeq y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeqB_P" org.eventb.core.label="pLeqB_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pLeqB y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pNatMult" org.eventb.core.label="pNatMult" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Power(zero ⦂ pNat,pAdd_P ⦂ ℙ(pNat×pNat×pNat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pNatMult_P" org.eventb.core.label="pNatMult_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ pNatMult(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pTimes" org.eventb.core.label="pTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Power(zero ⦂ pNat,pAdd_P ⦂ ℙ(pNat×pNat×pNat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pTimes_P" org.eventb.core.label="pTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ pNat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(length(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="appendList" org.eventb.core.label="appendList" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,appendList(xs,y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ML" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p5">
<org.eventb.core.prString name=".arg" org.eventb.core.prSValue="0;1:500"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀x⦂List(T),y⦂List(T)·x∈List(T)⇒(¬length(x)=length(y)⇒¬x=y)"/>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(T),y⦂List(T)·x∈List(T)⇒(length(x)≠length(y)⇒x≠y)"/>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="∀x⦂List(T),y⦂List(T)·¬length(x)=length(y)⇒¬x=y"/>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="¬length(x)=length(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀x⦂List(T),y⦂List(T)·⊤⇒(¬length(x)=length(y)⇒¬x=y)"/>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="¬x=y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="¬length(x)=length(y)⇒¬x=y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="com.clearsy.atelierb.provers.core.externalML:1"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="x_not_eqaul_cons(cons(a, cons(b, x))/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="a,b,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="T" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="AntiSymmetry" org.eventb.core.label="AntiSymmetry" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)))))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒(op(x ↦ y)=TRUE∧op(y ↦ x)=TRUE⇔x=y)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="pNat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="pNat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Reflexivity" org.eventb.core.label="Reflexivity" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T·x∈t⇒op(x ↦ x)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_P" org.eventb.core.label="pAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ pNat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(length(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pNatMult" org.eventb.core.label="pNatMult" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Power(zero ⦂ pNat,pAdd_P ⦂ ℙ(pNat×pNat×pNat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Transitivity" org.eventb.core.label="Transitivity" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧op(x ↦ y)=TRUE∧op(y ↦ z)=TRUE⇒op(x ↦ z)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd" org.eventb.core.label="pAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs pAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pNatMult_P" org.eventb.core.label="pNatMult_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ pNatMult(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="get_op" org.eventb.core.label="get_op" org.eventb.core.predicate="m∈Monoid(ℙ(T))" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T)×ℙ(T)×ℙ(T))" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))∧(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))∈ℙ(T) × ℙ(ℙ(T) × ℙ(T) × ℙ(T)) ⇸ ℙ(ℙ(T) × ℙ(T) × ℙ(T))">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Power" org.eventb.core.label="Power" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="/" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(x ↦ Power(ident,op,x,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mk_monoid" org.eventb.core.label="mk_monoid" org.eventb.core.predicate="ident∈type∧op∈AssocOp(type)" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="type" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="+" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#+" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeqB_P" org.eventb.core.label="pLeqB_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pLeqB y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Totality" org.eventb.core.label="Totality" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒op(x ↦ y)=TRUE∨op(y ↦ x)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeqB" org.eventb.core.label="pLeqB" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="bool(x pLeq y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="appendList" org.eventb.core.label="appendList" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,appendList(xs,y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈t∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T)))))∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∧op∈AssocOp(t)∧(∀x⦂T·¬x∈t∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈t∨((∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T)))))∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∧¬op∈AssocOp(t))∨(∃x⦂T·x∈t∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈t∧op∈AssocOp(t)∧(∀x⦂T·x∈t⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="PowerSubset" org.eventb.core.label="PowerSubset" org.eventb.core.predicate="ident∈t∧op∈AssocOp(t)∧(x∈t∧ident ↦ op∈Monoid(t))" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="," org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#," org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#,|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#,|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(x ↦ PowerSubset(t,ident,op,x,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ pNat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈t × t → t∨(∃x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x)))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈t × t → t∧(∀x⦂T,y⦂T·x∈t∧y∈t∧op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="get_ident" org.eventb.core.label="get_ident" org.eventb.core.predicate="m∈Monoid(ℙ(T))" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))∧(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))∈ℙ(T) × ℙ(ℙ(T) × ℙ(T) × ℙ(T)) ⇸ ℙ(T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pTimes_P" org.eventb.core.label="pTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_Internal_P" org.eventb.core.label="pAdd_Internal_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pAdd_Internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pTimes" org.eventb.core.label="pTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Power(zero ⦂ pNat,pAdd_P ⦂ ℙ(pNat×pNat×pNat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ pNat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_Internal" org.eventb.core.label="pAdd_Internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs pAdd_Internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeq" org.eventb.core.label="pLeq" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(∃z⦂pNat·x pAdd z=y)∨(∀z⦂pNat·¬x pAdd z=y)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="∃z⦂pNat·x pAdd z=y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="leq" org.eventb.core.label="leq" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀order⦂ℙ(T×T×BOOL)·(order∈t × t → BOOL∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))))))∧order∈AntiSymmetry(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧order∈Transitivity(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))∧order∈Totality(t))∨¬order∈t × t → BOOL∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))))))∧¬order∈AntiSymmetry(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧¬order∈Transitivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))∧¬order∈Totality(t))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{order⦂ℙ(T×T×BOOL)·order∈t × t → BOOL∧order∈AntiSymmetry(t)∧order∈Transitivity(t)∧order∈Totality(t) ∣ order}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Symmetry" org.eventb.core.label="Symmetry" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,a,b)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="a" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="T"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p5" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p6" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p7"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p7" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="mp impl (¬length([[1]])=length([[0]])⇒¬[[1]]=[[0]])" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p8" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p9"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p9" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p10"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ct goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst x,cons(a,cons(b,x)))" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p14" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p15" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p16"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="length expansion on length(x)=length(cons(a,cons(b,x)))" org.eventb.core.prHyps="p16">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p17,p13">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="length expansion on length(x)=suc(length(cons(b,x)))" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p13,p18">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p18"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="suc(x) = x + 1 on length(x)=suc(suc(length(x)))" org.eventb.core.prHyps="p18">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p19,p13">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p18"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p19"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="suc(x) = x + 1 on length(x)=suc(length(x)) pAdd one" org.eventb.core.prHyps="p19">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p20,p13">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p19"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p20"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p20" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p21"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Bracket right on length(x)=length(x) pAdd one pAdd one" org.eventb.core.prHyps="p21">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p13,p22">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p21"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p22"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Describe Me! on length(x)=length(x) pAdd (one pAdd one)" org.eventb.core.prHyps="p22">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p23,p13">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p22"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p23"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on one pAdd one=zero" org.eventb.core.prHyps="p23">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p24,p13">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p23"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on suc(zero) pAdd one=zero" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p25,p13">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p25"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="pAdd expansion on suc(zero) pAdd suc(zero)=zero" org.eventb.core.prHyps="p25">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p26,p13">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p25"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p26"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p12"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="PeanoNaturals"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="pNat_Addition"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="pNat_Addition.pAdd case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="PeanoNaturals"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="pNat_T"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="pNat_T.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="PeanoNaturals"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="pNat_T"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="pNat_T.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="PeanoNaturals"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="pNat_Addition"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="CancelToZero2"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="PeanoNaturals"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="pNat_Addition"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="bracket right"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="PeanoNaturals"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="pNat_Addition"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="suc(x) = x + 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="PeanoNaturals"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="pNat_Addition"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="suc(x) = x + 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="ListTheory"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="_AuxiliaryDefinitions"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="_AuxiliaryDefinitions.length case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="ListTheory"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="_AuxiliaryDefinitions"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="_AuxiliaryDefinitions.length case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x∈List(T)⇒(length(x)≠length(y)⇒x≠y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="∀x⦂List(T),y⦂List(T)·⊤⇒(¬length(x)=length(y)⇒¬x=y)"/>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="x∈List(T)⇒x≠cons(a,cons(b,x))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x∈List(T)⇒¬x=cons(a,cons(b,x))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="length(x)=length(x) pAdd (one ⦂ pNat) pAdd (one ⦂ pNat)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="∀x⦂List(T),y⦂List(T)·x∈List(T)⇒(¬length(x)=length(y)⇒¬x=y)"/>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="¬x=cons(a,cons(b,x))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="suc(zero ⦂ pNat) pAdd suc(zero ⦂ pNat)=(zero ⦂ pNat)"/>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="length(x)=suc(length(cons(b,x)))">
<org.eventb.core.prIdent name="b" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="length(x)=suc(suc(length(x)))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="⊤⇒¬x=cons(a,cons(b,x))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="x=cons(a,cons(b,x))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="∀x⦂List(T),y⦂List(T)·¬¬x=y⇒¬¬length(x)=length(y)"/>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="⊤⇒length(x)=length(cons(a,cons(b,x)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="∀x⦂List(T),y⦂List(T)·x=y⇒length(x)=length(y)"/>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="length(x)=(length(x) pAdd (one ⦂ pNat)) pAdd (one ⦂ pNat)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="length(x)=length(cons(a,cons(b,x)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="∀x⦂List(T),y⦂List(T)·x∈List(T)⇒(length(x)≠length(y)⇒x≠y)"/>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="length(x)=length(x) pAdd ((one ⦂ pNat) pAdd (one ⦂ pNat))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="x=cons(a,cons(b,x))⇒length(x)=length(cons(a,cons(b,x)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(T),a⦂T,b⦂T·x∈List(T)⇒x≠cons(a,cons(b,x))"/>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="suc((zero ⦂ pNat) pAdd suc(zero ⦂ pNat))=(zero ⦂ pNat)"/>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="(one ⦂ pNat) pAdd (one ⦂ pNat)=(zero ⦂ pNat)"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="∀x⦂List(T),y⦂List(T)·¬length(x)=length(y)⇒¬x=y"/>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="suc(zero ⦂ pNat) pAdd (one ⦂ pNat)=(zero ⦂ pNat)"/>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="length(x)=suc(length(x)) pAdd (one ⦂ pNat)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="cons(a,cons(b,x))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.contrL1"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.doubleImplGoalRewrites"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL3"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="append nil equality/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="T" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="pNat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="pNat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ pNat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ pNat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Reflexivity" org.eventb.core.label="Reflexivity" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T·x∈t⇒op(x ↦ x)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Symmetry" org.eventb.core.label="Symmetry" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AntiSymmetry" org.eventb.core.label="AntiSymmetry" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)))))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒(op(x ↦ y)=TRUE∧op(y ↦ x)=TRUE⇔x=y)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Transitivity" org.eventb.core.label="Transitivity" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧op(x ↦ y)=TRUE∧op(y ↦ z)=TRUE⇒op(x ↦ z)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Totality" org.eventb.core.label="Totality" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒op(x ↦ y)=TRUE∨op(y ↦ x)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="leq" org.eventb.core.label="leq" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀order⦂ℙ(T×T×BOOL)·(order∈t × t → BOOL∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))))))∧order∈AntiSymmetry(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧order∈Transitivity(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))∧order∈Totality(t))∨¬order∈t × t → BOOL∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))))))∧¬order∈AntiSymmetry(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧¬order∈Transitivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))∧¬order∈Totality(t))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{order⦂ℙ(T×T×BOOL)·order∈t × t → BOOL∧order∈AntiSymmetry(t)∧order∈Transitivity(t)∧order∈Totality(t) ∣ order}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈t × t → t∨(∃x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x)))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈t × t → t∧(∀x⦂T,y⦂T·x∈t∧y∈t∧op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈t∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T)))))∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∧op∈AssocOp(t)∧(∀x⦂T·¬x∈t∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈t∨((∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T)))))∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∧¬op∈AssocOp(t))∨(∃x⦂T·x∈t∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈t∧op∈AssocOp(t)∧(∀x⦂T·x∈t⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mk_monoid" org.eventb.core.label="mk_monoid" org.eventb.core.predicate="ident∈type∧op∈AssocOp(type)" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="type" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="+" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#+" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="get_ident" org.eventb.core.label="get_ident" org.eventb.core.predicate="m∈Monoid(ℙ(T))" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))∧(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))∈ℙ(T) × ℙ(ℙ(T) × ℙ(T) × ℙ(T)) ⇸ ℙ(T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="get_op" org.eventb.core.label="get_op" org.eventb.core.predicate="m∈Monoid(ℙ(T))" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T)×ℙ(T)×ℙ(T))" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))∧(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))∈ℙ(T) × ℙ(ℙ(T) × ℙ(T) × ℙ(T)) ⇸ ℙ(ℙ(T) × ℙ(T) × ℙ(T))">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_Internal" org.eventb.core.label="pAdd_Internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs pAdd_Internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_Internal_P" org.eventb.core.label="pAdd_Internal_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pAdd_Internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd" org.eventb.core.label="pAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs pAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_P" org.eventb.core.label="pAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Power" org.eventb.core.label="Power" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="/" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(x ↦ Power(ident,op,x,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="PowerSubset" org.eventb.core.label="PowerSubset" org.eventb.core.predicate="ident∈t∧op∈AssocOp(t)∧(x∈t∧ident ↦ op∈Monoid(t))" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="," org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#," org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#,|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#,|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(x ↦ PowerSubset(t,ident,op,x,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pNatMult" org.eventb.core.label="pNatMult" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Power(zero ⦂ pNat,pAdd_P ⦂ ℙ(pNat×pNat×pNat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pNatMult_P" org.eventb.core.label="pNatMult_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ pNatMult(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pTimes" org.eventb.core.label="pTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Power(zero ⦂ pNat,pAdd_P ⦂ ℙ(pNat×pNat×pNat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pTimes_P" org.eventb.core.label="pTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeq" org.eventb.core.label="pLeq" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(∃z⦂pNat·x pAdd z=y)∨(∀z⦂pNat·¬x pAdd z=y)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="∃z⦂pNat·x pAdd z=y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeqB" org.eventb.core.label="pLeqB" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="bool(x pLeq y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeqB_P" org.eventb.core.label="pLeqB_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pLeqB y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ pNat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(length(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="appendList" org.eventb.core.label="appendList" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,appendList(xs,y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="appendList expansion on goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p6">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="ListTheory"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="_AuxiliaryDefinitions"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="_AuxiliaryDefinitions.appendList case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p8,p9">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p8">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="appendList expansion on goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p6">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p9"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="ListTheory"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="_AuxiliaryDefinitions"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="_AuxiliaryDefinitions.appendList case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="cons(p_head,appendList(p_tail,nil ⦂ List(T)))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="(nil ⦂ List(T))=(nil ⦂ List(T))"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="appendList(p_tail,nil ⦂ List(T))=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(T)·x∈List(T)⇒appendList(x,nil ⦂ List(T))=x"/>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀x⦂List(T)·⊤⇒appendList(x,nil ⦂ List(T))=x"/>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="appendList(nil ⦂ List(T),nil ⦂ List(T))=(nil ⦂ List(T))"/>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="appendList(cons(p_head,p_tail),nil ⦂ List(T))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="appendList(x,nil ⦂ List(T))=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀x⦂List(T)·appendList(x,nil ⦂ List(T))=x"/>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="x=(nil ⦂ List(T))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="heads not eaqual/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="x,y" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="T">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="pNat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="pNat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ pNat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ pNat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Reflexivity" org.eventb.core.label="Reflexivity" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T·x∈t⇒op(x ↦ x)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Symmetry" org.eventb.core.label="Symmetry" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AntiSymmetry" org.eventb.core.label="AntiSymmetry" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)))))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒(op(x ↦ y)=TRUE∧op(y ↦ x)=TRUE⇔x=y)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Transitivity" org.eventb.core.label="Transitivity" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧op(x ↦ y)=TRUE∧op(y ↦ z)=TRUE⇒op(x ↦ z)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Totality" org.eventb.core.label="Totality" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒op(x ↦ y)=TRUE∨op(y ↦ x)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="leq" org.eventb.core.label="leq" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀order⦂ℙ(T×T×BOOL)·(order∈t × t → BOOL∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))))))∧order∈AntiSymmetry(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧order∈Transitivity(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))∧order∈Totality(t))∨¬order∈t × t → BOOL∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))))))∧¬order∈AntiSymmetry(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧¬order∈Transitivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))∧¬order∈Totality(t))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{order⦂ℙ(T×T×BOOL)·order∈t × t → BOOL∧order∈AntiSymmetry(t)∧order∈Transitivity(t)∧order∈Totality(t) ∣ order}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="EquivRel" org.eventb.core.label="EquivRel" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/EquivRel.tuf|org.eventb.theory.core.theoryRoot#EquivRel|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧op∈Transitivity(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x)))∧op∈Symmetry(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE))∧op∈Reflexivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧¬op∈Transitivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x)))∧¬op∈Symmetry(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE))∧¬op∈Reflexivity(t))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/EquivRel.tuf|org.eventb.theory.core.theoryRoot#EquivRel|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/EquivRel.tuf|org.eventb.theory.core.theoryRoot#EquivRel|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈Transitivity(t)∧op∈Symmetry(t)∧op∈Reflexivity(t) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Setoid" org.eventb.core.label="Setoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Setoid/Setoid.tuf|org.eventb.theory.core.theoryRoot#Setoid|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T)×ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀t⦂ℙ(T),op⦂ℙ(T×T×BOOL)·(t∈ℙ(T)∧(∀op⦂ℙ(T×T×BOOL)·((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧op∈Transitivity(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x)))∧op∈Symmetry(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE))∧op∈Reflexivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧¬op∈Transitivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))⇒(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL))))))∧(∀op⦂ℙ(T×T×BOOL)·((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧op∈Transitivity(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x)))∧op∈Symmetry(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE))∧op∈Reflexivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧¬op∈Transitivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x)))∧¬op∈Symmetry(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE))∧¬op∈Reflexivity(t)))∧op∈EquivRel(t))∨¬t∈ℙ(T)∨((∀op⦂ℙ(T×T×BOOL)·((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧op∈Transitivity(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x)))∧op∈Symmetry(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE))∧op∈Reflexivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧¬op∈Transitivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))⇒(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL))))))∧(∀op⦂ℙ(T×T×BOOL)·((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧op∈Transitivity(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x)))∧op∈Symmetry(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE))∧op∈Reflexivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧¬op∈Transitivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL⇒(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧((op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL⇒x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL)))∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x)))∧¬op∈Symmetry(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE))∧¬op∈Reflexivity(t)))∧¬op∈EquivRel(t))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Setoid/Setoid.tuf|org.eventb.theory.core.theoryRoot#Setoid|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{t⦂ℙ(T),op⦂ℙ(T×T×BOOL)·t∈ℙ(T)∧op∈EquivRel(t) ∣ t ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t⇒op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → t∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈t × t → t∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(t)∧op∈CommOp(t))∨¬op∈AssocOp(t)∨¬op∈CommOp(t)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(t)∧op∈CommOp(t) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈t∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t⇒(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T)))))∧((op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∨¬op∈t × t → t∨(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T)))))∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(t)∧(∀x⦂T·¬x∈t∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈t∨((∀op⦂ℙ(T×T×T)·(op∈t × t → t⇒(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T)))))∧((op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∨¬op∈t × t → t∨(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T)))))∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(t))∨(∃x⦂T·x∈t∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈t∧op∈AssocOp(t)∧(∀x⦂T·x∈t⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mk_monoid" org.eventb.core.label="mk_monoid" org.eventb.core.predicate="ident∈type∧op∈AssocOp(type)" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="type" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="+" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#+" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="get_ident" org.eventb.core.label="get_ident" org.eventb.core.predicate="m∈Monoid(ℙ(T))" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))∧(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))∈ℙ(T) × ℙ(ℙ(T) × ℙ(T) × ℙ(T)) ⇸ ℙ(T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="get_op" org.eventb.core.label="get_op" org.eventb.core.predicate="m∈Monoid(ℙ(T))" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T)×ℙ(T)×ℙ(T))" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))∧(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))∈ℙ(T) × ℙ(ℙ(T) × ℙ(T) × ℙ(T)) ⇸ ℙ(ℙ(T) × ℙ(T) × ℙ(T))">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_Internal" org.eventb.core.label="pAdd_Internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs pAdd_Internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_Internal_P" org.eventb.core.label="pAdd_Internal_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pAdd_Internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd" org.eventb.core.label="pAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs pAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_P" org.eventb.core.label="pAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Power" org.eventb.core.label="Power" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="/" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(x ↦ Power(ident,op,x,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="PowerSubset" org.eventb.core.label="PowerSubset" org.eventb.core.predicate="ident∈t∧op∈AssocOp(t)∧(x∈t∧ident ↦ op∈Monoid(t))" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="," org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#," org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#,|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#,|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(x ↦ PowerSubset(t,ident,op,x,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeq" org.eventb.core.label="pLeq" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(∃z⦂pNat·x pAdd z=y)∨(∀z⦂pNat·¬x pAdd z=y)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="∃z⦂pNat·x pAdd z=y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeqB" org.eventb.core.label="pLeqB" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="bool(x pLeq y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeqB_P" org.eventb.core.label="pLeqB_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pLeqB y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pNatMult" org.eventb.core.label="pNatMult" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Power(zero ⦂ pNat,pAdd_P ⦂ ℙ(pNat×pNat×pNat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pNatMult_P" org.eventb.core.label="pNatMult_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ pNatMult(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pTimes" org.eventb.core.label="pTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Power(zero ⦂ pNat,pAdd_P ⦂ ℙ(pNat×pNat×pNat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pTimes_P" org.eventb.core.label="pTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ pNat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(length(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="appendList" org.eventb.core.label="appendList" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,appendList(xs,y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p5,p6,p7">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ML" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p5,p6,p7">
<org.eventb.core.prString name=".arg" org.eventb.core.prSValue="0;1:500"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(T),y⦂List(T)·x∈List(T)∧x≠(nil ⦂ List(T))∧y∈List(T)∧y≠(nil ⦂ List(T))∧head(x)≠head(y)⇒x≠y"/>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="∀x⦂List(T),y⦂List(T)·¬x=(nil ⦂ List(T))∧¬y=(nil ⦂ List(T))∧¬head(x)=head(y)⇒¬x=y"/>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="¬x=(nil ⦂ List(T))∧¬y=(nil ⦂ List(T))∧¬head(x)=head(y)⇒¬x=y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="¬x=y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="¬y=(nil ⦂ List(T))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀x⦂List(T),y⦂List(T)·⊤∧¬x=(nil ⦂ List(T))∧⊤∧¬y=(nil ⦂ List(T))∧¬head(x)=head(y)⇒¬x=y"/>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="¬x=(nil ⦂ List(T))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="¬head(x)=head(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀x⦂List(T),y⦂List(T)·x∈List(T)∧¬x=(nil ⦂ List(T))∧y∈List(T)∧¬y=(nil ⦂ List(T))∧¬head(x)=head(y)⇒¬x=y"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="com.clearsy.atelierb.provers.core.externalML:1"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="heads not eaqual/WD-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x,y" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="T" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="AntiSymmetry" org.eventb.core.label="AntiSymmetry" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)))))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒(op(x ↦ y)=TRUE∧op(y ↦ x)=TRUE⇔x=y)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="pNat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="pNat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Reflexivity" org.eventb.core.label="Reflexivity" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T·x∈t⇒op(x ↦ x)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_P" org.eventb.core.label="pAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ pNat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(length(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pNatMult" org.eventb.core.label="pNatMult" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Power(zero ⦂ pNat,pAdd_P ⦂ ℙ(pNat×pNat×pNat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Transitivity" org.eventb.core.label="Transitivity" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧op(x ↦ y)=TRUE∧op(y ↦ z)=TRUE⇒op(x ↦ z)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd" org.eventb.core.label="pAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs pAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pNatMult_P" org.eventb.core.label="pNatMult_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ pNatMult(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="get_op" org.eventb.core.label="get_op" org.eventb.core.predicate="m∈Monoid(ℙ(T))" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T)×ℙ(T)×ℙ(T))" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))∧(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))∈ℙ(T) × ℙ(ℙ(T) × ℙ(T) × ℙ(T)) ⇸ ℙ(ℙ(T) × ℙ(T) × ℙ(T))">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Power" org.eventb.core.label="Power" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="/" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(x ↦ Power(ident,op,x,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mk_monoid" org.eventb.core.label="mk_monoid" org.eventb.core.predicate="ident∈type∧op∈AssocOp(type)" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="type" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="+" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#+" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeqB_P" org.eventb.core.label="pLeqB_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pLeqB y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Totality" org.eventb.core.label="Totality" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒op(x ↦ y)=TRUE∨op(y ↦ x)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeqB" org.eventb.core.label="pLeqB" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="bool(x pLeq y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="appendList" org.eventb.core.label="appendList" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,appendList(xs,y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈t∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T)))))∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∧op∈AssocOp(t)∧(∀x⦂T·¬x∈t∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈t∨((∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T)))))∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∧¬op∈AssocOp(t))∨(∃x⦂T·x∈t∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈t∧op∈AssocOp(t)∧(∀x⦂T·x∈t⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="PowerSubset" org.eventb.core.label="PowerSubset" org.eventb.core.predicate="ident∈t∧op∈AssocOp(t)∧(x∈t∧ident ↦ op∈Monoid(t))" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="," org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#," org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#,|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#,|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(x ↦ PowerSubset(t,ident,op,x,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ pNat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈t × t → t∨(∃x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x)))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈t × t → t∧(∀x⦂T,y⦂T·x∈t∧y∈t∧op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="get_ident" org.eventb.core.label="get_ident" org.eventb.core.predicate="m∈Monoid(ℙ(T))" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))∧(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))∈ℙ(T) × ℙ(ℙ(T) × ℙ(T) × ℙ(T)) ⇸ ℙ(T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pTimes_P" org.eventb.core.label="pTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_Internal_P" org.eventb.core.label="pAdd_Internal_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pAdd_Internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pTimes" org.eventb.core.label="pTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Power(zero ⦂ pNat,pAdd_P ⦂ ℙ(pNat×pNat×pNat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ pNat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_Internal" org.eventb.core.label="pAdd_Internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs pAdd_Internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeq" org.eventb.core.label="pLeq" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(∃z⦂pNat·x pAdd z=y)∨(∀z⦂pNat·¬x pAdd z=y)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="∃z⦂pNat·x pAdd z=y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="leq" org.eventb.core.label="leq" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀order⦂ℙ(T×T×BOOL)·(order∈t × t → BOOL∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))))))∧order∈AntiSymmetry(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧order∈Transitivity(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))∧order∈Totality(t))∨¬order∈t × t → BOOL∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))))))∧¬order∈AntiSymmetry(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧¬order∈Transitivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))∧¬order∈Totality(t))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{order⦂ℙ(T×T×BOOL)·order∈t × t → BOOL∧order∈AntiSymmetry(t)∧order∈Transitivity(t)∧order∈Totality(t) ∣ order}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Symmetry" org.eventb.core.label="Symmetry" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p5,p6">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p9">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p9" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p10"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p10"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p11">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p5"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ goal (inst p_head,p_tail)" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p15" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p15" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p17">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in goal" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p18">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p18" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p10"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p10"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p19">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head,p_tail)" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p19">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ goal (inst p_head,p_tail)" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p15" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p15" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="∃head0⦂T,tail1⦂List(T)·cons(p_head,p_tail)=cons(head0,tail1)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="∃head0⦂T,tail1⦂List(T)·p_head=head0∧p_tail=tail1">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="y=(nil ⦂ List(T))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="⊤∧¬x=(nil ⦂ List(T))∧⊤∧¬y=(nil ⦂ List(T))⇒(∃head0⦂T,tail1⦂List(T)·x=cons(head0,tail1))∧(∃head0⦂T,tail1⦂List(T)·y=cons(head0,tail1))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="∃head0⦂T,tail1⦂List(T)·x=cons(head0,tail1)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="∃head0⦂T,tail1⦂List(T)·y=cons(head0,tail1)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="¬cons(p_head,p_tail)=(nil ⦂ List(T))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="y=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x∈List(T)∧¬x=(nil ⦂ List(T))∧y∈List(T)∧¬y=(nil ⦂ List(T))⇒(∃head0⦂T,tail1⦂List(T)·x=cons(head0,tail1))∧(∃head0⦂T,tail1⦂List(T)·y=cons(head0,tail1))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="p_head=p_head∧p_tail=p_tail">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="x∈List(T)∧x≠(nil ⦂ List(T))∧y∈List(T)∧y≠(nil ⦂ List(T))⇒(∃head0⦂T,tail1⦂List(T)·x=cons(head0,tail1))∧(∃head0⦂T,tail1⦂List(T)·y=cons(head0,tail1))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="(∃head0⦂T,tail1⦂List(T)·x=cons(head0,tail1))∧(∃head0⦂T,tail1⦂List(T)·y=cons(head0,tail1))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(T),y⦂List(T)·x∈List(T)∧x≠(nil ⦂ List(T))∧y∈List(T)∧y≠(nil ⦂ List(T))⇒(∃head0⦂T,tail1⦂List(T)·x=cons(head0,tail1))∧(∃head0⦂T,tail1⦂List(T)·y=cons(head0,tail1))"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="x=(nil ⦂ List(T))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="¬y=(nil ⦂ List(T))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="¬x=(nil ⦂ List(T))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="¬x=(nil ⦂ List(T))∧¬y=(nil ⦂ List(T))⇒(∃head0⦂T,tail1⦂List(T)·x=cons(head0,tail1))∧(∃head0⦂T,tail1⦂List(T)·y=cons(head0,tail1))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.dtDistinctCase"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.exI"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL3"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="appendList(l, nil) = l/S/rhs1" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,l" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.prSets="T" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scDatatypeDefinition name="pNat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="pNat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mk_monoid" org.eventb.core.label="mk_monoid" org.eventb.core.predicate="ident∈type∧op∈AssocOp(type)" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="type" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="+" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#+" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd" org.eventb.core.label="pAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs pAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="get_op" org.eventb.core.label="get_op" org.eventb.core.predicate="m∈Monoid(ℙ(T))" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T)×ℙ(T)×ℙ(T))" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))∧(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))∈ℙ(T) × ℙ(ℙ(T) × ℙ(T) × ℙ(T)) ⇸ ℙ(ℙ(T) × ℙ(T) × ℙ(T))">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(ℙ(T)×ℙ(T)×ℙ(T))))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ pNat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pNatMult_P" org.eventb.core.label="pNatMult_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ pNatMult(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Symmetry" org.eventb.core.label="Symmetry" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=op(y ↦ x))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈t × t → t∨(∃x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x)))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈t × t → t∧(∀x⦂T,y⦂T·x∈t∧y∈t∧op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="appendList" org.eventb.core.label="appendList" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,appendList(xs,y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="get_ident" org.eventb.core.label="get_ident" org.eventb.core.predicate="m∈Monoid(ℙ(T))" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))∧(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))∈ℙ(T) × ℙ(ℙ(T) × ℙ(T) × ℙ(T)) ⇸ ℙ(T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(ℙ(T)×ℙ(ℙ(T)×ℙ(T)×ℙ(T))×ℙ(T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ pNat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(length(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeqB" org.eventb.core.label="pLeqB" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="bool(x pLeq y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈t∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T)))))∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∧op∈AssocOp(t)∧(∀x⦂T·¬x∈t∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈t∨((∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T)))))∧(∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))))∧¬op∈AssocOp(t))∨(∃x⦂T·x∈t∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Monoid/Monoid_T.tuf|org.eventb.theory.core.theoryRoot#Monoid_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈t∧op∈AssocOp(t)∧(∀x⦂T·x∈t⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Power" org.eventb.core.label="Power" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="/" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#\/|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(x ↦ Power(ident,op,x,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeqB_P" org.eventb.core.label="pLeqB_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pLeqB y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_P" org.eventb.core.label="pAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pLeq" org.eventb.core.label="pLeq" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(∃z⦂pNat·x pAdd z=y)∨(∀z⦂pNat·¬x pAdd z=y)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="∃z⦂pNat·x pAdd z=y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pNatMult" org.eventb.core.label="pNatMult" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Power(zero ⦂ pNat,pAdd_P ⦂ ℙ(pNat×pNat×pNat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈t × t → t∨(∃x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Operators/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈t × t → t∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Totality" org.eventb.core.label="Totality" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒op(x ↦ y)=TRUE∨op(y ↦ x)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_T.tuf|org.eventb.theory.core.theoryRoot#pNat_T|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ pNat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_Internal" org.eventb.core.label="pAdd_Internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs pAdd_Internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pTimes" org.eventb.core.label="pTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Power(zero ⦂ pNat,pAdd_P ⦂ ℙ(pNat×pNat×pNat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Transitivity" org.eventb.core.label="Transitivity" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧op(x ↦ y)=TRUE∧op(y ↦ z)=TRUE⇒op(x ↦ z)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Reflexivity" org.eventb.core.label="Reflexivity" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T·¬x∈t∨(x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T·x∈t∧x ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ x)=TRUE)">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T·x∈t⇒op(x ↦ x)=TRUE) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="PowerSubset" org.eventb.core.label="PowerSubset" org.eventb.core.predicate="ident∈t∧op∈AssocOp(t)∧(x∈t∧ident ↦ op∈Monoid(t))" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#-" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="," org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#," org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ pNat" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#,|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Monoid/Monoid_Power.tuf|org.eventb.theory.core.theoryRoot#Monoid_Power|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#,|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(x ↦ PowerSubset(t,ident,op,x,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AntiSymmetry" org.eventb.core.label="AntiSymmetry" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)))))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/RelationProperties.tuf|org.eventb.theory.core.theoryRoot#RelationProperties|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×BOOL)·op∈t × t → BOOL∧(∀x⦂T,y⦂T·x∈t∧y∈t⇒(op(x ↦ y)=TRUE∧op(y ↦ x)=TRUE⇔x=y)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pTimes_P" org.eventb.core.label="pTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Times.tuf|org.eventb.theory.core.theoryRoot#pNat_Times|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="leq" org.eventb.core.label="leq" org.eventb.core.predicate="⊤" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×BOOL))" org.eventb.theory.core.wd="∀order⦂ℙ(T×T×BOOL)·(order∈t × t → BOOL∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))))))∧order∈AntiSymmetry(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧order∈Transitivity(t)∧(∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))∧order∈Totality(t))∨¬order∈t × t → BOOL∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE)∨x=y)∧(¬x=y∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE∧¬x=y)∨(x=y∧((x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))))))∧¬order∈AntiSymmetry(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T,z⦂T·¬x∈t∨¬y∈t∨¬z∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE)∨(y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ z)=TRUE)∨(x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ z)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T,z⦂T·x∈t∧y∈t∧z∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE∧y ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ z)=TRUE∧x ↦ z∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ z)=TRUE))∧¬order∈Transitivity(t))∨((∀op⦂ℙ(T×T×BOOL)·(op∈t × t → BOOL∧(∀x⦂T,y⦂T·¬x∈t∨¬y∈t∨(x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧op(x ↦ y)=TRUE)∨(y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧op(y ↦ x)=TRUE)))∨¬op∈t × t → BOOL∨(∃x⦂T,y⦂T·x∈t∧y∈t∧x ↦ y∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(x ↦ y)=TRUE∧y ↦ x∈dom(op)∧op∈T × T ⇸ BOOL∧¬op(y ↦ x)=TRUE))∧¬order∈Totality(t))">
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Relations/Ordering.tuf|org.eventb.theory.core.theoryRoot#Ordering|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{order⦂ℙ(T×T×BOOL)·order∈t × t → BOOL∧order∈AntiSymmetry(t)∧order∈Transitivity(t)∧order∈Totality(t) ∣ order}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="pAdd_Internal_P" org.eventb.core.label="pAdd_Internal_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(pNat×pNat×pNat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/PeanoNaturals/pNat_Addition.tuf|org.eventb.theory.core.theoryRoot#pNat_Addition|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂pNat ↦ y⦂pNat·⊤ ∣ x pAdd_Internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees l)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="l" org.eventb.core.type="List(T)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with l=nil" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="appendList expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="ListTheory"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="_AuxiliaryDefinitions"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="_AuxiliaryDefinitions.appendList case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p6,p7">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with l=cons(p_head,p_tail)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p6">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="appendList expansion on goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p7"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="ListTheory"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="_AuxiliaryDefinitions"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="_AuxiliaryDefinitions.appendList case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀l⦂List(T)·appendList(l,nil ⦂ List(T))=l"/>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="appendList(l,nil ⦂ List(T))=l">
<org.eventb.core.prIdent name="l" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="(nil ⦂ List(T))=(nil ⦂ List(T))"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="l=(nil ⦂ List(T))">
<org.eventb.core.prIdent name="l" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="l=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="l" org.eventb.core.type="List(T)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="appendList(p_tail,nil ⦂ List(T))=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="cons(p_head,appendList(p_tail,nil ⦂ List(T)))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="appendList(nil ⦂ List(T),nil ⦂ List(T))=(nil ⦂ List(T))"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="appendList(cons(p_head,p_tail),nil ⦂ List(T))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="T"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(T)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
</org.eventb.core.prProof>
</org.eventb.core.prFile>
