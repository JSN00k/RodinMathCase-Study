<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.deployedTheoryRoot org.eventb.core.accurate="true" org.eventb.core.comment="GENERATED THEORY FILE: !DO NOT CHANGE!" org.eventb.theory.core.modificationHashValue="316cd2eb0385697a65de321be6cabf54" org.eventb.theory.core.outdated="false">
<org.eventb.theory.core.useTheory name="BOOL" org.eventb.core.scTarget="/BOOL/BOOL.dtf|org.eventb.theory.core.deployedTheoryRoot#BOOL"/>
<org.eventb.theory.core.useTheory name="List" org.eventb.core.scTarget="/ListTheory/List.dtf|org.eventb.theory.core.deployedTheoryRoot#List"/>
<org.eventb.theory.core.useTheory name="bNat_T" org.eventb.core.scTarget="/BinaryNaturals/bNat_T.dtf|org.eventb.theory.core.deployedTheoryRoot#bNat_T"/>
<org.eventb.theory.core.scNewOperatorDefinition name="*" org.eventb.core.label="bnLSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="+" org.eventb.core.label="bnIsZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xB=FALSE∧bnIsZero(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="," org.eventb.core.label="bnHasSetBit" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xB=TRUE∨bnHasSetBit(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="-" org.eventb.core.label="bnShiftLeft" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="." org.eventb.core.label="bnConcatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB,bnConcatonate(xs,y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="/" org.eventb.core.label="bnRemTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∨¬bnIsZero(xs),cons(xB,bnRemTrailingZeros(xs)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="0" org.eventb.core.label="bnCountBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="pNat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ pNat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=FALSE∧bnIsZero(xs),zero ⦂ pNat,suc(bnCountBits(xs)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scTheorem name="generatedBlocl" org.eventb.core.label="countBits ≥ 0" org.eventb.core.predicate="∀x⦂List(BOOL)·(zero ⦂ pNat) pLeq bnCountBits(x)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.theorem#1" org.eventb.theory.core.order="0"/>
<org.eventb.theory.core.scTheorem name="generatedBlocm" org.eventb.core.label="hasSetBit ⇒ notZero" org.eventb.core.predicate="∀x⦂List(BOOL)·bnHasSetBit(x)⇔¬bnIsZero(x)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.theorem#8" org.eventb.theory.core.order="1"/>
<org.eventb.theory.core.scTheorem name="generatedBlocn" org.eventb.core.label="remZeros(zero) = nil" org.eventb.core.predicate="∀x⦂List(BOOL)·bnIsZero(x)⇔bnRemTrailingZeros(x)=(nil ⦂ List(BOOL))" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.theorem#;" org.eventb.theory.core.order="2"/>
<org.eventb.theory.core.scTheorem name="generatedBloco" org.eventb.core.label="isZero(remZeros(zero))" org.eventb.core.predicate="∀x⦂List(BOOL)·bnIsZero(x)⇔bnIsZero(bnRemTrailingZeros(x))" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.theorem#?" org.eventb.theory.core.order="3"/>
<org.eventb.theory.core.scTheorem name="generatedBlocp" org.eventb.core.label="coutbits(zero) = zero" org.eventb.core.predicate="∀x⦂List(BOOL)·bnIsZero(x)⇔bnCountBits(x)=(zero ⦂ pNat)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.theorem#=" org.eventb.theory.core.order="4"/>
<org.eventb.theory.core.scTheorem name="generatedBlocq" org.eventb.core.label="countBits(x) = countBits(remZero(x))" org.eventb.core.predicate="∀x⦂List(BOOL)·bnCountBits(x)=bnCountBits(bnRemTrailingZeros(x))" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.theorem#&gt;" org.eventb.theory.core.order="5"/>
<org.eventb.theory.core.scTheorem name="generatedBlocr" org.eventb.core.label="countBits(shiftLeft(x)) = countBits(x) − 1" org.eventb.core.predicate="∀x⦂List(BOOL)·¬bnIsZero(x)⇔bnCountBits(x)=suc(bnCountBits(bnShiftLeft(x)))" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.theorem#@" org.eventb.theory.core.order="6"/>
<org.eventb.theory.core.scTheorem name="generatedBlocs" org.eventb.core.label="LSB(zero) = FALSE" org.eventb.core.predicate="∀x⦂List(BOOL)·bnIsZero(x)⇒bnLSB(x)=FALSE" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.theorem#A" org.eventb.theory.core.order="7"/>
<org.eventb.theory.core.scTheorem name="generatedBloct" org.eventb.core.label="shiftLeft maintains zero" org.eventb.core.predicate="∀x⦂List(BOOL)·bnIsZero(x)⇒bnIsZero(bnShiftLeft(x))" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.theorem#B" org.eventb.theory.core.order="8"/>
<org.eventb.theory.core.scTheorem name="generatedBlocu" org.eventb.core.label="shiftLeft reduces bit count" org.eventb.core.predicate="∀x⦂List(BOOL)·¬bnIsZero(x)⇒suc(bnCountBits(bnShiftLeft(x)))=bnCountBits(x)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.theorem#C" org.eventb.theory.core.order="9"/>
<org.eventb.theory.core.scTheorem name="generatedBlocv" org.eventb.core.label="remZeros makes normal" org.eventb.core.predicate="∀x⦂List(BOOL)·bnIsNormal(bnRemTrailingZeros(x))" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.theorem#D" org.eventb.theory.core.order="10"/>
<org.eventb.theory.core.scProofRulesBlock name="generatedBlock" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(">
<org.eventb.theory.core.scMetavariable name="x" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scMetavariable name="aB" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scMetavariable name="as" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scMetavariable name="xB" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scMetavariable name="xs" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scMetavariable name="y" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRewriteRule name="BitwiseOps.bnLSB case 0" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOps.bnLSB case 0" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bnLSB expansion" org.eventb.theory.core.formula="bnLSB(nil ⦂ List(BOOL))">
<org.eventb.theory.core.scRewriteRuleRHS name="bnLSB rhs" org.eventb.core.label="bnLSB rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.formula="FALSE"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOps.bnLSB case 1" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOps.bnLSB case 1" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bnLSB expansion" org.eventb.theory.core.formula="bnLSB(cons(aB,as))">
<org.eventb.theory.core.scRewriteRuleRHS name="bnLSB rhs" org.eventb.core.label="bnLSB rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOps.bnIsZero case 0" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOps.bnIsZero case 0" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bnIsZero expansion" org.eventb.theory.core.formula="bnIsZero(nil ⦂ List(BOOL))">
<org.eventb.theory.core.scRewriteRuleRHS name="bnIsZero rhs" org.eventb.core.label="bnIsZero rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOps.bnIsZero case 1" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOps.bnIsZero case 1" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bnIsZero expansion" org.eventb.theory.core.formula="bnIsZero(cons(xB,xs))">
<org.eventb.theory.core.scRewriteRuleRHS name="bnIsZero rhs" org.eventb.core.label="bnIsZero rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.formula="xB=FALSE∧bnIsZero(xs)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOps.bnHasSetBit case 0" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOps.bnHasSetBit case 0" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bnHasSetBit expansion" org.eventb.theory.core.formula="bnHasSetBit(nil ⦂ List(BOOL))">
<org.eventb.theory.core.scRewriteRuleRHS name="bnHasSetBit rhs" org.eventb.core.label="bnHasSetBit rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.formula="⊥"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOps.bnHasSetBit case 1" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOps.bnHasSetBit case 1" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bnHasSetBit expansion" org.eventb.theory.core.formula="bnHasSetBit(cons(xB,xs))">
<org.eventb.theory.core.scRewriteRuleRHS name="bnHasSetBit rhs" org.eventb.core.label="bnHasSetBit rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.formula="xB=TRUE∨bnHasSetBit(xs)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOps.bnShiftLeft case 0" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOps.bnShiftLeft case 0" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bnShiftLeft expansion" org.eventb.theory.core.formula="bnShiftLeft(nil ⦂ List(BOOL))">
<org.eventb.theory.core.scRewriteRuleRHS name="bnShiftLeft rhs" org.eventb.core.label="bnShiftLeft rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOps.bnShiftLeft case 1" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOps.bnShiftLeft case 1" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bnShiftLeft expansion" org.eventb.theory.core.formula="bnShiftLeft(cons(xB,xs))">
<org.eventb.theory.core.scRewriteRuleRHS name="bnShiftLeft rhs" org.eventb.core.label="bnShiftLeft rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOps.bnConcatonate case 0" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOps.bnConcatonate case 0" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bnConcatonate expansion" org.eventb.theory.core.formula="bnConcatonate(nil ⦂ List(BOOL),y)">
<org.eventb.theory.core.scRewriteRuleRHS name="bnConcatonate rhs" org.eventb.core.label="bnConcatonate rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.formula="y"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOps.bnConcatonate case 1" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOps.bnConcatonate case 1" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bnConcatonate expansion" org.eventb.theory.core.formula="bnConcatonate(cons(xB,xs),y)">
<org.eventb.theory.core.scRewriteRuleRHS name="bnConcatonate rhs" org.eventb.core.label="bnConcatonate rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.formula="cons(xB,bnConcatonate(xs,y))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOps.bnRemTrailingZeros case 0" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOps.bnRemTrailingZeros case 0" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bnRemTrailingZeros expansion" org.eventb.theory.core.formula="bnRemTrailingZeros(nil ⦂ List(BOOL))">
<org.eventb.theory.core.scRewriteRuleRHS name="bnRemTrailingZeros rhs" org.eventb.core.label="bnRemTrailingZeros rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOps.bnRemTrailingZeros case 1" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOps.bnRemTrailingZeros case 1" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bnRemTrailingZeros expansion" org.eventb.theory.core.formula="bnRemTrailingZeros(cons(xB,xs))">
<org.eventb.theory.core.scRewriteRuleRHS name="bnRemTrailingZeros rhs" org.eventb.core.label="bnRemTrailingZeros rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.formula="COND(xB=TRUE∨¬bnIsZero(xs),cons(xB,bnRemTrailingZeros(xs)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOps.bnCountBits case 0" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOps.bnCountBits case 0" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bnCountBits expansion" org.eventb.theory.core.formula="bnCountBits(nil ⦂ List(BOOL))">
<org.eventb.theory.core.scRewriteRuleRHS name="bnCountBits rhs" org.eventb.core.label="bnCountBits rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.formula="zero ⦂ pNat"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOps.bnCountBits case 1" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOps.bnCountBits case 1" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bnCountBits expansion" org.eventb.theory.core.formula="bnCountBits(cons(xB,xs))">
<org.eventb.theory.core.scRewriteRuleRHS name="bnCountBits rhs" org.eventb.core.label="bnCountBits rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.formula="COND(xB=FALSE∧bnIsZero(xs),zero ⦂ pNat,suc(bnCountBits(xs)))"/>
</org.eventb.theory.core.scRewriteRule>
</org.eventb.theory.core.scProofRulesBlock>
<org.eventb.theory.core.scProofRulesBlock name="generatedBlocw" org.eventb.core.label="countBits Theorems" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#2">
<org.eventb.theory.core.scMetavariable name="n" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#2|org.eventb.theory.core.metaVariable#)" org.eventb.core.type="pNat"/>
<org.eventb.theory.core.scMetavariable name="x" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#2|org.eventb.theory.core.metaVariable#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scMetavariable name="y" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#2|org.eventb.theory.core.metaVariable#1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRewriteRule name="z" org.eventb.core.accurate="true" org.eventb.core.label="coutbits ≥ 0" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#2|org.eventb.theory.core.rewriteRule#*" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="countbits &gt;= 0" org.eventb.theory.core.formula="(zero ⦂ pNat) pLeq bnCountBits(x)">
<org.eventb.theory.core.scRewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#2|org.eventb.theory.core.rewriteRule#*|org.eventb.theory.core.rewriteRuleRHS#'" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="{" org.eventb.core.accurate="true" org.eventb.core.label="coutbits ≥ 02" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#2|org.eventb.theory.core.rewriteRule#(" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="n + countbits &gt;= n" org.eventb.theory.core.formula="n pLeq n pAdd bnCountBits(x)">
<org.eventb.theory.core.scRewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#2|org.eventb.theory.core.rewriteRule#(|org.eventb.theory.core.rewriteRuleRHS#'" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="|" org.eventb.core.accurate="true" org.eventb.core.label="countBits(remZeros(x)) = countBits(x)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#2|org.eventb.theory.core.rewriteRule#." org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="countBits(remZeros(x)) = countBits(x)" org.eventb.theory.core.formula="bnCountBits(bnRemTrailingZeros(x))">
<org.eventb.theory.core.scRewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#2|org.eventb.theory.core.rewriteRule#.|org.eventb.theory.core.rewriteRuleRHS#'" org.eventb.theory.core.formula="bnCountBits(x)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scInferenceRule name="}" org.eventb.core.accurate="true" org.eventb.core.label="countBits(x) ≥ 0" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#2|org.eventb.theory.core.inferenceRule#-" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.desc="countBits ≥ 0" org.eventb.theory.core.reasoningType="backward">
<org.eventb.theory.core.scInfer name="(" org.eventb.core.predicate="(zero ⦂ pNat) pLeq bnCountBits(x)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#2|org.eventb.theory.core.inferenceRule#-|org.eventb.theory.core.infer#("/>
</org.eventb.theory.core.scInferenceRule>
<org.eventb.theory.core.scInferenceRule name="~" org.eventb.core.accurate="true" org.eventb.core.label="countbits of shift left" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#2|org.eventb.theory.core.inferenceRule#\/" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.desc="countbits(x) - 1" org.eventb.theory.core.reasoningType="both">
<org.eventb.theory.core.scInfer name=")" org.eventb.core.predicate="suc(bnCountBits(bnShiftLeft(x)))=bnCountBits(x)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#2|org.eventb.theory.core.inferenceRule#\/|org.eventb.theory.core.infer#)"/>
<org.eventb.theory.core.scGiven name="'" org.eventb.core.predicate="¬bnIsZero(x)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#2|org.eventb.theory.core.inferenceRule#\/|org.eventb.theory.core.given#'" org.eventb.theory.core.hyp="false"/>
</org.eventb.theory.core.scInferenceRule>
</org.eventb.theory.core.scProofRulesBlock>
<org.eventb.theory.core.scProofRulesBlock name="generatedBlocx" org.eventb.core.label="zero implications" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:">
<org.eventb.theory.core.scMetavariable name="x" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.metaVariable#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRewriteRule name="y" org.eventb.core.accurate="true" org.eventb.core.label="zero ⇒ countBits = zero" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.rewriteRule#-" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="zero ⇒ countBits = zero" org.eventb.theory.core.formula="bnIsZero(x)">
<org.eventb.theory.core.scRewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.rewriteRule#-|org.eventb.theory.core.rewriteRuleRHS#'" org.eventb.theory.core.formula="bnCountBits(x)=(zero ⦂ pNat)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="z" org.eventb.core.accurate="true" org.eventb.core.label="countBits = zero ⇒ zero" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.rewriteRule#." org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="countBits = zero ⇒ zero" org.eventb.theory.core.formula="bnCountBits(x)=(zero ⦂ pNat)">
<org.eventb.theory.core.scRewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.rewriteRule#.|org.eventb.theory.core.rewriteRuleRHS#'" org.eventb.theory.core.formula="bnIsZero(x)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scInferenceRule name="{" org.eventb.core.accurate="true" org.eventb.core.label="zero has no set bits" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.inferenceRule#'" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.desc="Zero No Set Bits" org.eventb.theory.core.reasoningType="both">
<org.eventb.theory.core.scInfer name="(" org.eventb.core.predicate="¬bnHasSetBit(x)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.inferenceRule#'|org.eventb.theory.core.infer#("/>
<org.eventb.theory.core.scGiven name="'" org.eventb.core.predicate="bnIsZero(x)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.inferenceRule#'|org.eventb.theory.core.given#'" org.eventb.theory.core.hyp="true"/>
</org.eventb.theory.core.scInferenceRule>
<org.eventb.theory.core.scInferenceRule name="|" org.eventb.core.accurate="true" org.eventb.core.label="remZeros(zero) = nil" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.inferenceRule#*" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.desc="remZeros(zero) = nil" org.eventb.theory.core.reasoningType="both">
<org.eventb.theory.core.scInfer name="(" org.eventb.core.predicate="bnRemTrailingZeros(x)=(nil ⦂ List(BOOL))" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.inferenceRule#*|org.eventb.theory.core.infer#("/>
<org.eventb.theory.core.scGiven name="'" org.eventb.core.predicate="bnIsZero(x)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.inferenceRule#*|org.eventb.theory.core.given#'" org.eventb.theory.core.hyp="true"/>
</org.eventb.theory.core.scInferenceRule>
<org.eventb.theory.core.scInferenceRule name="}" org.eventb.core.accurate="true" org.eventb.core.label="LSB(zero) = FALSE" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.inferenceRule#)" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.desc="LSB(zero) = FALSE" org.eventb.theory.core.reasoningType="both">
<org.eventb.theory.core.scInfer name="(" org.eventb.core.predicate="bnLSB(x)=FALSE" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.inferenceRule#)|org.eventb.theory.core.infer#("/>
<org.eventb.theory.core.scGiven name="'" org.eventb.core.predicate="bnIsZero(x)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.inferenceRule#)|org.eventb.theory.core.given#'" org.eventb.theory.core.hyp="true"/>
</org.eventb.theory.core.scInferenceRule>
<org.eventb.theory.core.scInferenceRule name="~" org.eventb.core.accurate="true" org.eventb.core.label="LSB(zero) = FALSE2" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.inferenceRule#\/" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.desc="LSB(zero) = FALSE" org.eventb.theory.core.reasoningType="both">
<org.eventb.theory.core.scInfer name="(" org.eventb.core.predicate="bnLSB(x)=FALSE" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.inferenceRule#\/|org.eventb.theory.core.infer#("/>
<org.eventb.theory.core.scGiven name="'" org.eventb.core.predicate="bnIsZero(x)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.inferenceRule#\/|org.eventb.theory.core.given#'" org.eventb.theory.core.hyp="false"/>
</org.eventb.theory.core.scInferenceRule>
<org.eventb.theory.core.scInferenceRule name="''" org.eventb.core.accurate="true" org.eventb.core.label="shiftLeft(zero) is zero" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.inferenceRule#+" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.desc="zero &lt;&lt; 1 is zero" org.eventb.theory.core.reasoningType="both">
<org.eventb.theory.core.scInfer name="(" org.eventb.core.predicate="bnIsZero(bnShiftLeft(x))" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.inferenceRule#+|org.eventb.theory.core.infer#("/>
<org.eventb.theory.core.scGiven name="'" org.eventb.core.predicate="bnIsZero(x)" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#:|org.eventb.theory.core.inferenceRule#+|org.eventb.theory.core.given#'" org.eventb.theory.core.hyp="true"/>
</org.eventb.theory.core.scInferenceRule>
</org.eventb.theory.core.scProofRulesBlock>
<org.eventb.theory.core.scProofRulesBlock name="generatedBlocy" org.eventb.core.label="remZerosNormality" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#E">
<org.eventb.theory.core.scMetavariable name="x" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#E|org.eventb.theory.core.metaVariable#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRewriteRule name="y" org.eventb.core.accurate="true" org.eventb.core.label="isNormal(remZeros(x)) true" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#E|org.eventb.theory.core.rewriteRule#(" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="isNormal(remZeros(x)) true" org.eventb.theory.core.formula="bnIsNormal(bnRemTrailingZeros(x))">
<org.eventb.theory.core.scRewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNaturals/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.proofRulesBlock#E|org.eventb.theory.core.rewriteRule#(|org.eventb.theory.core.rewriteRuleRHS#'" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.scRewriteRule>
</org.eventb.theory.core.scProofRulesBlock>
</org.eventb.theory.core.deployedTheoryRoot>
