<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.prFile version="1">
<org.eventb.core.prProof name="xOR/Op-ASSOC" org.eventb.core.confidence="1000" org.eventb.core.prFresh="a,b,_z_" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLToP" org.eventb.core.label="BOOLToP" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_add_int" org.eventb.core.label="bn_add_int" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="res" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="carry" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="COND(carry=TRUE,cons(TRUE,res),res)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aBit,as)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aBit=TRUE∧head(b)=TRUE∧carry=TRUE,bn_add_int(as,tail(b),cons(TRUE,res),TRUE),COND(¬aBit=TRUE∧¬head(b)=TRUE∧¬carry=TRUE,bn_add_int(as,tail(b),cons(FALSE,res),FALSE),COND(aBit xOR head(b) xOR carry=TRUE,bn_add_int(as,tail(b),cons(TRUE,res),FALSE),bn_add_int(as,tail(b),cons(FALSE,res),TRUE))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bnAdd" org.eventb.core.label="bnAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤∧(length(x)≥length(y)⇒⊤)∧(¬length(x)≥length(y)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="reverse(COND(length(x)≥length(y),bn_add_int(x,y,nil ⦂ List(BOOL),FALSE),bn_add_int(y,x,nil ⦂ List(BOOL),FALSE)))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees a,b,_z_)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (a=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with a=TRUE" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p6">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (b=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with b=TRUE" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (_z_=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p12">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with _z_=TRUE" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p16">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p16">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p19">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p16" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="p18">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p20">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p12"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p21">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p21" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p22"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p22">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with b=FALSE" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p22">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p25">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p26">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (_z_=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p12">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p27">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p28">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with _z_=TRUE" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p29">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p16">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="p16">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p30">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p31">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p16" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="p18">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p32">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p12"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p9"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p33">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p33" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p34"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with a=FALSE" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p34">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p35">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p36">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (b=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p37">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p37" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p38">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with b=TRUE" org.eventb.core.prGoal="p38" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p39">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p39" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p40">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (_z_=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p12">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with _z_=TRUE" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p41">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p41" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p16">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p16" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="p18">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p42">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p12"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p21">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="p21">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p43">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p43" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p44">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p21" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p22"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with b=FALSE" org.eventb.core.prGoal="p44" org.eventb.core.prHyps="p22">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p45">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p45" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p46">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (_z_=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p12">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p46" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p42">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p16">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p46" org.eventb.core.prHyps="p16">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p47">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p47" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p12"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p9"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p6"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="¬b=TRUE">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="¬a=TRUE">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="COND(FALSE=_z_,TRUE,FALSE)=COND(FALSE=COND(¬b=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="COND(FALSE=_z_,TRUE,FALSE)=COND(TRUE=COND(¬b=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="a=FALSE">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="COND(¬COND(¬a=b,TRUE,FALSE)=_z_,TRUE,FALSE)=COND(¬a=COND(¬b=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="COND(⊤,TRUE,FALSE)=COND(FALSE=COND(FALSE=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="COND(FALSE=_z_,TRUE,FALSE)=COND(FALSE=COND(TRUE=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="COND(⊤,TRUE,FALSE)=COND(TRUE=COND(⊤,TRUE,FALSE),TRUE,FALSE)"/>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀a⦂BOOL,b⦂BOOL,_z_⦂BOOL·a∈BOOL∧b∈BOOL∧_z_∈BOOL⇒(⊤⇒COND(COND(a≠b,TRUE,FALSE)≠_z_,TRUE,FALSE)=COND(a≠COND(b≠_z_,TRUE,FALSE),TRUE,FALSE))"/>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="COND(FALSE=_z_,TRUE,FALSE)=FALSE">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="COND(⊤,TRUE,FALSE)=TRUE"/>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="COND(FALSE=_z_,TRUE,FALSE)=COND(TRUE=COND(¬TRUE=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="COND(TRUE=_z_,TRUE,FALSE)=COND(TRUE=COND(¬FALSE=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀a⦂BOOL,b⦂BOOL,_z_⦂BOOL·⊤∧⊤∧⊤⇒COND(¬COND(¬a=b,TRUE,FALSE)=_z_,TRUE,FALSE)=COND(¬a=COND(¬b=_z_,TRUE,FALSE),TRUE,FALSE)"/>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="FALSE=COND(FALSE=COND(FALSE=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="COND(¬COND(⊤,TRUE,FALSE)=_z_,TRUE,FALSE)=COND(FALSE=COND(¬b=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="COND(¬COND(⊤,TRUE,FALSE)=_z_,TRUE,FALSE)=COND(TRUE=COND(¬b=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="¬_z_=TRUE">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀a⦂BOOL,b⦂BOOL,_z_⦂BOOL·a∈BOOL∧b∈BOOL∧_z_∈BOOL⇒COND(¬COND(¬a=b,TRUE,FALSE)=_z_,TRUE,FALSE)=COND(¬a=COND(¬b=_z_,TRUE,FALSE),TRUE,FALSE)"/>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="COND(TRUE=_z_,TRUE,FALSE)=COND(TRUE=COND(TRUE=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="COND(⊥,TRUE,FALSE)=COND(FALSE=COND(FALSE=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="∀a⦂BOOL,b⦂BOOL,_z_⦂BOOL·COND(¬COND(¬a=b,TRUE,FALSE)=_z_,TRUE,FALSE)=COND(¬a=COND(¬b=_z_,TRUE,FALSE),TRUE,FALSE)"/>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="COND(FALSE=_z_,TRUE,FALSE)=COND(TRUE=COND(FALSE=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="_z_=FALSE">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="COND(TRUE=_z_,TRUE,FALSE)=COND(TRUE=COND(¬b=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="COND(¬COND(¬TRUE=b,TRUE,FALSE)=_z_,TRUE,FALSE)=COND(¬TRUE=COND(¬b=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="COND(FALSE=_z_,TRUE,FALSE)=TRUE">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="COND(¬COND(¬FALSE=b,TRUE,FALSE)=_z_,TRUE,FALSE)=COND(¬FALSE=COND(¬b=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="COND(FALSE=TRUE,TRUE,FALSE)=FALSE"/>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="COND(¬COND(TRUE=b,TRUE,FALSE)=_z_,TRUE,FALSE)=COND(TRUE=COND(¬b=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="b=TRUE">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="_z_=TRUE">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="COND(FALSE=TRUE,TRUE,FALSE)=COND(TRUE=COND(FALSE=TRUE,TRUE,FALSE),TRUE,FALSE)"/>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="TRUE=COND(FALSE=COND(FALSE=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="COND(¬COND(⊥,TRUE,FALSE)=_z_,TRUE,FALSE)=COND(TRUE=COND(¬b=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="FALSE=COND(FALSE=COND(⊤,TRUE,FALSE),TRUE,FALSE)"/>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="COND(¬COND(FALSE=TRUE,TRUE,FALSE)=_z_,TRUE,FALSE)=COND(FALSE=COND(¬TRUE=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="COND(FALSE=_z_,TRUE,FALSE)=COND(FALSE=COND(¬FALSE=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="COND(TRUE=_z_,TRUE,FALSE)=COND(FALSE=COND(FALSE=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="b=FALSE">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="COND(⊥,TRUE,FALSE)=COND(TRUE=COND(⊥,TRUE,FALSE),TRUE,FALSE)"/>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="a=TRUE">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="COND(FALSE=_z_,TRUE,FALSE)=COND(FALSE=COND(⊥,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="COND(¬COND(FALSE=b,TRUE,FALSE)=_z_,TRUE,FALSE)=COND(FALSE=COND(¬b=_z_,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="COND(FALSE=_z_,TRUE,FALSE)=COND(FALSE=COND(⊤,TRUE,FALSE),TRUE,FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="TRUE=COND(FALSE=COND(FALSE=TRUE,TRUE,FALSE),TRUE,FALSE)"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="xOR/Op-COMMUT" org.eventb.core.confidence="1000" org.eventb.core.prFresh="a,b" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bOne" org.eventb.core.label="bOne" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#F" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#F|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="boolP" org.eventb.core.label="boolP" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="LSB" org.eventb.core.label="LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="shiftLeft1" org.eventb.core.label="shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xb,xs)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="increment" org.eventb.core.label="increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bOne ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="appendList" org.eventb.core.label="appendList" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(topBit,xTail)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(topBit,appendList(xTail,y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_add_int" org.eventb.core.label="bn_add_int" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="carry" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="COND(carry=TRUE,increment(y),y)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧LSB(y)=TRUE∧carry=TRUE,cons(TRUE,bn_add_int(xs,shiftLeft1(y),TRUE)),COND(xB=FALSE∧LSB(y)=FALSE∧carry=FALSE,cons(FALSE,bn_add_int(xs,shiftLeft1(y),FALSE)),COND((xB xOR LSB(y)) xOR carry=TRUE,cons(TRUE,bn_add_int(xs,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(xs,shiftLeft1(y),TRUE)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bnAdd" org.eventb.core.label="bnAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="bn_add_int(x,y,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees a,b)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (a=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with a=TRUE" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p6">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (b=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with b=TRUE" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p11" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p9"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p14">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p14" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with a=FALSE" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (b=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p18">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p9"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p6"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="COND(¬TRUE=b,TRUE,FALSE)=COND(¬b=TRUE,TRUE,FALSE)">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="¬b=TRUE">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="¬a=TRUE">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="COND(FALSE=b,TRUE,FALSE)=COND(b=FALSE,TRUE,FALSE)">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀a⦂BOOL,b⦂BOOL·⊤∧⊤⇒COND(¬a=b,TRUE,FALSE)=COND(¬b=a,TRUE,FALSE)"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="b=TRUE">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="a=FALSE">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="COND(¬FALSE=b,TRUE,FALSE)=COND(¬b=FALSE,TRUE,FALSE)">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀a⦂BOOL,b⦂BOOL·a∈BOOL∧b∈BOOL⇒(⊤⇒COND(a≠b,TRUE,FALSE)=COND(b≠a,TRUE,FALSE))"/>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="∀a⦂BOOL,b⦂BOOL·COND(¬a=b,TRUE,FALSE)=COND(¬b=a,TRUE,FALSE)"/>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="COND(⊥,TRUE,FALSE)=COND(⊥,TRUE,FALSE)"/>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="COND(FALSE=TRUE,TRUE,FALSE)=COND(TRUE=FALSE,TRUE,FALSE)"/>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="COND(¬a=b,TRUE,FALSE)=COND(¬b=a,TRUE,FALSE)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="b=FALSE">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="a=TRUE">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="COND(⊤,TRUE,FALSE)=COND(⊤,TRUE,FALSE)"/>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="COND(TRUE=b,TRUE,FALSE)=COND(b=TRUE,TRUE,FALSE)">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀a⦂BOOL,b⦂BOOL·a∈BOOL∧b∈BOOL⇒COND(¬a=b,TRUE,FALSE)=COND(¬b=a,TRUE,FALSE)"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="bnAdd/Op-ASSOC" org.eventb.core.confidence="0" org.eventb.core.prFresh="p_tail,p_head,_z_,p_tail0,x,y,p_head0" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bOne" org.eventb.core.label="bOne" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#F" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#F|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="boolP" org.eventb.core.label="boolP" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="LSB" org.eventb.core.label="LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="shiftLeft1" org.eventb.core.label="shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xb,xs)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="increment" org.eventb.core.label="increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bOne ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="appendList" org.eventb.core.label="appendList" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(topBit,xTail)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(topBit,appendList(xTail,y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_add_int" org.eventb.core.label="bn_add_int" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="carry" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="COND(carry=TRUE,increment(y),y)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧LSB(y)=TRUE∧carry=TRUE,cons(TRUE,bn_add_int(xs,shiftLeft1(y),TRUE)),COND(xB=FALSE∧LSB(y)=FALSE∧carry=FALSE,cons(FALSE,bn_add_int(xs,shiftLeft1(y),FALSE)),COND((xB xOR LSB(y)) xOR carry=TRUE,cons(TRUE,bn_add_int(xs,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(xs,shiftLeft1(y),TRUE)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bnAdd" org.eventb.core.label="bnAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="bn_add_int(x,y,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y,_z_)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p5,p6,p7">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p8">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_add_int expansion on goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_add_int expansion on goal" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_add_int case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_add_int case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p14,p15">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_add_int expansion on goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p18">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head xOR LSB(y))" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p19">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p5"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with (p_head xOR LSB(y)) xOR FALSE=p_head xOR LSB(y)" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="p19">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p20">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_add_int expansion on goal" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p5"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head xOR LSB(bn_add_int(y,_z_,FALSE)))" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p23">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p5"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with (p_head xOR LSB(bn_add_int(y,_z_,FALSE))) xOR FALSE=p_head xOR LSB(bn_add_int(y,_z_,FALSE))" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p23">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p25">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p25">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p29">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p14" org.eventb.core.prInfHyps="p26"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p19" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p23" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p14,p19,p23"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p30">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="xOR expansion on goal" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p32">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="xOR expansion on goal" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in goal" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p35">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p35">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p39">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p15" org.eventb.core.prInfHyps="p36"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p28" org.eventb.core.prInfHyps="p38"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p15,p27,p28"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="LSB expansion on goal" org.eventb.core.prGoal="p39" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p41">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="shiftLeft1 expansion on goal" org.eventb.core.prGoal="p41" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_add_int expansion on goal" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p43" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p43" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p44">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_add_int case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.2.0.2.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p45">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p45">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p49">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p15" org.eventb.core.prInfHyps="p46"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p47"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p28" org.eventb.core.prInfHyps="p48"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p15,p27,p28"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.2.0.2.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.xOR"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.xOR"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p50">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p50" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p51"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p51">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p52">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p52" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p53">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p53" org.eventb.core.prHyps="p51">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p57">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p14" org.eventb.core.prInfHyps="p54"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p19" org.eventb.core.prInfHyps="p55"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p23" org.eventb.core.prInfHyps="p56"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p14,p19,p23"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p25"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_add_int case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_add_int case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x xOR FALSE=x"/>
<org.eventb.core.prString name=".string1" org.eventb.core.prSValue="∀x·appendList(x,nil)=x"/>
<org.eventb.core.prString name=".string2" org.eventb.core.prSValue="∀x·bn_add_int(x,nil,FALSE)=x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="bn_add_int(COND(p_head=FALSE∧LSB(y)=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),COND((p_head xOR LSB(y)) xOR FALSE=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),TRUE)))),_z_,FALSE)=bn_add_int(cons(p_head,p_tail),bn_add_int(y,_z_,FALSE),FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL),_z_⦂List(BOOL)·x∈List(BOOL)∧y∈List(BOOL)∧_z_∈List(BOOL)⇒(⊤⇒bn_add_int(bn_add_int(x,y,FALSE),_z_,FALSE)=bn_add_int(x,bn_add_int(y,_z_,FALSE),FALSE))"/>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL),_z_⦂List(BOOL)·bn_add_int(bn_add_int(x,y,FALSE),_z_,FALSE)=bn_add_int(x,bn_add_int(y,_z_,FALSE),FALSE)"/>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="∀x⦂BOOL·x xOR FALSE=x"/>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="bn_add_int(COND(LSB(y)=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),COND(FALSE xOR LSB(y)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),TRUE)))),_z_,FALSE)=COND(LSB(bn_add_int(y,_z_,FALSE))=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),COND(FALSE xOR LSB(bn_add_int(y,_z_,FALSE))=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),TRUE))))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="bn_add_int(COND(LSB(y)=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),COND(p_head xOR LSB(y)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),TRUE)))),_z_,FALSE)=COND(LSB(bn_add_int(y,_z_,FALSE))=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),COND(p_head xOR LSB(bn_add_int(y,_z_,FALSE))=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),TRUE))))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="bn_add_int(COND(COND(FALSE=LSB(cons(p_head0,p_tail0)),TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(cons(p_head0,p_tail0)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(cons(p_head0,p_tail0)),TRUE))),_z_,FALSE)=COND(COND(FALSE=LSB(bn_add_int(cons(p_head0,p_tail0),_z_,FALSE)),TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(cons(p_head0,p_tail0),_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(cons(p_head0,p_tail0),_z_,FALSE)),TRUE)))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL),_z_⦂List(BOOL)·⊤∧⊤∧⊤⇒bn_add_int(bn_add_int(x,y,FALSE),_z_,FALSE)=bn_add_int(x,bn_add_int(y,_z_,FALSE),FALSE)"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="bn_add_int(COND(⊤∧LSB(y)=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),COND(p_head xOR LSB(y)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),TRUE)))),_z_,FALSE)=COND(⊤∧LSB(bn_add_int(y,_z_,FALSE))=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),COND(p_head xOR LSB(bn_add_int(y,_z_,FALSE))=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),TRUE))))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="(TRUE xOR LSB(y)) xOR FALSE=TRUE xOR LSB(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="COND(TRUE=TRUE∧LSB(_z_)=TRUE∧FALSE=TRUE,cons(TRUE,bn_add_int(bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE),shiftLeft1(_z_),TRUE)),COND(TRUE=FALSE∧LSB(_z_)=FALSE∧FALSE=FALSE,cons(FALSE,bn_add_int(bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE),shiftLeft1(_z_),FALSE)),COND((TRUE xOR LSB(_z_)) xOR FALSE=TRUE,cons(TRUE,bn_add_int(bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE),shiftLeft1(_z_),FALSE)),cons(FALSE,bn_add_int(bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE),shiftLeft1(_z_),TRUE)))))=COND(COND(FALSE=LSB(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),TRUE)))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="bn_add_int(COND(COND(TRUE≠LSB(y),TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),TRUE))),_z_,FALSE)=COND(TRUE xOR LSB(bn_add_int(y,_z_,FALSE))=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),TRUE)))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="bn_add_int(COND(COND(FALSE=LSB(y),TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),TRUE))),_z_,FALSE)=COND(TRUE xOR LSB(bn_add_int(y,_z_,FALSE))=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),TRUE)))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="(p_head xOR LSB(y)) xOR FALSE=p_head xOR LSB(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="(p_head xOR LSB(bn_add_int(y,_z_,FALSE))) xOR FALSE=p_head xOR LSB(bn_add_int(y,_z_,FALSE))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="(TRUE xOR LSB(bn_add_int(cons(p_head0,p_tail0),_z_,FALSE))) xOR FALSE=TRUE xOR LSB(bn_add_int(cons(p_head0,p_tail0),_z_,FALSE))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="(FALSE xOR LSB(y)) xOR FALSE=FALSE xOR LSB(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="bn_add_int(bn_add_int(nil ⦂ List(BOOL),y,FALSE),_z_,FALSE)=bn_add_int(nil ⦂ List(BOOL),bn_add_int(y,_z_,FALSE),FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="(TRUE xOR LSB(bn_add_int(y,_z_,FALSE))) xOR FALSE=TRUE xOR LSB(bn_add_int(y,_z_,FALSE))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="bn_add_int(COND(p_head=FALSE∧LSB(y)=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),COND(p_head xOR LSB(y)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),TRUE)))),_z_,FALSE)=COND(p_head=TRUE∧LSB(bn_add_int(y,_z_,FALSE))=TRUE∧FALSE=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),TRUE)),COND(p_head=FALSE∧LSB(bn_add_int(y,_z_,FALSE))=FALSE∧FALSE=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),COND((p_head xOR LSB(bn_add_int(y,_z_,FALSE))) xOR FALSE=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),TRUE)))))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="(TRUE xOR LSB(nil ⦂ List(BOOL))) xOR FALSE=TRUE xOR LSB(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="(FALSE xOR LSB(bn_add_int(y,_z_,FALSE))) xOR FALSE=FALSE xOR LSB(bn_add_int(y,_z_,FALSE))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="bn_add_int(COND(COND(FALSE=LSB(y),TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),TRUE))),_z_,FALSE)=COND(COND(TRUE≠LSB(bn_add_int(y,_z_,FALSE)),TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),TRUE)))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="bn_add_int(COND(COND(FALSE=LSB(y),TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),TRUE))),_z_,FALSE)=COND(COND(FALSE=LSB(bn_add_int(y,_z_,FALSE)),TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),TRUE)))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="bn_add_int(COND(p_head=TRUE∧LSB(y)=TRUE∧FALSE=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(y),TRUE)),COND(p_head=FALSE∧LSB(y)=FALSE∧FALSE=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),COND((p_head xOR LSB(y)) xOR FALSE=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),TRUE))))),_z_,FALSE)=bn_add_int(cons(p_head,p_tail),bn_add_int(y,_z_,FALSE),FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL),_z_⦂List(BOOL)·x∈List(BOOL)∧y∈List(BOOL)∧_z_∈List(BOOL)⇒bn_add_int(bn_add_int(x,y,FALSE),_z_,FALSE)=bn_add_int(x,bn_add_int(y,_z_,FALSE),FALSE)"/>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="bn_add_int(COND(FALSE=TRUE,increment(y),y),_z_,FALSE)=bn_add_int(nil ⦂ List(BOOL),bn_add_int(y,_z_,FALSE),FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="bn_add_int(bn_add_int(x,y,FALSE),_z_,FALSE)=bn_add_int(x,bn_add_int(y,_z_,FALSE),FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="bn_add_int(cons(TRUE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),_z_,FALSE)=COND(COND(FALSE=LSB(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),TRUE)))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="bn_add_int(COND(COND(FALSE=FALSE,TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),TRUE))),_z_,FALSE)=COND(COND(FALSE=LSB(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),TRUE)))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="bn_add_int(cons(TRUE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),_z_,FALSE)=COND(COND(FALSE=LSB(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),TRUE)))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="bn_add_int(COND(p_head=FALSE∧LSB(y)=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),COND(p_head xOR LSB(y)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),TRUE)))),_z_,FALSE)=COND(p_head=FALSE∧LSB(bn_add_int(y,_z_,FALSE))=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),COND((p_head xOR LSB(bn_add_int(y,_z_,FALSE))) xOR FALSE=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),TRUE))))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="COND((TRUE xOR LSB(_z_)) xOR FALSE=TRUE,cons(TRUE,bn_add_int(bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE),shiftLeft1(_z_),FALSE)),cons(FALSE,bn_add_int(bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE),shiftLeft1(_z_),TRUE)))=COND(COND(FALSE=LSB(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),TRUE)))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="bn_add_int(COND(p_head=FALSE∧LSB(y)=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),COND(p_head xOR LSB(y)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),TRUE)))),_z_,FALSE)=bn_add_int(cons(p_head,p_tail),bn_add_int(y,_z_,FALSE),FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_add_int(y,_z_,FALSE)=bn_add_int(nil ⦂ List(BOOL),bn_add_int(y,_z_,FALSE),FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="∀x⦂List(BOOL)·appendList(x,nil ⦂ List(BOOL))=x"/>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="bn_add_int(COND(TRUE=FALSE∧LSB(y)=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),COND(TRUE xOR LSB(y)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),TRUE)))),_z_,FALSE)=COND(TRUE=FALSE∧LSB(bn_add_int(y,_z_,FALSE))=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),COND(TRUE xOR LSB(bn_add_int(y,_z_,FALSE))=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),TRUE))))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="(TRUE xOR LSB(cons(p_head0,p_tail0))) xOR FALSE=TRUE xOR LSB(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="bn_add_int(bn_add_int(p_tail,y,FALSE),_z_,FALSE)=bn_add_int(p_tail,bn_add_int(y,_z_,FALSE),FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="bn_add_int(COND(p_head=FALSE∧LSB(y)=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),COND(p_head xOR LSB(y)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),TRUE)))),_z_,FALSE)=COND(p_head=FALSE∧LSB(bn_add_int(y,_z_,FALSE))=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),COND(p_head xOR LSB(bn_add_int(y,_z_,FALSE))=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),TRUE))))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="bn_add_int(bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE),_z_,FALSE)=bn_add_int(p_tail,bn_add_int(nil ⦂ List(BOOL),_z_,FALSE),FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="y=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="bn_add_int(y,_z_,FALSE)=COND(FALSE=TRUE,increment(bn_add_int(y,_z_,FALSE)),bn_add_int(y,_z_,FALSE))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="bn_add_int(bn_add_int(cons(p_head,p_tail),y,FALSE),_z_,FALSE)=bn_add_int(cons(p_head,p_tail),bn_add_int(y,_z_,FALSE),FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_add_int(x,nil ⦂ List(BOOL),FALSE)=x"/>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="x=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="bn_add_int(COND(COND(FALSE=LSB(nil ⦂ List(BOOL)),TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),TRUE))),_z_,FALSE)=COND(COND(FALSE=LSB(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE)),TRUE)))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="(TRUE xOR LSB(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE))) xOR FALSE=TRUE xOR LSB(bn_add_int(nil ⦂ List(BOOL),_z_,FALSE))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="bn_add_int(COND(TRUE xOR LSB(y)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(y),TRUE))),_z_,FALSE)=COND(TRUE xOR LSB(bn_add_int(y,_z_,FALSE))=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(bn_add_int(y,_z_,FALSE)),TRUE)))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="bn_add_int(bn_add_int(p_tail,cons(p_head0,p_tail0),FALSE),_z_,FALSE)=bn_add_int(p_tail,bn_add_int(cons(p_head0,p_tail0),_z_,FALSE),FALSE)">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="p_head xOR LSB(bn_add_int(y,_z_,FALSE))">
<org.eventb.core.prIdent name="_z_" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="p_head xOR LSB(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.mngHyp"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.dtDistinctCase"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="bnAdd/Op-COMMUT" org.eventb.core.psManual="true"/>
<org.eventb.core.prProof name="bnAddZero/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bOne" org.eventb.core.label="bOne" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#F" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#F|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="boolP" org.eventb.core.label="boolP" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="LSB" org.eventb.core.label="LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="shiftLeft1" org.eventb.core.label="shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xb,xs)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="increment" org.eventb.core.label="increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bOne ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="appendList" org.eventb.core.label="appendList" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(topBit,xTail)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(topBit,appendList(xTail,y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_add_int" org.eventb.core.label="bn_add_int" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="carry" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="COND(carry=TRUE,increment(y),y)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧LSB(y)=TRUE∧carry=TRUE,cons(TRUE,bn_add_int(xs,shiftLeft1(y),TRUE)),COND(xB=FALSE∧LSB(y)=FALSE∧carry=FALSE,cons(FALSE,bn_add_int(xs,shiftLeft1(y),FALSE)),COND((xB xOR LSB(y)) xOR carry=TRUE,cons(TRUE,bn_add_int(xs,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(xs,shiftLeft1(y),TRUE)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bnAdd" org.eventb.core.label="bnAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="bn_add_int(x,y,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_add_int expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_add_int case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p6,p7">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p7">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_add_int expansion on goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="LSB expansion on goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="shiftLeft1 expansion on goal" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="LSB expansion on goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="xOR expansion on goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="xOR expansion on goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p18">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="shiftLeft1 expansion on goal" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="shiftLeft1 expansion on goal" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p21">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="p21">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="p21">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p25">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p24"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p6"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p26">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="p26">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p27">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p29">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="p28">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p30">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p31">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="p6,p28">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p32">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p21"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.1.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.0.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.xOR"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.xOR"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.2.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.2.0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_add_int case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),COND(COND(p_head≠FALSE,TRUE,FALSE) xOR FALSE=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),TRUE))))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),COND(COND(p_head=TRUE,TRUE,FALSE) xOR FALSE=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),TRUE))))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),COND(COND(COND(p_head=TRUE,TRUE,FALSE)≠FALSE,TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),TRUE))))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),COND(COND(COND(p_head=TRUE,TRUE,FALSE)=TRUE,TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),TRUE))))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="⊤∧⊤"/>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_add_int(nil ⦂ List(BOOL),nil ⦂ List(BOOL),FALSE)=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),COND((p_head xOR LSB(nil ⦂ List(BOOL))) xOR FALSE=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),TRUE))))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="COND(FALSE=TRUE,increment(nil ⦂ List(BOOL)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="COND(p_head=TRUE∧LSB(nil ⦂ List(BOOL))=TRUE∧FALSE=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),TRUE)),COND(p_head=FALSE∧LSB(nil ⦂ List(BOOL))=FALSE∧FALSE=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),COND((p_head xOR LSB(nil ⦂ List(BOOL))) xOR FALSE=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),TRUE)))))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),COND(COND(COND(⊤,TRUE,FALSE)=TRUE,TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),TRUE))))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),cons(TRUE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="COND(TRUE=FALSE,cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),cons(TRUE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)))=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="FALSE=p_head∧bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)=p_tail">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),COND(COND(COND(p_head=TRUE,TRUE,FALSE)=TRUE,TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),TRUE))))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="bn_add_int(cons(p_head,p_tail),nil ⦂ List(BOOL),FALSE)=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),COND((p_head xOR FALSE) xOR FALSE=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),TRUE))))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),TRUE)))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="COND(p_head=FALSE∧FALSE=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),COND((p_head xOR LSB(nil ⦂ List(BOOL))) xOR FALSE=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),TRUE))))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_add_int(x,nil ⦂ List(BOOL),FALSE)=x"/>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_add_int(x,nil ⦂ List(BOOL),FALSE)=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),COND((p_head xOR LSB(nil ⦂ List(BOOL))) xOR FALSE=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),TRUE))))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),TRUE)))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),COND(COND(COND(⊥,TRUE,FALSE)=TRUE,TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),TRUE))))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="x=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="COND(p_head=FALSE∧LSB(nil ⦂ List(BOOL))=FALSE,cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),COND((p_head xOR LSB(nil ⦂ List(BOOL))) xOR FALSE=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),TRUE))))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,bn_add_int(p_tail,nil ⦂ List(BOOL),FALSE)),COND(COND(COND(p_head=TRUE,TRUE,FALSE)=TRUE,TRUE,FALSE)=TRUE,cons(TRUE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),FALSE)),cons(FALSE,bn_add_int(p_tail,shiftLeft1(nil ⦂ List(BOOL)),TRUE))))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="appendList/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bOne" org.eventb.core.label="bOne" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#F" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#F|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="boolP" org.eventb.core.label="boolP" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="LSB" org.eventb.core.label="LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="shiftLeft1" org.eventb.core.label="shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xb,xs)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="increment" org.eventb.core.label="increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bOne ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="appendList" org.eventb.core.label="appendList" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(topBit,xTail)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(topBit,appendList(xTail,y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_add_int" org.eventb.core.label="bn_add_int" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="carry" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="COND(carry=TRUE,increment(y),y)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧LSB(y)=TRUE∧carry=TRUE,cons(TRUE,bn_add_int(xs,shiftLeft1(y),TRUE)),COND(xB=FALSE∧LSB(y)=FALSE∧carry=FALSE,cons(FALSE,bn_add_int(xs,shiftLeft1(y),FALSE)),COND((xB xOR LSB(y)) xOR carry=TRUE,cons(TRUE,bn_add_int(xs,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(xs,shiftLeft1(y),TRUE)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bnAdd" org.eventb.core.label="bnAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="bn_add_int(x,y,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="appendList expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.appendList case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p6,p7">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p7">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="appendList expansion on goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p6"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.appendList case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="appendList(nil ⦂ List(BOOL),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="appendList(cons(p_head,p_tail),nil ⦂ List(BOOL))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·appendList(x,nil ⦂ List(BOOL))=x"/>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="appendList(x,nil ⦂ List(BOOL))=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="appendList(p_tail,nil ⦂ List(BOOL))=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="cons(p_head,appendList(p_tail,nil ⦂ List(BOOL)))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="xOR False/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bOne" org.eventb.core.label="bOne" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#F" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#F|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="boolP" org.eventb.core.label="boolP" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="LSB" org.eventb.core.label="LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#&gt;|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="shiftLeft1" org.eventb.core.label="shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#?|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="isNil" org.eventb.core.label="isNil" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xb,xs)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#A|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="⊥"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="increment" org.eventb.core.label="increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bOne ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#E|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="appendList" org.eventb.core.label="appendList" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(topBit,xTail)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#B|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(topBit,appendList(xTail,y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_add_int" org.eventb.core.label="bn_add_int" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="carry" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="COND(carry=TRUE,increment(y),y)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧LSB(y)=TRUE∧carry=TRUE,cons(TRUE,bn_add_int(xs,shiftLeft1(y),TRUE)),COND(xB=FALSE∧LSB(y)=FALSE∧carry=FALSE,cons(FALSE,bn_add_int(xs,shiftLeft1(y),FALSE)),COND((xB xOR LSB(y)) xOR carry=TRUE,cons(TRUE,bn_add_int(xs,shiftLeft1(y),FALSE)),cons(FALSE,bn_add_int(xs,shiftLeft1(y),TRUE)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bnAdd" org.eventb.core.label="bnAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#=|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="bn_add_int(x,y,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="BOOL"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="xOR expansion on goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (x=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p5"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p8">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p8" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p10"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p10"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.xOR"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="TRUE=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="COND(x=TRUE,TRUE,FALSE)=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="x xOR FALSE=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂BOOL·x xOR FALSE=x"/>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="FALSE=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="x=TRUE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="¬x=TRUE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="COND(⊥,TRUE,FALSE)=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="COND(⊤,TRUE,FALSE)=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="x=FALSE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="COND(x≠FALSE,TRUE,FALSE)=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
</org.eventb.core.prProof>
</org.eventb.core.prFile>
