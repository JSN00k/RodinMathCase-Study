<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.theoryRoot org.eventb.core.configuration="org.eventb.theory.core.thy">
<org.eventb.theory.core.datatypeDefinition name="'" org.eventb.core.identifier="Nat">
<org.eventb.theory.core.datatypeConstructor name="'" org.eventb.core.identifier="zero"/>
<org.eventb.theory.core.datatypeConstructor name="(" org.eventb.core.identifier="suc">
<org.eventb.theory.core.constructorArgument name="'" org.eventb.core.identifier="prev" org.eventb.theory.core.type="Nat"/>
</org.eventb.theory.core.datatypeConstructor>
</org.eventb.theory.core.datatypeDefinition>
<org.eventb.theory.core.newOperatorDefinition name="k" org.eventb.core.label="nAdd_internal" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="INFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="Nat" org.eventb.core.identifier="x"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="Nat" org.eventb.core.identifier="y"/>
<org.eventb.theory.core.recursiveOperatorDefinition name=")" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="zero" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.theory.core.formula="suc(xs nAdd_internal y)"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="m" org.eventb.core.label="nAdd_int_P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.directOperatorDefinition name="'" org.eventb.theory.core.formula="λx ↦ y·x↦y∈Nat×Nat ∣ x nAdd_internal y"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name=")" org.eventb.core.label="nAdd" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="INFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="Nat" org.eventb.core.identifier="x"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="Nat" org.eventb.core.identifier="y"/>
<org.eventb.theory.core.recursiveOperatorDefinition name=")" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="zero" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="/" org.eventb.core.comment="Anything ending in P is a passable form of the operator above." org.eventb.core.label="nAdd_P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.directOperatorDefinition name="'" org.eventb.core.comment="Maybe this will make passing round operators easy." org.eventb.theory.core.formula="λx ↦ y · ⊤ ∣ x nAdd y"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="*" org.eventb.core.label="decrement" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="Nat" org.eventb.core.identifier="x"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.theory.core.formula="xs"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="zero" org.eventb.theory.core.formula="zero"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.importTheoryProject name="," org.eventb.theory.core.importTheoryProject="/Maths">
<org.eventb.theory.core.importTheory name="'" org.eventb.theory.core.importTheory="/Maths/Monoid.dtf|org.eventb.theory.core.deployedTheoryRoot#Monoid"/>
</org.eventb.theory.core.importTheoryProject>
<org.eventb.theory.core.theorem name="l" org.eventb.core.label="monoidThm_corrollary" org.eventb.core.predicate="zero ↦ nAdd_int_P ∈ Monoid(Nat)"/>
<org.eventb.theory.core.theorem name="n" org.eventb.core.label="add_int = add" org.eventb.core.predicate="nAdd_int_P = nAdd_P"/>
<org.eventb.theory.core.proofRulesBlock name="1" org.eventb.core.label="Type rewrites">
<org.eventb.theory.core.rewriteRule name="*" org.eventb.core.label="nAdd_P is Abelian" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Addition is Abelian" org.eventb.theory.core.formula="nAdd_P ∈ AbelianOp(Nat)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="," org.eventb.core.label="nAdd_P is Commutative" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Addition is Commutative" org.eventb.theory.core.formula="nAdd_P ∈ CommOp(Nat)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="-" org.eventb.core.label="nAdd_P is Associative" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Addition is Associative" org.eventb.theory.core.formula="nAdd_P ∈ AssocOp(Nat)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="+" org.eventb.core.label="nAdd and zero form a monoid" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="zero and Addition forms a monoid" org.eventb.theory.core.formula="zero ↦ nAdd_P ∈ Monoid(Nat)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.rewriteRule>
</org.eventb.theory.core.proofRulesBlock>
<org.eventb.theory.core.proofRulesBlock name="2" org.eventb.core.label="MonoidRules">
<org.eventb.theory.core.metaVariable name="'" org.eventb.core.identifier="a" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.metaVariable name="(" org.eventb.core.identifier="b" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.metaVariable name=")" org.eventb.core.identifier="c" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.rewriteRule name="*" org.eventb.core.label="AssociativeLeft" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="AssociativeRight" org.eventb.theory.core.formula="a nAdd b nAdd c">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="a nAdd (b nAdd c)"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="+" org.eventb.core.label="AssociativeRight" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="AssociativeLeft" org.eventb.theory.core.formula="a nAdd b nAdd c">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="(a nAdd b) nAdd c"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="," org.eventb.core.label="zeroLeft" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Adding zero simplification" org.eventb.theory.core.formula="zero nAdd a">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="a"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="-" org.eventb.core.label="zeroRight" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Adding zero simplification" org.eventb.theory.core.formula="a nAdd zero">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="a"/>
</org.eventb.theory.core.rewriteRule>
</org.eventb.theory.core.proofRulesBlock>
<org.eventb.theory.core.proofRulesBlock name="3" org.eventb.core.label="AddMonoidRewrite">
<org.eventb.theory.core.metaVariable name="'" org.eventb.core.identifier="a" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.metaVariable name="(" org.eventb.core.identifier="b" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.rewriteRule name=")" org.eventb.core.label="nAdd as monoid" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Rewrite as monoid operator" org.eventb.theory.core.formula="a nAdd b">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="mOp(zero ↦ nAdd_P)(a ↦ b)"/>
</org.eventb.theory.core.rewriteRule>
</org.eventb.theory.core.proofRulesBlock>
<org.eventb.theory.core.proofRulesBlock name="4" org.eventb.core.label="AddOne">
<org.eventb.theory.core.metaVariable name="'" org.eventb.core.identifier="x" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.rewriteRule name="(" org.eventb.core.label="sucToAddLeft" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Suc To Add One x on left" org.eventb.theory.core.formula="suc(x)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="x nAdd suc(zero)"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name=")" org.eventb.core.label="sucToAddRight" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Suc To Add One x on Right" org.eventb.theory.core.formula="suc(x)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="suc(zero) nAdd x"/>
</org.eventb.theory.core.rewriteRule>
</org.eventb.theory.core.proofRulesBlock>
<org.eventb.theory.core.proofRulesBlock name="5" org.eventb.core.label="Abelian Rewrites">
<org.eventb.theory.core.metaVariable name="'" org.eventb.core.identifier="x" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.metaVariable name="(" org.eventb.core.identifier="y" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.metaVariable name=")" org.eventb.core.identifier="z" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.rewriteRule name="*" org.eventb.core.label="rew1" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Bracket Left" org.eventb.theory.core.formula="x nAdd y nAdd z">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="(x nAdd y) nAdd z"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="+" org.eventb.core.label="rew2" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Bracket Right" org.eventb.theory.core.formula="x nAdd y nAdd z">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="x nAdd (y nAdd z)"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="," org.eventb.core.label="CommRewrite" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Commutive Swap" org.eventb.theory.core.formula="x nAdd y">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="y nAdd x"/>
</org.eventb.theory.core.rewriteRule>
</org.eventb.theory.core.proofRulesBlock>
<org.eventb.theory.core.newOperatorDefinition name="7" org.eventb.core.label="nMinus" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="INFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="Nat" org.eventb.core.identifier="x"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="Nat" org.eventb.core.identifier="y"/>
<org.eventb.theory.core.recursiveOperatorDefinition name=")" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="zero" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="O" org.eventb.core.label="one" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.directOperatorDefinition name="'" org.eventb.theory.core.formula="suc(zero)"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="Z" org.eventb.core.comment="Used in the binary representation of numbers." org.eventb.core.label="two" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.directOperatorDefinition name="'" org.eventb.theory.core.formula="suc(suc(zero))"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="P" org.eventb.core.label="ten" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.directOperatorDefinition name="'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero))))))))))"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.proofRulesBlock name="8" org.eventb.core.label="MoveSucArround">
<org.eventb.theory.core.metaVariable name="'" org.eventb.core.identifier="x" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.metaVariable name="(" org.eventb.core.identifier="y" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.rewriteRule name=")" org.eventb.core.label="sucLeft" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="sucOutsideAddition" org.eventb.theory.core.formula="suc(x) nAdd y">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="suc(x nAdd y)"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="*" org.eventb.core.label="sucRight" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="sucOutsideAddition" org.eventb.theory.core.formula="x nAdd suc(y)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="suc(x nAdd y)"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="+" org.eventb.core.label="sucIntoAddition" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="sucIntoAdditionLeft" org.eventb.theory.core.formula="suc(x nAdd y)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="suc(x) nAdd y"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="," org.eventb.core.label="sucIntoAddition2" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="sucIntoAdditionRight" org.eventb.theory.core.formula="suc(x nAdd y)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="x nAdd suc(y)"/>
</org.eventb.theory.core.rewriteRule>
</org.eventb.theory.core.proofRulesBlock>
<org.eventb.theory.core.proofRulesBlock name=":" org.eventb.core.label="AdditionReduction">
<org.eventb.theory.core.metaVariable name="'" org.eventb.core.identifier="x" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.metaVariable name="(" org.eventb.core.identifier="y" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.metaVariable name=")" org.eventb.core.identifier="z" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.rewriteRule name="*" org.eventb.core.label="x nAdd y = x nAdd z" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="false" org.eventb.theory.core.desc="Subtract $1 from Both sides" org.eventb.theory.core.formula="x nAdd y = x nAdd z">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="y = z"/>
</org.eventb.theory.core.rewriteRule>
</org.eventb.theory.core.proofRulesBlock>
<org.eventb.theory.core.theorem name="-" org.eventb.core.label="monoidThm" org.eventb.core.predicate="zero ↦ nAdd_P ∈ Monoid(Nat)"/>
<org.eventb.theory.core.theorem name=";" org.eventb.core.label="AddZeroRight" org.eventb.core.predicate="∀x·x nAdd zero = x"/>
<org.eventb.theory.core.theorem name="T" org.eventb.core.label="suc(x) ≠ x" org.eventb.core.predicate="∀x· suc(x) ≠ x"/>
<org.eventb.theory.core.theorem name="d" org.eventb.core.label="sucEquality" org.eventb.core.predicate="∀x, y·x = y ⇔ suc(x) = suc(y)"/>
<org.eventb.theory.core.theorem name="=" org.eventb.core.label="sucInAddition1" org.eventb.core.predicate="∀x, y· suc(x) nAdd y = suc(x nAdd y)"/>
<org.eventb.theory.core.theorem name="&gt;" org.eventb.core.label="sucInAddition2" org.eventb.core.predicate="∀x, y· x nAdd suc(y) = suc(x nAdd y)"/>
<org.eventb.theory.core.theorem name="?" org.eventb.core.label="sucSwapAddition3" org.eventb.core.predicate="∀x, y· suc(x) nAdd y = x nAdd suc(y)"/>
<org.eventb.theory.core.theorem name="@" org.eventb.core.label="sucSwapAddition4" org.eventb.core.predicate="∀x, y· x nAdd suc(y) = suc(x) nAdd y"/>
<org.eventb.theory.core.theorem name="M" org.eventb.core.label="nAddP is Associative" org.eventb.core.predicate="nAdd_P ∈ AssocOp(Nat)"/>
<org.eventb.theory.core.theorem name="N" org.eventb.core.label="nAddP is Commutative" org.eventb.core.predicate="nAdd_P ∈ CommOp(Nat)"/>
<org.eventb.theory.core.theorem name="A" org.eventb.core.comment="Check that nAddP is Abelian." org.eventb.core.label="nAddP is Abelian" org.eventb.core.predicate="nAdd_P ∈ AbelianOp(Nat)"/>
<org.eventb.theory.core.theorem name="B" org.eventb.core.label="Addition Reduction" org.eventb.core.predicate="∀x,y,z·((x nAdd y) = (x nAdd z)) ⇔ y = z"/>
<org.eventb.theory.core.theorem name="`" org.eventb.core.label="decr(suc(x)) = x" org.eventb.core.predicate="∀x·decrement(suc(x)) = x"/>
<org.eventb.theory.core.theorem name="a" org.eventb.core.label="suc(decr(x)) = x" org.eventb.core.predicate="∀x·x≠zero ⇔ suc(decrement(x)) = x"/>
<org.eventb.theory.core.theorem name="c" org.eventb.core.label="decrEquality oneway" org.eventb.core.predicate="∀x, y·x = y ⇒ decrement(x) = decrement(y)"/>
<org.eventb.theory.core.theorem name="b" org.eventb.core.label="decreEquality" org.eventb.core.predicate="∀x, y·x ≠ zero ∧ y ≠ zero ⇒ (x = y ⇔ decrement(x) = decrement(y))"/>
<org.eventb.theory.core.theorem name="o" org.eventb.core.label="decr(x) ≠ 0 ⇒ x ≠ 0" org.eventb.core.predicate="∀x·decrement(x) ≠ zero ⇒ x ≠ zero"/>
<org.eventb.theory.core.theorem name="G" org.eventb.core.label="MinusZero" org.eventb.core.predicate="∀x· x nMinus zero = x"/>
<org.eventb.theory.core.theorem name="J" org.eventb.core.label="zeroMinus" org.eventb.core.predicate="∀x·zero nMinus x = zero"/>
<org.eventb.theory.core.theorem name="H" org.eventb.core.label="x − x" org.eventb.core.predicate="∀x· x nMinus x = zero"/>
<org.eventb.theory.core.theorem name="C" org.eventb.core.label="AddMinus" org.eventb.core.predicate="∀x, y·(x nAdd y) nMinus y = x"/>
<org.eventb.theory.core.theorem name="D" org.eventb.core.label="AddMinus2" org.eventb.core.predicate="∀x, y·(x nAdd y) nMinus x = y"/>
<org.eventb.theory.core.theorem name="f" org.eventb.core.label="suc(x) nMinus x ≠ zero" org.eventb.core.predicate="∀x·suc(x) nMinus x ≠ zero "/>
<org.eventb.theory.core.theorem name="g" org.eventb.core.label="suc(x) nMinus x = one" org.eventb.core.predicate="∀x·suc(x) nMinus x = one"/>
<org.eventb.theory.core.theorem name="h" org.eventb.core.label="x − (x + a) = zero" org.eventb.core.predicate="∀x, a·x nMinus (x nAdd a) = zero"/>
<org.eventb.theory.core.proofRulesBlock name="K" org.eventb.core.label="Minus">
<org.eventb.theory.core.metaVariable name="'" org.eventb.core.identifier="x" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.metaVariable name="(" org.eventb.core.identifier="y" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.rewriteRule name=")" org.eventb.core.label="MinusZero" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Sub zero simp" org.eventb.theory.core.formula="x nMinus zero">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="x"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="*" org.eventb.core.label="zeroMinus" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="zeroMinus = zero" org.eventb.theory.core.formula="zero nMinus x">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="zero"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="+" org.eventb.core.label="minusSelf" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="x nMinus x = zero" org.eventb.theory.core.formula="x nMinus x">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="zero"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="," org.eventb.core.label="addMinus1" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="x + y - x = y" org.eventb.theory.core.formula="(x nAdd y) nMinus x">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="y"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="-" org.eventb.core.label="addMinus2" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="x + y - y = x" org.eventb.theory.core.formula="(x nAdd y) nMinus y">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="x"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="." org.eventb.core.label="decrement(suc(x)) = x" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="decrement(suc(x)) = x" org.eventb.theory.core.formula="decrement(suc(x))">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="x"/>
</org.eventb.theory.core.rewriteRule>
</org.eventb.theory.core.proofRulesBlock>
<org.eventb.theory.core.theorem name="e" org.eventb.core.label="suc(x) − y = 0 ⇒ x − y = 0" org.eventb.core.predicate="∀x, y·suc(x) nMinus y = zero ⇒ x nMinus y = zero"/>
<org.eventb.theory.core.theorem name="i" org.eventb.core.label="notEq implication" org.eventb.core.predicate="∀x, y·x ≠ y ⇔ (∃a·a ≠ zero ∧ (x nAdd a = y ∨ y nAdd a = x))"/>
<org.eventb.theory.core.theorem name="_" org.eventb.core.label="minusToDecrement" org.eventb.core.predicate="∀x, y·decrement(x) nMinus y = decrement(x nMinus y)"/>
<org.eventb.theory.core.theorem name="^" org.eventb.core.label="suc(x − y) = suc(x) − y" org.eventb.core.predicate="∀x, y·x nMinus y ≠ zero  ∨ x = y ⇔suc(x) nMinus y = suc(x nMinus y)"/>
<org.eventb.theory.core.theorem name="Q" org.eventb.core.label="zero add zero = zero" org.eventb.core.predicate="∀x, y· x nAdd y = zero ⇔ x = zero ∧ y = zero"/>
<org.eventb.theory.core.theorem name="r" org.eventb.core.label="x = x + y ⇒ y = zero" org.eventb.core.predicate="∀x, y·x = x nAdd y ⇒ y = zero"/>
<org.eventb.theory.core.proofRulesBlock name="R" org.eventb.core.label="Adding Zeros">
<org.eventb.theory.core.metaVariable name="'" org.eventb.core.identifier="x" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.metaVariable name="(" org.eventb.core.identifier="y" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.rewriteRule name=")" org.eventb.core.label="Adding Zeros to Conjuction" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="a + b = zero =&gt; a = zero &amp; b = zero" org.eventb.theory.core.formula="x nAdd y = zero">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="x = zero ∧ y = zero"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="*" org.eventb.core.label="Not equal to Zero" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="x + y ≠ 0 =&gt; x ≠ 0 or y ≠ 0 " org.eventb.theory.core.formula="x nAdd y ≠ zero">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="x ≠ zero ∨ y ≠ zero"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.inferenceRule name="+" org.eventb.core.label="inf1" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.desc="Describe Me!">
<org.eventb.theory.core.given name="'" org.eventb.core.predicate="x nAdd y = x" org.eventb.theory.core.hyp="true"/>
<org.eventb.theory.core.infer name="(" org.eventb.core.predicate="y = zero"/>
</org.eventb.theory.core.inferenceRule>
</org.eventb.theory.core.proofRulesBlock>
<org.eventb.theory.core.theorem name="S" org.eventb.core.label="x ≠ 0 ⇒ x + y ≠ 0" org.eventb.core.predicate="∀x, y·x ≠ zero ∨ y ≠ zero ⇔ (x nAdd y) ≠ zero"/>
<org.eventb.theory.core.newOperatorDefinition name="U" org.eventb.core.label="divMod" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.recursiveOperatorDefinition name="'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="zero" org.eventb.theory.core.formula="c ↦ zero"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.theory.core.formula="COND(suc(ns) = d, suc(c) ↦ zero, &#10;COND(suc(ns) nMinus d = zero, c ↦ suc(ns),&#10; divMod(suc(ns) nMinus d, d, suc(c))))"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="Nat" org.eventb.core.identifier="n"/>
<org.eventb.theory.core.operatorArgument name=")" org.eventb.core.expression="Nat" org.eventb.core.identifier="d"/>
<org.eventb.theory.core.operatorArgument name="*" org.eventb.core.expression="Nat" org.eventb.core.identifier="c"/>
<org.eventb.theory.core.operatorWDcondition name="+" org.eventb.core.predicate="d ≠ zero"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.theorem name="V" org.eventb.core.label="Check Minus" org.eventb.core.predicate="∀x·suc(suc(suc(suc(suc(x))))) nMinus suc(suc(x)) = suc(suc(suc(zero)))"/>
<org.eventb.theory.core.theorem name="p" org.eventb.core.label="x≠y ∧ x − y= 0 ⇒ notZero(y − x)" org.eventb.core.predicate="∀x, y·x ≠ y ∧ x nMinus y = zero ⇔ y nMinus x ≠ zero"/>
<org.eventb.theory.core.theorem name="q" org.eventb.core.label="x − y = zero ⇒ y = x + a" org.eventb.core.predicate="∀x, y· x nMinus y = zero ⇒ (∃a · x nAdd a = y)"/>
<org.eventb.theory.core.theorem name="j" org.eventb.core.label="x &lt; y ⇒ mod(x, y) = x" org.eventb.core.predicate="∀x, y, z· y ≠ zero ∧ x nMinus y = zero ∧ x ≠ y ⇒ divMod(x, y, zero) = z ↦ x"/>
<org.eventb.theory.core.theorem name="]" org.eventb.core.label="ModReduction" org.eventb.core.predicate="∀x, y·y ≠ zero ⇒ ((x nMinus y ≠ zero ∨ x = y) ⇒ prj2(divMod(x, y, zero)) = prj2(divMod(x nMinus y, y, zero)))"/>
<org.eventb.theory.core.theorem name="W" org.eventb.core.label="CheckDivMod" org.eventb.core.predicate="divMod(suc(suc(zero)), one, zero) = suc(suc(zero)) ↦ zero"/>
<org.eventb.theory.core.theorem name="X" org.eventb.core.label="CheckDivMod2" org.eventb.core.predicate="divMod(ten, suc(suc(suc(zero))), zero) = suc(suc(suc(zero))) ↦ suc(zero)"/>
<org.eventb.theory.core.theorem name="\" org.eventb.core.label="x nAdd y = x impl" org.eventb.core.predicate="∀x, y· x nAdd y = x ⇔ y = zero"/>
<org.eventb.theory.core.proofRulesBlock name="[" org.eventb.core.label="y + y = z + z ⇔ y = z">
<org.eventb.theory.core.metaVariable name="'" org.eventb.core.identifier="y" org.eventb.theory.core.type="Nat"/>
<org.eventb.theory.core.rewriteRule name="(" org.eventb.core.label="y + y = z + z ⇔ y = z" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="y + y = z + z ⇔ y = z" org.eventb.theory.core.formula="y nAdd y = z nAdd z">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="y = z"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.metaVariable name=")" org.eventb.core.identifier="z" org.eventb.theory.core.type="Nat"/>
</org.eventb.theory.core.proofRulesBlock>
</org.eventb.theory.core.theoryRoot>
