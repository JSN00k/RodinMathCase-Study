<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.theoryRoot org.eventb.core.configuration="org.eventb.theory.core.thy">
<org.eventb.theory.core.datatypeDefinition name="'" org.eventb.core.identifier="Nat">
<org.eventb.theory.core.datatypeConstructor name="'" org.eventb.core.identifier="zero"/>
<org.eventb.theory.core.datatypeConstructor name="(" org.eventb.core.identifier="suc">
<org.eventb.theory.core.constructorArgument name="'" org.eventb.core.identifier="prev" org.eventb.theory.core.type="Nat"/>
</org.eventb.theory.core.datatypeConstructor>
</org.eventb.theory.core.datatypeDefinition>
<org.eventb.theory.core.newOperatorDefinition name="(" org.eventb.core.label="increment" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="Nat" org.eventb.core.identifier="x"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="zero" org.eventb.theory.core.formula="suc(zero)"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.theory.core.formula="suc(suc(xs))"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name=")" org.eventb.core.label="nAdd" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="INFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="Nat" org.eventb.core.identifier="x"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="Nat" org.eventb.core.identifier="y"/>
<org.eventb.theory.core.recursiveOperatorDefinition name=")" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="zero" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="/" org.eventb.core.comment="Anything ending in P is a passable form of the operator above." org.eventb.core.label="nAdd_P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.directOperatorDefinition name="'" org.eventb.core.comment="Maybe this will make passing round operators easy." org.eventb.theory.core.formula="λx ↦ y·x↦y∈Nat×Nat ∣ x nAdd y"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="*" org.eventb.core.label="decrement" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="Nat" org.eventb.core.identifier="x"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.theory.core.formula="xs"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="zero" org.eventb.theory.core.formula="zero"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.importTheoryProject name="," org.eventb.theory.core.importTheoryProject="/Maths">
<org.eventb.theory.core.importTheory name="'" org.eventb.theory.core.importTheory="/Maths/Monoid.dtf|org.eventb.theory.core.deployedTheoryRoot#Monoid"/>
</org.eventb.theory.core.importTheoryProject>
<org.eventb.theory.core.theorem name="-" org.eventb.core.comment="MonoidPolly(zero) just creates a Monoid on the natural types i.e Monoid&lt;Nat&gt; &#10;unfortunatoinely there's no event B suntax to pass arround type inofmration so&#10;instead I've passed a variable of the relevent type." org.eventb.core.label="monoidThm" org.eventb.core.predicate="zero ↦ (λx ↦ y·x↦y∈Nat×Nat ∣ x nAdd y) ∈ MonoidPoly(zero)"/>
<org.eventb.theory.core.theorem name="0" org.eventb.core.comment="Check that nAddP is Associative." org.eventb.core.label="nAddP is Ascoiative" org.eventb.core.predicate="nAdd_P ∈ AssociativeOp ⦂ ℙ(ℙ((Nat × Nat) × Nat))"/>
<org.eventb.theory.core.proofRulesBlock name="1" org.eventb.core.label="Type rewrites">
<org.eventb.theory.core.rewriteRule name="*" org.eventb.core.label="nAdd_P is Associative" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Describe Me!" org.eventb.theory.core.formula="nAdd_P ∈ AssociativeOp">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="+" org.eventb.core.label="nAdd and zero form a monoid" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Describe Me!" org.eventb.theory.core.formula="zero ↦ nAdd_P ∈ MonoidPoly(zero)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.rewriteRule>
</org.eventb.theory.core.proofRulesBlock>
</org.eventb.theory.core.theoryRoot>
