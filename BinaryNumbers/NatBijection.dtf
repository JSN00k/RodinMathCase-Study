<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.deployedTheoryRoot org.eventb.core.accurate="true" org.eventb.core.comment="GENERATED THEORY FILE: !DO NOT CHANGE!" org.eventb.theory.core.modificationHashValue="72fd302e86b81194e3c826287e75d9b4" org.eventb.theory.core.outdated="true">
<org.eventb.theory.core.useTheory name="BinaryNaturals" org.eventb.core.scTarget="/BinaryNumbers/BinaryNaturals.dtf|org.eventb.theory.core.deployedTheoryRoot#BinaryNaturals"/>
<org.eventb.theory.core.useTheory name="BitwiseOpsExt" org.eventb.core.scTarget="/BinaryNumbers/BitwiseOpsExt.dtf|org.eventb.theory.core.deployedTheoryRoot#BitwiseOpsExt"/>
<org.eventb.theory.core.scNewOperatorDefinition name="(" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name=")" org.eventb.core.label="bn_toNat2" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="*" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scTheorem name="generatedBlocl" org.eventb.core.label="toNat(zero) = zero" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isZero(x)⇔bn_toNat(x)=(zero ⦂ Nat)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.theorem#1" org.eventb.theory.core.order="0"/>
<org.eventb.theory.core.scTheorem name="generatedBlocm" org.eventb.core.label="alternate toNat" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_toNat(cons(TRUE,x))=suc(bn_toNat(bn_decrement(cons(TRUE,x))))" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.theorem#\/" org.eventb.theory.core.order="1"/>
<org.eventb.theory.core.scTheorem name="generatedBlocn" org.eventb.core.label="alternate toNat2" org.eventb.core.predicate="∀x⦂List(BOOL)·¬bn_isZero(x)⇔bn_toNat(cons(FALSE,x))=suc(bn_toNat(cons(TRUE,bn_decrement(x))))" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.theorem#2" org.eventb.theory.core.order="2"/>
<org.eventb.theory.core.scTheorem name="generatedBloco" org.eventb.core.label="increment to suc" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_toNat(bn_increment(x))=suc(bn_toNat(x))" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.theorem#," org.eventb.theory.core.order="3"/>
<org.eventb.theory.core.scTheorem name="generatedBlocp" org.eventb.core.label="suc to incremnet" org.eventb.core.predicate="∀x⦂Nat·bn_toBin(suc(x)) bn_Eq bn_increment(bn_toBin(x))" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.theorem#." org.eventb.theory.core.order="4"/>
<org.eventb.theory.core.scTheorem name="generatedBlocq" org.eventb.core.label="toBin is normal" org.eventb.core.predicate="∀x⦂Nat·bn_isNormal(bn_toBin(x))" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.theorem#4" org.eventb.theory.core.order="5"/>
<org.eventb.theory.core.scTheorem name="generatedBlocr" org.eventb.core.label="increment outside addition" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.theorem#5" org.eventb.theory.core.order="6"/>
<org.eventb.theory.core.scTheorem name="generatedBlocs" org.eventb.core.label="equivelenceMaitained" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x bn_Eq y⇔bn_toNat(x)=bn_toNat(y)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.theorem#9" org.eventb.theory.core.order="7"/>
<org.eventb.theory.core.scTheorem name="generatedBloct" org.eventb.core.label="Addition Homomorphism" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·bn_toBin(x nAdd y) bn_Eq bn_toBin(x) bn_Add bn_toBin(y)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.theorem#3" org.eventb.theory.core.order="8"/>
<org.eventb.theory.core.scTheorem name="generatedBlocu" org.eventb.core.label="toNat addition Homomorphism" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_toNat(x bn_Add y)=bn_toNat(x) nAdd bn_toNat(y)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.theorem#:" org.eventb.theory.core.order="9"/>
<org.eventb.theory.core.scTheorem name="generatedBlocv" org.eventb.core.label="bijection1" org.eventb.core.predicate="∀x⦂Nat·bn_toNat(bn_toBin(x))=x" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.theorem#+" org.eventb.theory.core.order="10"/>
<org.eventb.theory.core.scTheorem name="generatedBlocw" org.eventb.core.label="Addition Homomorphism normal" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·bn_toBin(x nAdd y)=bn_toBin(x) bn_Add bn_toBin(y)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.theorem#6" org.eventb.theory.core.order="11"/>
<org.eventb.theory.core.scTheorem name="generatedBlocx" org.eventb.core.label="bijection2" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isNormal(x)⇒bn_toBin(bn_toNat(x))=x" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.theorem#-" org.eventb.theory.core.order="12"/>
<org.eventb.theory.core.scProofRulesBlock name="generatedBlock" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0">
<org.eventb.theory.core.scMetavariable name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scMetavariable name="aB" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scMetavariable name="aT" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scMetavariable name="xB" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scMetavariable name="xs" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scMetavariable name="a_" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scMetavariable name="xs_" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRewriteRule name="NatBijection.bn_toNat case 0" org.eventb.core.accurate="true" org.eventb.core.label="NatBijection.bn_toNat case 0" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_toNat expansion" org.eventb.theory.core.formula="bn_toNat(nil ⦂ List(BOOL))">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_toNat rhs" org.eventb.core.label="bn_toNat rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.formula="zero ⦂ Nat"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="NatBijection.bn_toNat case 1" org.eventb.core.accurate="true" org.eventb.core.label="NatBijection.bn_toNat case 1" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_toNat expansion" org.eventb.theory.core.formula="bn_toNat(cons(aB,aT))">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_toNat rhs" org.eventb.core.label="bn_toNat rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="NatBijection.bn_toNat2 case 0" org.eventb.core.accurate="true" org.eventb.core.label="NatBijection.bn_toNat2 case 0" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_toNat2 expansion" org.eventb.theory.core.formula="bn_toNat2(nil ⦂ List(BOOL))">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_toNat2 rhs" org.eventb.core.label="bn_toNat2 rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="NatBijection.bn_toNat2 case 1" org.eventb.core.accurate="true" org.eventb.core.label="NatBijection.bn_toNat2 case 1" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_toNat2 expansion" org.eventb.theory.core.formula="bn_toNat2(cons(xB,xs))">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_toNat2 rhs" org.eventb.core.label="bn_toNat2 rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="NatBijection.bn_toBin case 0" org.eventb.core.accurate="true" org.eventb.core.label="NatBijection.bn_toBin case 0" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_toBin expansion" org.eventb.theory.core.formula="bn_toBin(zero ⦂ Nat)">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_toBin rhs" org.eventb.core.label="bn_toBin rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="NatBijection.bn_toBin case 1" org.eventb.core.accurate="true" org.eventb.core.label="NatBijection.bn_toBin case 1" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_toBin expansion" org.eventb.theory.core.formula="bn_toBin(suc(xs_))">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_toBin rhs" org.eventb.core.label="bn_toBin rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs_))"/>
</org.eventb.theory.core.scRewriteRule>
</org.eventb.theory.core.scProofRulesBlock>
</org.eventb.theory.core.deployedTheoryRoot>
