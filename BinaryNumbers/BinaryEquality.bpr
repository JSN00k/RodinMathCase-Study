<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.prFile version="1">
<org.eventb.core.prProof name="EqualitySwap/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="p_tail,p_head,p_tail0,x,y,p_head0" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in goal" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p7">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p7">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p8"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p5"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p11"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p11"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p12,p13">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p13">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p14"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p19">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on cons(p_head,p_tail) bn_Eq nil" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p16,p20">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p20"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p21,p22"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p20"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=bn_LSB(nil)" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="p21">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p13" org.eventb.core.prInfHyps="p23"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p26">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on nil bn_Eq p_tail" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p26,p16">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p26"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="p26"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p27,p28">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head,p_tail)" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p27">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p30">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p29"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p5"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p32">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p28" org.eventb.core.prInfHyps="p33"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p29" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p29,p28"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on nil bn_Eq cons(p_head,p_tail)" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p16,p17">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on bn_isZero(cons(p_head,p_tail))" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p16,p18">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p18"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p18" org.eventb.core.prInfHyps="p19,p26"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p18"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="p19"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p34,p35">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p34">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p38">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p28" org.eventb.core.prInfHyps="p36"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p29" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p29,p28"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=bn_LSB(p_tail0)" org.eventb.core.prGoal="p38" org.eventb.core.prHyps="p35">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p41">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p39"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p37" org.eventb.core.prInfHyps="p40"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p37,p27"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p41" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on cons(p_head0,p_tail0) bn_Eq cons(bn_LSB(p_tail0),p_tail)" org.eventb.core.prHyps="p40">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p16,p43">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p40"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p43"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p43" org.eventb.core.prInfHyps="p44,p45"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p43"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=bn_LSB(cons(bn_LSB(p_tail0),p_tail))" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="p44">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p48">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p34" org.eventb.core.prInfHyps="p46"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p36" org.eventb.core.prInfHyps="p47"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p34,p36"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on p_tail0 bn_Eq bn_shiftLeft1(cons(bn_LSB(p_tail0),p_tail))" org.eventb.core.prHyps="p45">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p16,p49">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p45"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p49"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on x=cons(bn_LSB(cons(bn_LSB(p_tail0),p_tail)),p_tail0)" org.eventb.core.prHyps="p46">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p16,p50">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p46"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p50"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on p_tail bn_Eq cons(bn_LSB(cons(bn_LSB(p_tail0),p_tail)),p_tail0)" org.eventb.core.prHyps="p47">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p51,p16">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p47"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p51"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p48" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p52" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p52" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p53">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p53" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p53" org.eventb.core.prHyps="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p53" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p28" org.eventb.core.prInfHyps="p33"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p29" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p29,p28"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="p33"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p53" org.eventb.core.prHyps="p34,p54">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p53" org.eventb.core.prHyps="p34">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p55">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p28" org.eventb.core.prInfHyps="p36"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p29" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p29,p28"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p55" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p56" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p16"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p57">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p57" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p58">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p58" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p6"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="2"/>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="bn_LSB(nil ⦂ List(BOOL))=FALSE"/>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="p_tail bn_Eq cons(bn_LSB(cons(bn_LSB(p_tail0),p_tail)),p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="bn_LSB(p_tail0)=bn_LSB(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·y bn_Eq x⇒x bn_Eq y"/>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·(x bn_Eq y⇒y bn_Eq x)∧(y bn_Eq x⇒x bn_Eq y)"/>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="x=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq x">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="p_tail bn_Eq bn_shiftLeft1(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="p_tail bn_Eq bn_shiftLeft1(x)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x bn_Eq y⇔y bn_Eq x"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="x bn_Eq y⇒y bn_Eq x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="p_tail0 bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="p_tail bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="bn_LSB(p_tail0)=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="p_head0=bn_LSB(cons(bn_LSB(p_tail0),p_tail))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="y bn_Eq x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="FALSE=FALSE"/>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x bn_Eq y⇒y bn_Eq x"/>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="p_tail0 bn_Eq bn_shiftLeft1(cons(bn_LSB(p_tail0),p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="x=cons(bn_LSB(p_tail0),p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="p_head=bn_LSB(p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="p_head=bn_LSB(nil ⦂ List(BOOL))∧p_tail bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="y=cons(bn_LSB(p_tail0),p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="p_head=bn_LSB(x)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="p_tail bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="x bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="p_head=bn_LSB(x)∧p_tail bn_Eq bn_shiftLeft1(x)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="p_tail bn_Eq cons(bn_LSB(p_tail0),p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="p_tail bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="p_tail bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="x=cons(bn_LSB(cons(bn_LSB(p_tail0),p_tail)),p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq cons(bn_LSB(p_tail0),p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="x bn_Eq y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="p_head=bn_LSB(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="x=cons(bn_LSB(nil ⦂ List(BOOL)),p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p58" org.eventb.core.predicate="y bn_Eq x⇒x bn_Eq y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="(∀x⦂List(BOOL),y⦂List(BOOL)·x bn_Eq y⇒y bn_Eq x)∧(∀x⦂List(BOOL),y⦂List(BOOL)·y bn_Eq x⇒x bn_Eq y)"/>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="bn_LSB(p_tail0)=bn_LSB(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="p_head=bn_LSB(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="p_tail bn_Eq x">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="p_tail bn_Eq bn_shiftLeft1(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="x bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="bn_LSB(p_tail0)=bn_LSB(cons(bn_LSB(p_tail0),p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="y=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="p_head0=bn_LSB(cons(bn_LSB(p_tail0),p_tail))∧p_tail0 bn_Eq bn_shiftLeft1(cons(bn_LSB(p_tail0),p_tail))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRewrites"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="equality/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p6,p7">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p6">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p12">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p7"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="p_head=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="p_head=bn_LSB(cons(p_head,p_tail))∧p_tail bn_Eq bn_shiftLeft1(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="p_tail bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="x bn_Eq x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Eq x"/>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="p_tail bn_Eq bn_shiftLeft1(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="p_head=bn_LSB(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="x−yEquality/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="x,y" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=y" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst y)" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p5"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p4"/>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Eq x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Eq x"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="x=y⇒x bn_Eq y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x=y⇒x bn_Eq y"/>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="y bn_Eq y">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="x bn_Eq y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="y">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="RemoveZerosPreservesEquality/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,p_tail0,x,p_head0" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p7,p8">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p8">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p11"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p15">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst TRUE,p_tail,bn_remTrailingZeros(p_tail))" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p16" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p18"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀xB,y,z·cons(xB,y) bn_Eq cons(xB,z)⇔y bn_Eq z"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p19">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p19" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p20">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p21"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_remTrailingZeros(p_tail)=nil)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p25">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in goal" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p26">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail=nil" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p26">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p29">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p3"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p21" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p25" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p21,p25,p7"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p31">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p33">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p35">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p36">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_remTrailingZeros(p_tail)=nil" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p25">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p38">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p38" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p42">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p21" org.eventb.core.prInfHyps="p39"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p25" org.eventb.core.prInfHyps="p40"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p37" org.eventb.core.prInfHyps="p41"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p21,p37,p25"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (bn_isZero(cons(p_head0,p_tail0)))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p43">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(p_head0,p_tail0))=nil" org.eventb.core.prHyps="p40">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4,p44">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p40"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p44"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∨ to ⇒ in p_head0=TRUE∨¬bn_isZero(p_tail0)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p44" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p45"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p45"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p45" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p46"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="mp impl (p_head0=FALSE⇒¬bn_isZero(p_tail0))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p46" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p47"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p47"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p47" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p48"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="mp impl (bn_isZero(p_tail0)⇒p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p48" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p45"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p45"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p45" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p46"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p43" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p49" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p49" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p50">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on cons(p_head0,p_tail0) bn_Eq nil" org.eventb.core.prHyps="p41">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p51,p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p41"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p51"/>
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p51" org.eventb.core.prInfHyps="p52,p53"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p51"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=bn_LSB(nil)" org.eventb.core.prGoal="p50" org.eventb.core.prHyps="p52">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p56">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p36" org.eventb.core.prInfHyps="p54"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p39" org.eventb.core.prInfHyps="p55"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p39,p36"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p56" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p57">
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p40"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p58">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head0,p_tail0)" org.eventb.core.prHyps="p58">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p59">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p58"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p57" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p57">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p59" org.eventb.core.prHyps="p40" org.eventb.core.prInfHyps="p60"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p60" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p18"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e4"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀a,b·bn_remTrailingZeros(cons(a,b))=nil⇔a=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p43">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p61">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p61" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p62">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p58">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head0,p_tail0)" org.eventb.core.prHyps="p58">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p59">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p58"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p59" org.eventb.core.prHyps="p40" org.eventb.core.prInfHyps="p63"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p63" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p57,p50"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p62" org.eventb.core.prHyps="p50">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p69">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p36" org.eventb.core.prInfHyps="p64"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p39" org.eventb.core.prInfHyps="p65"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p40" org.eventb.core.prInfHyps="p66"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p41" org.eventb.core.prInfHyps="p67"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p43" org.eventb.core.prInfHyps="p68"/>
<org.eventb.core.prHypAction name="DESELECT5" org.eventb.core.prHyps="p41,p39,p43,p36,p40"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p69" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p70" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p70" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p33">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p71">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p71" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p67" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p67" org.eventb.core.prHyps="p67"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e4"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀a,b·bn_remTrailingZeros(cons(a,b))=nil⇔a=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p43"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.2.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p72">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in goal" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p26">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail=nil" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p26">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p29">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p3"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p21" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p72" org.eventb.core.prInfHyps="p73"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p21,p72,p7"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p74" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p74" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p75" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p75" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p31">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p33">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p35">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p36">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p78">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p76"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p21" org.eventb.core.prInfHyps="p39"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p72" org.eventb.core.prInfHyps="p77"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p21,p72,p7"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p78" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p79" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r19" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in goal" org.eventb.core.prGoal="p79" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p80">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p80" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p81">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p82">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p82" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p83"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head0,p_tail0)" org.eventb.core.prHyps="p83">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p84">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p83"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p84" org.eventb.core.prHyps="p77" org.eventb.core.prInfHyps="p85"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p85" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p86"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p81" org.eventb.core.prHyps="p86">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p87">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p87" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p88">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p15">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst FALSE,cons(p_head0,p_tail0),bn_remTrailingZeros(cons(p_head0,p_tail0)))" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p89">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p88" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p88">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p89" org.eventb.core.prHyps="p76" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p18"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e5,e6,e7"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀xB,y,z·cons(xB,y) bn_Eq cons(xB,z)⇔y bn_Eq z"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e4"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀a,b·bn_remTrailingZeros(cons(a,b))≠nil⇔a=TRUE∨¬bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.2.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p25"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p10"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p83" org.eventb.core.predicate="∀a⦂BOOL,b⦂List(BOOL)·¬bn_remTrailingZeros(cons(a,b))=(nil ⦂ List(BOOL))⇔a=TRUE∨¬bn_isZero(b)"/>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL)) bn_Eq COND(¬bn_isZero(nil ⦂ List(BOOL)),cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL))),nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="bn_LSB(nil ⦂ List(BOOL))=FALSE"/>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq COND(¬bn_isZero(p_tail),cons(FALSE,nil ⦂ List(BOOL)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="∀xB⦂BOOL,y⦂List(BOOL),z⦂List(BOOL)·cons(xB,y) bn_Eq cons(xB,z)⇔y bn_Eq z"/>
<org.eventb.core.prPred name="p82" org.eventb.core.predicate="∀a⦂BOOL,b⦂List(BOOL)·bn_remTrailingZeros(cons(a,b))≠(nil ⦂ List(BOOL))⇔a=TRUE∨¬bn_isZero(b)"/>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p60" org.eventb.core.predicate="⊤⇔p_head0=FALSE∧⊥">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p76" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq bn_remTrailingZeros(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="cons(FALSE,cons(p_head0,p_tail0)) bn_Eq COND(¬bn_isZero(cons(p_head0,p_tail0)),cons(FALSE,nil ⦂ List(BOOL)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p88" org.eventb.core.predicate="cons(FALSE,cons(p_head0,p_tail0)) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p74" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL)) bn_Eq COND(¬bn_isZero(nil ⦂ List(BOOL)),cons(FALSE,nil ⦂ List(BOOL)),nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="p_head0=bn_LSB(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p73" org.eventb.core.predicate="¬bn_remTrailingZeros(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p58" org.eventb.core.predicate="∀a⦂BOOL,b⦂List(BOOL)·bn_remTrailingZeros(cons(a,b))=(nil ⦂ List(BOOL))⇔a=FALSE∧bn_isZero(b)"/>
<org.eventb.core.prPred name="p64" org.eventb.core.predicate="p_tail=cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p61" org.eventb.core.predicate="cons(FALSE,cons(p_head0,p_tail0)) bn_Eq COND(¬⊤,cons(FALSE,nil ⦂ List(BOOL)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL)) bn_Eq COND(¬⊤,cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL))),nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p59" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head0,p_tail0))=(nil ⦂ List(BOOL))⇔p_head0=FALSE∧bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p71" org.eventb.core.predicate="cons(FALSE,p_tail0) bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Eq cons(TRUE,bn_remTrailingZeros(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p62" org.eventb.core.predicate="cons(FALSE,cons(p_head0,p_tail0)) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="FALSE=FALSE"/>
<org.eventb.core.prPred name="p77" org.eventb.core.predicate="¬bn_remTrailingZeros(cons(p_head0,p_tail0))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p63" org.eventb.core.predicate="⊤⇔p_head0=FALSE∧bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p70" org.eventb.core.predicate="FALSE=bn_LSB(nil ⦂ List(BOOL))∧cons(FALSE,p_tail0) bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p80" org.eventb.core.predicate="cons(FALSE,cons(p_head0,p_tail0)) bn_Eq COND(¬p_head0=FALSE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(cons(p_head0,p_tail0))),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="COND(bn_isZero(p_tail0)⇒p_head0=TRUE,cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="p_tail0 bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p65" org.eventb.core.predicate="x=cons(FALSE,cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p79" org.eventb.core.predicate="cons(FALSE,cons(p_head0,p_tail0)) bn_Eq COND(¬(p_head0=FALSE∧bn_isZero(p_tail0)),cons(FALSE,bn_remTrailingZeros(cons(p_head0,p_tail0))),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p78" org.eventb.core.predicate="cons(FALSE,cons(p_head0,p_tail0)) bn_Eq COND(¬bn_isZero(cons(p_head0,p_tail0)),cons(FALSE,bn_remTrailingZeros(cons(p_head0,p_tail0))),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="⊥⇔⊤"/>
<org.eventb.core.prPred name="p75" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL)) bn_Eq COND(¬⊤,cons(FALSE,nil ⦂ List(BOOL)),nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq bn_remTrailingZeros(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="p_tail bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p86" org.eventb.core.predicate="p_head0=TRUE∨¬bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="p_tail=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq bn_remTrailingZeros(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p69" org.eventb.core.predicate="cons(FALSE,cons(FALSE,p_tail0)) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Eq bn_remTrailingZeros(x)"/>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="COND(p_head0=TRUE∨¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq COND(¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Eq bn_remTrailingZeros(cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p68" org.eventb.core.predicate="bn_isZero(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="p_tail bn_Eq bn_remTrailingZeros(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="p_head0=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="p_tail=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="FALSE=bn_LSB(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p89" org.eventb.core.predicate="cons(FALSE,cons(p_head0,p_tail0)) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(p_head0,p_tail0)))⇔cons(p_head0,p_tail0) bn_Eq bn_remTrailingZeros(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="x=cons(FALSE,cons(bn_LSB(nil ⦂ List(BOOL)),p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head0,p_tail0))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="COND(¬¬bn_isZero(p_tail0)⇒¬p_head0=FALSE,cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="x=cons(FALSE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="COND(¬p_head0=TRUE⇒¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="FALSE=bn_LSB(nil ⦂ List(BOOL))∧(nil ⦂ List(BOOL)) bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="x bn_Eq bn_remTrailingZeros(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="x=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p72" org.eventb.core.predicate="¬bn_remTrailingZeros(p_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p66" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,p_tail0))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p87" org.eventb.core.predicate="cons(FALSE,cons(p_head0,p_tail0)) bn_Eq COND(⊤,cons(FALSE,bn_remTrailingZeros(cons(p_head0,p_tail0))),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Eq cons(TRUE,bn_remTrailingZeros(p_tail))⇔p_tail bn_Eq bn_remTrailingZeros(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Eq COND(TRUE=TRUE∨¬bn_isZero(p_tail),cons(TRUE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="p_tail=cons(bn_LSB(nil ⦂ List(BOOL)),p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p85" org.eventb.core.predicate="¬⊥⇔p_head0=TRUE∨¬bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq COND(FALSE=TRUE∨¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="x=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p84" org.eventb.core.predicate="¬bn_remTrailingZeros(cons(p_head0,p_tail0))=(nil ⦂ List(BOOL))⇔p_head0=TRUE∨¬bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq bn_remTrailingZeros(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="COND(p_head0=FALSE⇒¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p81" org.eventb.core.predicate="cons(FALSE,cons(p_head0,p_tail0)) bn_Eq COND(p_head0=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(cons(p_head0,p_tail0))),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="bn_isZero(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="p_head0=bn_LSB(nil ⦂ List(BOOL))∧p_tail0 bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p67" org.eventb.core.predicate="cons(FALSE,p_tail0) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="p_head0=FALSE∧bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="bn_remTrailingZeros(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="TRUE"/>
<org.eventb.core.prExpr name="e5" org.eventb.core.expression="FALSE"/>
<org.eventb.core.prExpr name="e6" org.eventb.core.expression="cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e7" org.eventb.core.expression="bn_remTrailingZeros(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.cut"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
<org.eventb.core.prReas name="r17" org.eventb.core.prRID="org.eventb.core.seqprover.mngHyp"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r14" org.eventb.core.prRID="org.eventb.core.seqprover.disjToImplRewrites"/>
<org.eventb.core.prReas name="r16" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r15" org.eventb.core.prRID="org.eventb.core.seqprover.doubleImplGoalRewrites"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r19" org.eventb.core.prRID="org.eventb.core.seqprover.rn"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r18" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.dtDistinctCase"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="Strip cons/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="zB,yB,y,z" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees yB,zB,y,z)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="yB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="zB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p6,p7">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on y bn_Eq bn_shiftLeft1(cons(zB,z))" org.eventb.core.prHyps="p7">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p9"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p6"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p9,p6">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p6"/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p9"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="yB=zB∧y bn_Eq bn_shiftLeft1(cons(zB,z))⇔y bn_Eq z∧yB=zB">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="yB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="zB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="yB=zB∧y bn_Eq bn_shiftLeft1(cons(zB,z))⇒y bn_Eq z∧yB=zB">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="yB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="zB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="y bn_Eq z∧yB=zB">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="yB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="zB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀yB⦂BOOL,zB⦂BOOL,y⦂List(BOOL),z⦂List(BOOL)·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="yB=zB">
<org.eventb.core.prIdent name="yB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="zB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="y bn_Eq z∧yB=zB⇒yB=zB∧y bn_Eq bn_shiftLeft1(cons(zB,z))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="yB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="zB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="yB=zB∧y bn_Eq bn_shiftLeft1(cons(zB,z))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="yB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="zB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="yB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="zB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="y bn_Eq z">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="y bn_Eq bn_shiftLeft1(cons(zB,z))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="zB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="yB=bn_LSB(cons(zB,z))∧y bn_Eq bn_shiftLeft1(cons(zB,z))⇔y bn_Eq z∧yB=zB">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="yB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="zB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRewrites"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="thm1/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="x,xB" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees xB,x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_remTrailingZeros(x)=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_remTrailingZeros(cons(xB,x))=cons(xB,x)⇒bn_remTrailingZeros(x)=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="bn_remTrailingZeros(cons(xB,x))=cons(xB,x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀xB⦂BOOL,x⦂List(BOOL)·bn_remTrailingZeros(cons(xB,x))=cons(xB,x)⇒bn_remTrailingZeros(x)=x"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="remZeroImpl/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="a,b" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees a,b)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(a,b))=nil" org.eventb.core.prHyps="p3">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p6,p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∨ to ⇒ in a=TRUE∨¬bn_isZero(b)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p7" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p8"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p8" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p9"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p9" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p10"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p10" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p11"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p11"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p12">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(a,b))=nil" org.eventb.core.prHyps="p3">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p6,p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p7" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p13"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p13" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p11"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p11"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p5,p12">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with a=FALSE" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="p6">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_isZero(b)">
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="COND(FALSE=TRUE∨¬⊤,cons(FALSE,bn_remTrailingZeros(b)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="COND(⊥⇒¬bn_isZero(b),cons(a,bn_remTrailingZeros(b)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="COND(a=TRUE∨¬⊥,cons(a,bn_remTrailingZeros(b)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="COND(a=TRUE∨¬bn_isZero(b),cons(a,bn_remTrailingZeros(b)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_remTrailingZeros(cons(a,b))=(nil ⦂ List(BOOL))⇔a=FALSE∧bn_isZero(b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="a=FALSE">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="bn_remTrailingZeros(cons(a,b))=(nil ⦂ List(BOOL))⇒a=FALSE∧bn_isZero(b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,b))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="a=FALSE∧bn_isZero(b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="COND(¬a=TRUE⇒¬bn_isZero(b),cons(a,bn_remTrailingZeros(b)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="a=FALSE∧bn_isZero(b)⇒bn_remTrailingZeros(cons(a,b))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="COND(FALSE=TRUE∨¬bn_isZero(b),cons(FALSE,bn_remTrailingZeros(b)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_remTrailingZeros(cons(a,b))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀a⦂BOOL,b⦂List(BOOL)·bn_remTrailingZeros(cons(a,b))=(nil ⦂ List(BOOL))⇔a=FALSE∧bn_isZero(b)"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="COND(a=FALSE⇒¬bn_isZero(b),cons(a,bn_remTrailingZeros(b)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRewrites"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.disjToImplRewrites"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="remZeroImpl2/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="a,b" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees a,b)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on ¬bn_remTrailingZeros(cons(a,b))=nil" org.eventb.core.prHyps="p4">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p6,p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p7" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p8"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p8" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p9"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p9"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p6">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀a⦂BOOL,b⦂List(BOOL)·¬bn_remTrailingZeros(cons(a,b))=(nil ⦂ List(BOOL))⇔a=TRUE∨¬bn_isZero(b)"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="¬COND(⊥∨¬⊤,cons(a,bn_remTrailingZeros(b)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="a=TRUE∨¬bn_isZero(b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀a⦂BOOL,b⦂List(BOOL)·bn_remTrailingZeros(cons(a,b))≠(nil ⦂ List(BOOL))⇔a=TRUE∨¬bn_isZero(b)"/>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="¬bn_remTrailingZeros(cons(a,b))=(nil ⦂ List(BOOL))⇒a=TRUE∨¬bn_isZero(b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="¬COND(a=TRUE∨¬bn_isZero(b),cons(a,bn_remTrailingZeros(b)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="¬bn_remTrailingZeros(cons(a,b))=(nil ⦂ List(BOOL))⇔a=TRUE∨¬bn_isZero(b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="a=TRUE∨¬bn_isZero(b)⇒¬bn_remTrailingZeros(cons(a,b))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="¬bn_remTrailingZeros(cons(a,b))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="¬COND(⊤,cons(a,bn_remTrailingZeros(b)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRewrites"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="Transitivity/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="p_tail,y_head,p_tail1,p_head,p_tail0,x,y,z,y_tail,p_head1,p_head0" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in goal" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y,z)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p5,p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with z=nil" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p8">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p9"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p5"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p16,p17">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p19">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on cons(p_head,p_tail) bn_Eq y" org.eventb.core.prHyps="p18">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p23,p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p18"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p23"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p23" org.eventb.core.prInfHyps="p24,p25"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p23"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=bn_LSB(y)" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p27">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p17" org.eventb.core.prInfHyps="p26"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p28">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst y)" org.eventb.core.prHyps="p28">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p29">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p28"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with y bn_Eq nil⇔bn_isZero(y)" org.eventb.core.prHyps="p29">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p9" org.eventb.core.prInfHyps="p30"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p29" org.eventb.core.prHyps="p9,p30" org.eventb.core.prInfHyps="p31"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p31"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in goal" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p32">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p32">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p35">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p24" org.eventb.core.prInfHyps="p21"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p25" org.eventb.core.prInfHyps="p33"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p26" org.eventb.core.prInfHyps="p34"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p25,p24,p26,p30"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p37">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p37">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p42">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p24" org.eventb.core.prInfHyps="p38"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p25" org.eventb.core.prInfHyps="p39"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p26" org.eventb.core.prInfHyps="p40"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p41"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p25,p24,p26,p30"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (p_head0=FALSE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p43">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on bn_isZero(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p41">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p44,p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p41"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p44"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p44" org.eventb.core.prInfHyps="p43,p45"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p44"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p43" org.eventb.core.prHyps="p43"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p43">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p51">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p37" org.eventb.core.prInfHyps="p46"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p38" org.eventb.core.prInfHyps="p47"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p39" org.eventb.core.prInfHyps="p48"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p40" org.eventb.core.prInfHyps="p49"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p41" org.eventb.core.prInfHyps="p50"/>
<org.eventb.core.prHypAction name="DESELECT5" org.eventb.core.prHyps="p37,p38,p41,p39,p40"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p51" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p43"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Eq nil⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p33">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="p16"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p52,p53">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with z=cons(p_head,p_tail)" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p52">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p55">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p54"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p5"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p55" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p55" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p55" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p57">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p53" org.eventb.core.prInfHyps="p56"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p53,p6"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p58">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst y)" org.eventb.core.prHyps="p58">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p59">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p58"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with nil bn_Eq y⇔bn_isZero(y)" org.eventb.core.prHyps="p59">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p12" org.eventb.core.prInfHyps="p30"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p59" org.eventb.core.prHyps="p12,p30" org.eventb.core.prInfHyps="p31"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p31"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p57" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p60" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p60" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p61" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p61" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (y=nil)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p32">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prHyps="p32">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p54" org.eventb.core.prInfHyps="p57"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p54,p30"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on nil bn_Eq cons(p_head,p_tail)" org.eventb.core.prHyps="p57">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14,p60">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p57"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p60"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p62">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,p_tail)" org.eventb.core.prHyps="p62">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p63">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p62"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p63" org.eventb.core.prHyps="p60" org.eventb.core.prInfHyps="p64"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p64" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p65"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p65"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e1,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀aB,b·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p66">
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (∃y_head,y_tail·y=cons(y_head,y_tail))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p67">
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in goal" org.eventb.core.prGoal="p67" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p67" org.eventb.core.prHyps="p32">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p32" org.eventb.core.prHyps="p66" org.eventb.core.prInfHyps="p65"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p65"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p67" org.eventb.core.prHyps="p37">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p67" org.eventb.core.prHyps="p37">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p70">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p54" org.eventb.core.prInfHyps="p68"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p41"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p66" org.eventb.core.prInfHyps="p69"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p54,p66,p30"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p70" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p71">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p69"/>
<org.eventb.core.prRule name="r19" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ goal (inst p_head0,p_tail0)" org.eventb.core.prGoal="p71" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p72">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p72" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e4"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p67">
<org.eventb.core.prRule name="r20" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ hyp (∃y_head,y_tail·y=cons(y_head,y_tail))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p67" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p73">
<org.eventb.core.prIdent name="y_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prHypAction>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p73"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(y_head,y_tail)" org.eventb.core.prHyps="p73">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p54" org.eventb.core.prInfHyps="p74"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p75"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p66" org.eventb.core.prInfHyps="p76"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p54,p66,p30"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p76"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on cons(y_head,y_tail) bn_Eq cons(p_head,p_tail)" org.eventb.core.prHyps="p74">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14,p77">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p74"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p77"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p77" org.eventb.core.prInfHyps="p78,p79"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p77"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y_head=bn_LSB(cons(p_head,p_tail))" org.eventb.core.prHyps="p78">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p73" org.eventb.core.prInfHyps="p80"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p75" org.eventb.core.prInfHyps="p81"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p73,p75"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on y=cons(bn_LSB(cons(p_head,p_tail)),y_tail)" org.eventb.core.prHyps="p80">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p82,p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p80"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p82"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on bn_isZero(cons(bn_LSB(cons(p_head,p_tail)),y_tail))" org.eventb.core.prHyps="p81">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14,p83">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p81"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p83"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p62">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,y_tail)" org.eventb.core.prHyps="p62">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p84">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p62"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p84" org.eventb.core.prHyps="p83" org.eventb.core.prInfHyps="p85"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p85" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p65"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p65"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e1,e5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀aB,b·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p67"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p32"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p86">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on nil bn_Eq p_tail" org.eventb.core.prHyps="p56">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p86,p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p56"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p86"/>
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p86" org.eventb.core.prHyps="p86"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·nil bn_Eq x⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p55" org.eventb.core.prHyps="p87,p88">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p55" org.eventb.core.prHyps="p87">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p68">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p89"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p53" org.eventb.core.prInfHyps="p90"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p53,p6"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p68" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p91" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p91" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p92">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p92" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p93" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on cons(p_head0,p_tail0) bn_Eq y" org.eventb.core.prHyps="p89">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14,p94">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p89"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p94"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p94" org.eventb.core.prInfHyps="p95,p96"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p94"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=bn_LSB(y)" org.eventb.core.prGoal="p93" org.eventb.core.prHyps="p95">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p99">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p87" org.eventb.core.prInfHyps="p97"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p90" org.eventb.core.prInfHyps="p98"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p90,p87"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p99" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p99" org.eventb.core.prHyps="p32">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p99" org.eventb.core.prHyps="p32">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p104">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p54" org.eventb.core.prInfHyps="p57"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p95" org.eventb.core.prInfHyps="p100"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p96" org.eventb.core.prInfHyps="p101"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p97" org.eventb.core.prInfHyps="p102"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p98" org.eventb.core.prInfHyps="p103"/>
<org.eventb.core.prHypAction name="DESELECT5" org.eventb.core.prHyps="p95,p96,p97,p54,p98"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p104" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p105" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on p_head0=bn_LSB(nil)" org.eventb.core.prHyps="p100">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p43,p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p100"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p43"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on p_tail0 bn_Eq bn_shiftLeft1(nil)" org.eventb.core.prHyps="p101">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14,p106">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p101"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p106"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on cons(bn_LSB(nil),p_tail0) bn_Eq p_tail" org.eventb.core.prHyps="p103">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p107,p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p103"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p107"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on cons(FALSE,p_tail0) bn_Eq p_tail" org.eventb.core.prHyps="p107">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p108,p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p107"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p108"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p108" org.eventb.core.prInfHyps="p109,p110"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p108"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on nil bn_Eq cons(p_head,p_tail)" org.eventb.core.prHyps="p57">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14,p60">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p57"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p60"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p62">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,p_tail)" org.eventb.core.prHyps="p62">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p63">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p62"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p105" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p105">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p63" org.eventb.core.prHyps="p60" org.eventb.core.prInfHyps="p64"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p64" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p65"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p65"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e1,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀aB,b·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p99" org.eventb.core.prHyps="p111,p112">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head1,p_tail1)" org.eventb.core.prGoal="p99" org.eventb.core.prHyps="p111">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p118">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p54" org.eventb.core.prInfHyps="p113"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p95" org.eventb.core.prInfHyps="p114"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p96" org.eventb.core.prInfHyps="p115"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p97" org.eventb.core.prInfHyps="p116"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p98" org.eventb.core.prInfHyps="p117"/>
<org.eventb.core.prHypAction name="DESELECT5" org.eventb.core.prHyps="p95,p96,p97,p54,p98"/>
<org.eventb.core.prRule name="r21" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with bn_LSB(p_tail1)=p_head" org.eventb.core.prGoal="p118" org.eventb.core.prHyps="p112">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p122">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p52" org.eventb.core.prInfHyps="p119"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p88" org.eventb.core.prInfHyps="p120"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p113" org.eventb.core.prInfHyps="p121"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p113,p52,p88"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p122" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p123" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on cons(p_head1,p_tail1) bn_Eq cons(bn_LSB(p_tail1),p_tail)" org.eventb.core.prHyps="p121">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14,p124">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p121"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p124"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p124" org.eventb.core.prInfHyps="p125,p126"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p124"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head1=bn_LSB(cons(bn_LSB(p_tail1),p_tail))" org.eventb.core.prGoal="p123" org.eventb.core.prHyps="p125">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p132">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p111" org.eventb.core.prInfHyps="p127"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p114" org.eventb.core.prInfHyps="p128"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p115" org.eventb.core.prInfHyps="p129"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p116" org.eventb.core.prInfHyps="p130"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p117" org.eventb.core.prInfHyps="p131"/>
<org.eventb.core.prHypAction name="DESELECT5" org.eventb.core.prHyps="p114,p111,p115,p116,p117"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p132" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p133" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p133" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p134">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p134" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p135" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (y=nil)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p32">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prHyps="p32">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p54" org.eventb.core.prInfHyps="p57"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p89" org.eventb.core.prInfHyps="p136"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p54,p89"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p66"/>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p32"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p137">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y,z)" org.eventb.core.prGoal="p137" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p138">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p138" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p139" org.eventb.core.prHyps="p7">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p139" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6"/>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="3"/>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p101" org.eventb.core.predicate="p_tail0 bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p121" org.eventb.core.predicate="cons(p_head1,p_tail1) bn_Eq cons(bn_LSB(p_tail1),p_tail)">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="bn_LSB(nil ⦂ List(BOOL))=FALSE"/>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="x=cons(bn_LSB(cons(FALSE,p_tail0)),p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p120" org.eventb.core.predicate="p_tail0 bn_Eq cons(bn_LSB(p_tail1),p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p84" org.eventb.core.predicate="bn_isZero(cons(p_head,y_tail))⇔p_head=FALSE∧bn_isZero(y_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="bn_LSB(cons(FALSE,p_tail0))=FALSE">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p83" org.eventb.core.predicate="bn_isZero(cons(p_head,y_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p123" org.eventb.core.predicate="p_head1=bn_LSB(p_tail1)">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="p_head=bn_LSB(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p72" org.eventb.core.predicate="p_head0=p_head0∧p_tail0=p_tail0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p66" org.eventb.core.predicate="¬y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p87" org.eventb.core.predicate="x=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p99" org.eventb.core.predicate="bn_LSB(y)=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p73" org.eventb.core.predicate="y=cons(y_head,y_tail)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p102" org.eventb.core.predicate="x=cons(bn_LSB(nil ⦂ List(BOOL)),p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="p_tail bn_Eq bn_shiftLeft1(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p64" org.eventb.core.predicate="⊤⇔⊥∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="⊤⇔⊤"/>
<org.eventb.core.prPred name="p135" org.eventb.core.predicate="p_tail0 bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="z=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p71" org.eventb.core.predicate="∃y_head⦂BOOL,y_tail⦂List(BOOL)·p_head0=y_head∧p_tail0=y_tail">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p126" org.eventb.core.predicate="p_tail1 bn_Eq bn_shiftLeft1(cons(bn_LSB(p_tail1),p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL),z⦂List(BOOL)·x bn_Eq y∧y bn_Eq z⇔x bn_Eq z"/>
<org.eventb.core.prPred name="p81" org.eventb.core.predicate="bn_isZero(cons(bn_LSB(cons(p_head,p_tail)),y_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p107" org.eventb.core.predicate="cons(FALSE,p_tail0) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p112" org.eventb.core.predicate="bn_LSB(p_tail1)=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p91" org.eventb.core.predicate="p_head0=bn_LSB(cons(p_head,p_tail))∧p_tail0 bn_Eq bn_shiftLeft1(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="x=cons(bn_LSB(cons(p_head0,p_tail0)),p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p134" org.eventb.core.predicate="p_tail0 bn_Eq bn_shiftLeft1(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="x bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p69" org.eventb.core.predicate="¬cons(p_head0,p_tail0)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p122" org.eventb.core.predicate="bn_LSB(cons(p_head1,p_tail1))=bn_LSB(p_tail1)">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="p_head=bn_LSB(nil ⦂ List(BOOL))∧p_tail bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="bn_isZero(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p95" org.eventb.core.predicate="p_head0=bn_LSB(y)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p75" org.eventb.core.predicate="bn_isZero(cons(y_head,y_tail))">
<org.eventb.core.prIdent name="y_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="x bn_Eq y∧y bn_Eq z⇒x bn_Eq z">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p82" org.eventb.core.predicate="y=cons(p_head,y_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="p_head=bn_LSB(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p90" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p108" org.eventb.core.predicate="FALSE=bn_LSB(p_tail)∧p_tail0 bn_Eq bn_shiftLeft1(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p67" org.eventb.core.predicate="∃y_head⦂BOOL,y_tail⦂List(BOOL)·y=cons(y_head,y_tail)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="x bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p125" org.eventb.core.predicate="p_head1=bn_LSB(cons(bn_LSB(p_tail1),p_tail))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="bn_isZero(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="p_head0=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p115" org.eventb.core.predicate="p_tail0 bn_Eq bn_shiftLeft1(cons(p_head1,p_tail1))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p132" org.eventb.core.predicate="bn_LSB(cons(bn_LSB(p_tail1),p_tail))=bn_LSB(p_tail1)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="x bn_Eq y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p96" org.eventb.core.predicate="p_tail0 bn_Eq bn_shiftLeft1(y)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p65" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="bn_LSB(y)=FALSE">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p133" org.eventb.core.predicate="bn_LSB(p_tail1)=bn_LSB(p_tail1)">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p106" org.eventb.core.predicate="p_tail0 bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p61" org.eventb.core.predicate="p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p86" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p104" org.eventb.core.predicate="bn_LSB(nil ⦂ List(BOOL))=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p128" org.eventb.core.predicate="p_head0=bn_LSB(cons(bn_LSB(cons(bn_LSB(p_tail1),p_tail)),p_tail1))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="p_head=bn_LSB(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="x bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p129" org.eventb.core.predicate="p_tail0 bn_Eq bn_shiftLeft1(cons(bn_LSB(cons(bn_LSB(p_tail1),p_tail)),p_tail1))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p92" org.eventb.core.predicate="p_head0=bn_LSB(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p97" org.eventb.core.predicate="x=cons(bn_LSB(y),p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p88" org.eventb.core.predicate="p_tail0 bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="p_head0=FALSE∧bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="y=cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p63" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))⇔p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p139" org.eventb.core.predicate="x bn_Eq y∧y bn_Eq z">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="bn_LSB(cons(p_head0,p_tail0))=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p62" org.eventb.core.predicate="∀aB⦂BOOL,b⦂List(BOOL)·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
<org.eventb.core.prPred name="p76" org.eventb.core.predicate="¬cons(y_head,y_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p124" org.eventb.core.predicate="p_head1=bn_LSB(cons(bn_LSB(p_tail1),p_tail))∧p_tail1 bn_Eq bn_shiftLeft1(cons(bn_LSB(p_tail1),p_tail))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p89" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq y">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="x bn_Eq z">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p138" org.eventb.core.predicate="x bn_Eq z⇒x bn_Eq y∧y bn_Eq z">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p77" org.eventb.core.predicate="y_head=bn_LSB(cons(p_head,p_tail))∧y_tail bn_Eq bn_shiftLeft1(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p103" org.eventb.core.predicate="cons(bn_LSB(nil ⦂ List(BOOL)),p_tail0) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="p_tail bn_Eq bn_shiftLeft1(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p109" org.eventb.core.predicate="FALSE=bn_LSB(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p114" org.eventb.core.predicate="p_head0=bn_LSB(cons(p_head1,p_tail1))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="y bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p136" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p100" org.eventb.core.predicate="p_head0=bn_LSB(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p137" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL),z⦂List(BOOL)·x bn_Eq z⇒x bn_Eq y∧y bn_Eq z"/>
<org.eventb.core.prPred name="p131" org.eventb.core.predicate="cons(bn_LSB(cons(bn_LSB(cons(bn_LSB(p_tail1),p_tail)),p_tail1)),p_tail0) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p78" org.eventb.core.predicate="y_head=bn_LSB(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="p_tail bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p127" org.eventb.core.predicate="y=cons(bn_LSB(cons(bn_LSB(p_tail1),p_tail)),p_tail1)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p110" org.eventb.core.predicate="p_tail0 bn_Eq bn_shiftLeft1(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="FALSE=FALSE"/>
<org.eventb.core.prPred name="p58" org.eventb.core.predicate="∀x⦂List(BOOL)·(nil ⦂ List(BOOL)) bn_Eq x⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="y bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p68" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p80" org.eventb.core.predicate="y=cons(bn_LSB(cons(p_head,p_tail)),y_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p111" org.eventb.core.predicate="y=cons(p_head1,p_tail1)">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p94" org.eventb.core.predicate="p_head0=bn_LSB(y)∧p_tail0 bn_Eq bn_shiftLeft1(y)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="y bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL),z⦂List(BOOL)·x bn_Eq y∧y bn_Eq z⇒x bn_Eq z"/>
<org.eventb.core.prPred name="p59" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq y⇔bn_isZero(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="(∀x⦂List(BOOL),y⦂List(BOOL),z⦂List(BOOL)·x bn_Eq y∧y bn_Eq z⇒x bn_Eq z)∧(∀x⦂List(BOOL),y⦂List(BOOL),z⦂List(BOOL)·x bn_Eq z⇒x bn_Eq y∧y bn_Eq z)"/>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p85" org.eventb.core.predicate="⊤⇔⊥∧bn_isZero(y_tail)">
<org.eventb.core.prIdent name="y_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="y bn_Eq z">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="p_tail bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="x=cons(bn_LSB(y),p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p105" org.eventb.core.predicate="FALSE=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p60" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="y=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="p_head=bn_LSB(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="x=cons(bn_LSB(nil ⦂ List(BOOL)),p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p118" org.eventb.core.predicate="bn_LSB(cons(p_head1,p_tail1))=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq y">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p113" org.eventb.core.predicate="cons(p_head1,p_tail1) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p93" org.eventb.core.predicate="p_head0=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p130" org.eventb.core.predicate="x=cons(bn_LSB(cons(bn_LSB(cons(bn_LSB(p_tail1),p_tail)),p_tail1)),p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p70" org.eventb.core.predicate="∃y_head⦂BOOL,y_tail⦂List(BOOL)·cons(p_head0,p_tail0)=cons(y_head,y_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p74" org.eventb.core.predicate="cons(y_head,y_tail) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq y">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p119" org.eventb.core.predicate="z=cons(bn_LSB(p_tail1),p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="p_head=bn_LSB(y)∧p_tail bn_Eq bn_shiftLeft1(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p116" org.eventb.core.predicate="x=cons(bn_LSB(cons(p_head1,p_tail1)),p_tail0)">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="p_tail bn_Eq bn_shiftLeft1(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="bn_isZero(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="z=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="z" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p79" org.eventb.core.predicate="y_tail bn_Eq bn_shiftLeft1(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p98" org.eventb.core.predicate="cons(bn_LSB(y),p_tail0) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL),z⦂List(BOOL)·(x bn_Eq y∧y bn_Eq z⇒x bn_Eq z)∧(x bn_Eq z⇒x bn_Eq y∧y bn_Eq z)"/>
<org.eventb.core.prPred name="p117" org.eventb.core.predicate="cons(bn_LSB(cons(p_head1,p_tail1)),p_tail0) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e5" org.eventb.core.expression="y_tail">
<org.eventb.core.prIdent name="y_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="y">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.eqvLR"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r19" org.eventb.core.prRID="org.eventb.core.seqprover.exI"/>
<org.eventb.core.prReas name="r20" org.eventb.core.prRID="org.eventb.core.seqprover.exF"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r14" org.eventb.core.prRID="org.eventb.core.seqprover.dtDistinctCase"/>
<org.eventb.core.prReas name="r15" org.eventb.core.prRID="org.eventb.core.seqprover.cut"/>
<org.eventb.core.prReas name="r16" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r17" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r21" org.eventb.core.prRID="org.eventb.core.seqprover.he:1"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRewrites"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r18" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="x bn_Eq nil ⇒ x is zero/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p9,p10">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p11"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on cons(p_head,p_tail) bn_Eq nil" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p13">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p11"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p13" org.eventb.core.prInfHyps="p14,p15"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=bn_LSB(nil)" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p16"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on p_tail bn_Eq bn_shiftLeft1(nil)" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p19,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p19"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on x=cons(bn_LSB(nil),p_tail)" org.eventb.core.prHyps="p16">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p20,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p20"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p23">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p7"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p7"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p19,p10">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on bn_isZero(cons(p_head,p_tail))" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p25">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p25"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p25" org.eventb.core.prInfHyps="p24,p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p25"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p24"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p15">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="p19"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="bn_isZero(cons(bn_LSB(nil ⦂ List(BOOL)),p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="p_head=bn_LSB(nil ⦂ List(BOOL))∧p_tail bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="p_tail bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="bn_isZero(x)⇒x bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="FALSE=FALSE∧⊤"/>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="bn_isZero(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="x=cons(bn_LSB(nil ⦂ List(BOOL)),p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="FALSE=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="p_tail bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="x bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x bn_Eq (nil ⦂ List(BOOL))⇒bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="p_head=bn_LSB(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="x bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRewrites"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="nil bn_Eq x ⇒ x is zero/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p9,p10">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p11"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on nil bn_Eq cons(p_head,p_tail)" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p12">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p11"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="p12"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p4"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="bn_isZero(x)⇒(nil ⦂ List(BOOL)) bn_Eq x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·(nil ⦂ List(BOOL)) bn_Eq x⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq x⇒bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq x⇔bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRewrites"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="isZeroImpl/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="aB,b" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees aB,b)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="aB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on bn_isZero(cons(aB,b))" org.eventb.core.prHyps="p3">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4,p6">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p6">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p5,p7"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p5"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on bn_isZero(cons(aB,b))" org.eventb.core.prHyps="p3">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4,p6">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p6">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p5,p7"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p7"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p7,p5">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with aB=FALSE" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p6">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p7">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_isZero(cons(aB,b))">
<org.eventb.core.prIdent name="aB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="bn_isZero(b)">
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="aB=FALSE∧bn_isZero(b)⇒bn_isZero(cons(aB,b))">
<org.eventb.core.prIdent name="aB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="FALSE=FALSE∧bn_isZero(b)">
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="FALSE=FALSE∧⊤"/>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀aB⦂BOOL,b⦂List(BOOL)·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)">
<org.eventb.core.prIdent name="aB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="bn_isZero(cons(aB,b))⇒aB=FALSE∧bn_isZero(b)">
<org.eventb.core.prIdent name="aB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="aB=FALSE">
<org.eventb.core.prIdent name="aB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="aB=FALSE∧bn_isZero(b)">
<org.eventb.core.prIdent name="aB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="bn_isZero(cons(FALSE,b))">
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRewrites"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="Eq nil ⇒ bn_isZero()/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p9,p10">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p11"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on cons(p_head,p_tail) bn_Eq nil" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p16">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p11"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p16" org.eventb.core.prInfHyps="p17,p18"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=bn_LSB(nil)" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p20">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p19"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p22">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p7"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p7"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p23,p10">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on bn_isZero(cons(p_head,p_tail))" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p13">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p13" org.eventb.core.prInfHyps="p15,p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p25">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p24"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p27">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p18">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="p23"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="bn_LSB(nil ⦂ List(BOOL))=FALSE"/>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="p_head=bn_LSB(nil ⦂ List(BOOL))∧p_tail bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="FALSE=bn_LSB(nil ⦂ List(BOOL))∧p_tail bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="p_tail bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="bn_isZero(x)⇒x bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="p_head=FALSE∧⊤">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="x=cons(bn_LSB(nil ⦂ List(BOOL)),p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="FALSE=bn_LSB(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="p_tail bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="FALSE=FALSE"/>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="x bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x bn_Eq (nil ⦂ List(BOOL))⇒bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="p_head=bn_LSB(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="x bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRewrites"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="nil Eq  ⇒ bn_isZero()/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p6,p7">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p6">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·(nil ⦂ List(BOOL)) bn_Eq x⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))⇔bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(p_head,p_tail)⇔bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq p_tail⇔bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq x⇔bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))⇔bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="zeroIszero/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="x,y" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p2,p3"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isZero(x)∧bn_isZero(y)⇒x bn_Eq y"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_isZero(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="x bn_Eq y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_isZero(x)∧bn_isZero(y)⇒x bn_Eq y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="LSB(zero) = FALSE/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p5"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p9">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p10"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on bn_isZero(cons(p_head,p_tail))" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p7,p12">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p12" org.eventb.core.prInfHyps="p13,p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p13">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p9" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_LSB(nil ⦂ List(BOOL))=FALSE"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isZero(x)⇒bn_LSB(x)=FALSE"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="FALSE=FALSE"/>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="bn_LSB(cons(p_head,p_tail))=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_isZero(x)⇒bn_LSB(x)=FALSE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="bn_LSB(cons(FALSE,p_tail))=FALSE">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_LSB(x)=FALSE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.dtDistinctCase"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="leftShift1(zero) = zero/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p5"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p5"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p8,p9">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p8">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p10"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p13">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,p_tail)" org.eventb.core.prHyps="p13">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p14" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p15" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p16"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p16"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀aB,b·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isZero(x)⇒bn_isZero(bn_shiftLeft1(x))"/>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))⇔p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="∀aB⦂BOOL,b⦂List(BOOL)·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="bn_isZero(bn_shiftLeft1(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_isZero(x)⇒bn_isZero(bn_shiftLeft1(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_isZero(bn_shiftLeft1(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="⊤⇔p_head=FALSE∧⊥">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_isZero(bn_shiftLeft1(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="bn_isZero(bn_shiftLeft1(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="RemZerosToEquality/S-THM" org.eventb.core.psManual="true"/>
<org.eventb.core.prProof name="isZero(x) ⇔ bn_remTrailingZeros(x) = nil/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p10,p11">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p15">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,p_tail)" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p16" org.eventb.core.prHyps="p12" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18,p19"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p19">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p20">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p18">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p22"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p12" org.eventb.core.prInfHyps="p23"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p10,p12"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀aB,b·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p25">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p7"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(nil)=nil" org.eventb.core.prHyps="p7">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p10,p19">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p13"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(p_head,p_tail))=nil" org.eventb.core.prHyps="p13">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p14" org.eventb.core.prHyps="p19" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p20" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p21"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p26">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p21" org.eventb.core.prHyps="p26" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p27" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p28"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p29">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p21" org.eventb.core.prHyps="p29" org.eventb.core.prInfHyps="p30"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p29" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p30"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="p18">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p22"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p15">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst FALSE,p_tail)" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p31">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p31" org.eventb.core.prHyps="p19" org.eventb.core.prInfHyps="p32"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p32" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p28"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀aB,b·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p26"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))⇔p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="∀aB⦂BOOL,b⦂List(BOOL)·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="⊤⇔p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="bn_isZero(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="COND(p_head=TRUE∨¬bn_isZero(p_tail),cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="COND(p_head=TRUE,cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="bn_isZero(cons(FALSE,p_tail))⇔FALSE=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isZero(x)⇔bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))⇒bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="COND(⊤,cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="bn_isZero(x)⇒bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_isZero(x)⇔bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,p_tail))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="COND(p_head=TRUE∨¬⊤,cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="COND(FALSE=TRUE,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="COND(⊥,cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="⊥⇔FALSE=FALSE∧⊤"/>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="FALSE"/>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRewrites"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="remZero(cons(xB, x)) = cons(xB, x) ⇒ remZero(x) = x/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x,xB" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees xB,x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p5"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p9,p10">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p11"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(xB,cons(p_head,p_tail)))=cons(xB,cons(p_head,p_tail))" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p7,p13">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p11"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p15">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p10"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p17">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p18">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p20">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p19"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="p19">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p9" org.eventb.core.prInfHyps="p21"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p13" org.eventb.core.prInfHyps="p22"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p9,p13"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_isZero(p_tail))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p24">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p25">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p26">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (bn_isZero(p_tail)⇒bn_isZero(cons(FALSE,p_tail)))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p27">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p28">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p29">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p29">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p22" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p30"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p30" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p31"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p33">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p27">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p27" org.eventb.core.prHyps="p24" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p28" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p29"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p22" org.eventb.core.prHyps="p29" org.eventb.core.prInfHyps="p34"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p34" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p35"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p36">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(FALSE,p_tail))" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p37">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p36"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p37" org.eventb.core.prHyps="p29" org.eventb.core.prInfHyps="p38"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p38" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p39"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_remTrailingZeros(cons(FALSE,p_tail))=nil" org.eventb.core.prHyps="p39">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p35" org.eventb.core.prInfHyps="p40"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p35"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (xB=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p41">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p13" org.eventb.core.prHyps="p41" org.eventb.core.prInfHyps="p42"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p35" org.eventb.core.prHyps="p41" org.eventb.core.prInfHyps="p43"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p40" org.eventb.core.prHyps="p41" org.eventb.core.prInfHyps="p44"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p42" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p43" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p31"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p44" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p26"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p26"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p45">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p13" org.eventb.core.prHyps="p45" org.eventb.core.prInfHyps="p46"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p35" org.eventb.core.prHyps="p45" org.eventb.core.prInfHyps="p47"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p40" org.eventb.core.prHyps="p45" org.eventb.core.prInfHyps="p48"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p45" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p49"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p46" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p50"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p47" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p26"/>
<org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p48" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p26"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p26"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p41"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isZero(x)⇔bn_remTrailingZeros(x)=nil"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p27"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p51">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="p51">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p52">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p52" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p10"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p24"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p15"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="bn_isZero(cons(FALSE,p_tail))⇔bn_remTrailingZeros(cons(FALSE,p_tail))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="COND(⊥,cons(xB,bn_remTrailingZeros(cons(FALSE,p_tail))),nil ⦂ List(BOOL))=cons(xB,cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="bn_isZero(p_tail)⇒bn_isZero(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="xB=TRUE">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="COND(¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="FALSE=FALSE∧⊤"/>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_remTrailingZeros(cons(xB,nil ⦂ List(BOOL)))=cons(xB,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="COND(xB=TRUE,cons(xB,nil ⦂ List(BOOL)),nil ⦂ List(BOOL))=cons(xB,cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="bn_remTrailingZeros(cons(xB,cons(p_head,p_tail)))=cons(xB,cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="COND(⊥∨¬bn_isZero(cons(p_head,p_tail)),cons(xB,bn_remTrailingZeros(cons(p_head,p_tail))),nil ⦂ List(BOOL))=cons(xB,cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="COND(⊤∨¬bn_isZero(p_tail),cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="COND(⊤∨¬bn_isZero(cons(p_head,p_tail)),cons(xB,bn_remTrailingZeros(cons(p_head,p_tail))),nil ⦂ List(BOOL))=cons(xB,cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,p_tail))=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_remTrailingZeros(cons(xB,x))=cons(xB,x)⇒bn_remTrailingZeros(x)=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="¬bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isZero(x)⇔bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="COND(¬bn_isZero(cons(p_head,p_tail)),cons(xB,bn_remTrailingZeros(cons(p_head,p_tail))),nil ⦂ List(BOOL))=cons(xB,cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="COND(⊤,cons(xB,nil ⦂ List(BOOL)),nil ⦂ List(BOOL))=cons(xB,cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="xB=FALSE">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="COND(xB=TRUE∨¬bn_isZero(cons(FALSE,p_tail)),cons(xB,bn_remTrailingZeros(cons(FALSE,p_tail))),nil ⦂ List(BOOL))=cons(xB,cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_remTrailingZeros(x)=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="COND(¬bn_isZero(p_tail),cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="COND(p_head=TRUE∨¬bn_isZero(p_tail),cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="bn_remTrailingZeros(cons(xB,x))=cons(xB,x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,p_tail))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="COND(xB=TRUE∨¬⊤,cons(xB,bn_remTrailingZeros(cons(FALSE,p_tail))),nil ⦂ List(BOOL))=cons(xB,cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="COND(xB=TRUE∨¬bn_isZero(cons(p_head,p_tail)),cons(xB,bn_remTrailingZeros(cons(p_head,p_tail))),nil ⦂ List(BOOL))=cons(xB,cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="⊤⇒bn_isZero(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="bn_isZero(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀xB⦂BOOL,x⦂List(BOOL)·bn_remTrailingZeros(cons(xB,x))=cons(xB,x)⇒bn_remTrailingZeros(x)=x"/>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="COND(xB=TRUE,cons(xB,bn_remTrailingZeros(cons(FALSE,p_tail))),nil ⦂ List(BOOL))=cons(xB,cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="COND(⊥,cons(xB,nil ⦂ List(BOOL)),nil ⦂ List(BOOL))=cons(xB,cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="COND(⊥∨¬bn_isZero(p_tail),cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="⊤⇔bn_remTrailingZeros(cons(FALSE,p_tail))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="FALSE=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="COND(¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="COND(xB=TRUE∨¬⊥,cons(xB,bn_remTrailingZeros(cons(FALSE,p_tail))),nil ⦂ List(BOOL))=cons(xB,cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="COND(⊤,cons(xB,bn_remTrailingZeros(cons(FALSE,p_tail))),nil ⦂ List(BOOL))=cons(xB,cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="¬xB=TRUE">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,p_tail))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.cut"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="x ≠ cons(b, x)/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,b,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,b)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p8,p9">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p8">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in goal" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∨ to ⇒ in goal" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p14">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=b" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p16"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p9"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="¬p_head=b∨¬p_tail=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="⊤∧¬x=cons(b,x)">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="¬(p_head=b∧p_tail=cons(p_head,p_tail))">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="¬x=cons(b,x)">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="¬p_tail=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),b⦂BOOL·x∈List(BOOL)∧x≠cons(b,x)"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="p_head=b⇒¬p_tail=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="¬p_tail=cons(b,p_tail)">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x∈List(BOOL)∧¬x=cons(b,x)">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="¬(nil ⦂ List(BOOL))=cons(b,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="x=cons(b,p_tail)">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="¬cons(p_head,p_tail)=cons(b,cons(p_head,p_tail))">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="p_head=b">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="x∈List(BOOL)∧x≠cons(b,x)">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.rn"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.disjToImplRewrites"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="x ≠ cons(b, cons(b, x))/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="b,c,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,b,c)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="c" org.eventb.core.type="BOOL"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="(∀x⦂List(BOOL)·x∈List(BOOL))∧(∀x⦂List(BOOL),b⦂BOOL,c⦂BOOL·¬x=cons(b,cons(c,x)))"/>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),b⦂BOOL,c⦂BOOL·x∈List(BOOL)∧x≠cons(b,cons(c,x))"/>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="¬x=cons(b,cons(c,x))">
<org.eventb.core.prIdent name="b" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="c" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="∀x⦂List(BOOL),b⦂BOOL,c⦂BOOL·¬x=cons(b,cons(c,x))"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="⊤∧(∀x⦂List(BOOL),b⦂BOOL,c⦂BOOL·¬x=cons(b,cons(c,x)))"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="bn_Eq reverse Expand/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x,xB,xs" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,xB,xs)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(xB,xs))" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p12">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p11"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p12" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p13"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p13" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p14"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p15">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst xB,xs)" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p16" org.eventb.core.prHyps="p14" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p18"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀aB,b·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·nil bn_Eq x⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p19,p20">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p19">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p21"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p24">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,xB,p_tail,xs)" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p25">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p25" org.eventb.core.prHyps="p21" org.eventb.core.prInfHyps="p26"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p18"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e0,e4,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p27">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p28">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on nil bn_Eq cons(xB,xs)" org.eventb.core.prHyps="p6">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p15">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst xB,xs)" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p29">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p16" org.eventb.core.prHyps="p14" org.eventb.core.prInfHyps="p30"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p30" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p18"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀aB,b·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p19,p31">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p19">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p32">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p21"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with bn_LSB(p_tail)=xB" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p31">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p21" org.eventb.core.prInfHyps="p33"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p21"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p24">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,bn_LSB(p_tail),p_tail,xs)" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p36">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p35">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p36" org.eventb.core.prHyps="p33" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p37" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p18"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e5,e4,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="FALSE=xB">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="bn_LSB(x)=xB">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(bn_LSB(p_tail),xs)⇔p_tail bn_Eq xs∧p_head=bn_LSB(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="∀aB⦂BOOL,b⦂List(BOOL)·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="p_head=bn_LSB(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="bn_LSB(cons(p_head,p_tail))=xB">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="x bn_Eq cons(xB,xs)⇒bn_shiftLeft1(x) bn_Eq xs∧bn_LSB(x)=xB">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="⊤⇔⊥∧p_head=xB">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="⊤⇔⊥∧bn_isZero(xs)">
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x bn_Eq cons(xB,xs)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="⊤⇔p_tail bn_Eq xs∧⊥">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="p_tail bn_Eq xs">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="bn_LSB(p_tail)=xB">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(xB,xs)⇔bn_isZero(cons(xB,xs))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="bn_shiftLeft1(p_tail) bn_Eq xs">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="∀x⦂List(BOOL)·(nil ⦂ List(BOOL)) bn_Eq x⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="bn_isZero(cons(xB,xs))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(xB,xs)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_shiftLeft1(x) bn_Eq xs∧bn_LSB(x)=xB">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(bn_LSB(p_tail),xs)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),xB⦂BOOL,xs⦂List(BOOL)·x bn_Eq cons(xB,xs)⇒bn_shiftLeft1(x) bn_Eq xs∧bn_LSB(x)=xB"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="bn_shiftLeft1(x) bn_Eq xs">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="⊤⇔xB=FALSE∧⊥">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="bn_LSB(nil ⦂ List(BOOL))=xB">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(xB,xs)⇔p_tail bn_Eq xs∧p_head=xB">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="bn_isZero(cons(xB,xs))⇔xB=FALSE∧bn_isZero(xs)">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq xs">
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="bn_isZero(xs)">
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="bn_LSB(cons(p_head,p_tail))=bn_LSB(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="⊤⇔bn_isZero(cons(xB,xs))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="bn_shiftLeft1(cons(p_head,p_tail)) bn_Eq xs">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="∀yB⦂BOOL,zB⦂BOOL,y⦂List(BOOL),z⦂List(BOOL)·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(xB,xs)">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="bn_shiftLeft1(nil ⦂ List(BOOL)) bn_Eq xs">
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="cons(xB,xs)">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e5" org.eventb.core.expression="bn_LSB(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="xB">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="xs">
<org.eventb.core.prIdent name="xs" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.he:1"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="Commutivity/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="p_tail,p_head,p_tail0,x,y,p_head0" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p6">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst y)" org.eventb.core.prHyps="p6">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with y bn_Eq nil⇔bn_isZero(y)" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p7">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Eq nil⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p9,p10">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p12">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p13"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p6">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(p_head,p_tail))" org.eventb.core.prHyps="p6">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p15">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with cons(p_head,p_tail) bn_Eq nil⇔bn_isZero(cons(p_head,p_tail))" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p17">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(p_head,p_tail))" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p18">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with nil bn_Eq cons(p_head,p_tail)⇔bn_isZero(cons(p_head,p_tail))" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="p18">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p19">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·nil bn_Eq x⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Eq nil⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p20,p21">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p20">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p22"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p24">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,p_head0,p_tail,p_tail0)" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p25">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with cons(p_head,p_tail) bn_Eq cons(p_head0,p_tail0)⇔p_tail bn_Eq p_tail0∧p_head=p_head0" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="p25">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p26">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head0,p_head,p_tail0,p_tail)" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p27">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with cons(p_head0,p_tail0) bn_Eq cons(p_head,p_tail)⇔p_tail0 bn_Eq p_tail∧p_head0=p_head" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="p27">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p28">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p24">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,p_head0,p_tail,p_tail0)" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p25">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in goal" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p29">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p30,p31">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p33">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p33">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p25" org.eventb.core.prHyps="p30,p31" org.eventb.core.prInfHyps="p34"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p27" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p35"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p34" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p36"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p35" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=p_head0" org.eventb.core.prHyps="p31">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p9" org.eventb.core.prInfHyps="p38"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p21" org.eventb.core.prInfHyps="p39"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p36" org.eventb.core.prInfHyps="p40"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p37" org.eventb.core.prInfHyps="p41"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p9,p21,p36,p37"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on cons(p_head0,p_tail) bn_Eq p_tail0⇔p_tail0 bn_Eq cons(p_head0,p_tail)" org.eventb.core.prHyps="p39">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4,p42">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p39"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p42"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p43">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail0,p_head0,p_tail)" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p44">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p43"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in hyp (p_head0=bn_LSB(p_tail0)∧p_tail bn_Eq bn_shiftLeft1(p_tail0)⇔p_tail0 bn_Eq cons(p_head0,p_tail))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p42" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p45,p46"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p45,p46"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in hyp (p_tail bn_Eq cons(p_head0,p_tail0)⇔cons(p_head0,p_tail0) bn_Eq p_tail)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p22" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p47,p48"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p47,p48"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on cons(p_head0,p_tail0) bn_Eq p_tail⇒p_tail bn_Eq cons(p_head0,p_tail0)" org.eventb.core.prHyps="p48">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4,p49">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p48"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p49"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p43"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail,p_head0,p_tail0)" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p50">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p43"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (p_head0=bn_LSB(p_tail)∧p_tail0 bn_Eq bn_shiftLeft1(p_tail)⇒bn_shiftLeft1(p_tail) bn_Eq p_tail0∧bn_LSB(p_tail)=p_head0)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p51">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p51" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p54" org.eventb.core.prHyps="p52,p53">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p54" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p55">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p55" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p55">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p49" org.eventb.core.prHyps="p52,p53" org.eventb.core.prInfHyps="p56"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p50" org.eventb.core.prHyps="p52" org.eventb.core.prInfHyps="p57"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p56" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p58"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p57" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p59"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p47" org.eventb.core.prHyps="p58" org.eventb.core.prInfHyps="p60"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p59" org.eventb.core.prHyps="p58" org.eventb.core.prInfHyps="p61"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p60" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p62"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p61" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p63"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p63"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p64">
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p64" org.eventb.core.prHyps="p52"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p51">
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ hyp case (p_head0=bn_LSB(p_tail)∧p_tail0 bn_Eq bn_shiftLeft1(p_tail)⇒bn_shiftLeft1(p_tail) bn_Eq p_tail0∧bn_LSB(p_tail)=p_head0)" org.eventb.core.prHyps="p51">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p65">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p51"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p49" org.eventb.core.prHyps="p65" org.eventb.core.prInfHyps="p66"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p66"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in ¬(p_head0=bn_LSB(p_tail)∧p_tail0 bn_Eq bn_shiftLeft1(p_tail))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p65" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p67"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p67"/>
<org.eventb.core.prRule name="r19" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∨ hyp (¬p_head0=bn_LSB(p_tail)∨¬p_tail0 bn_Eq bn_shiftLeft1(p_tail))" org.eventb.core.prHyps="p67">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p68">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p67"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p50" org.eventb.core.prHyps="p68" org.eventb.core.prInfHyps="p69"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p67" org.eventb.core.prHyps="p68" org.eventb.core.prInfHyps="p70"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p69" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p59"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p70"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p47" org.eventb.core.prHyps="p59" org.eventb.core.prInfHyps="p71"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p71"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p24">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head0,p_head0,p_tail0,p_tail)" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p72">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p33">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p72" org.eventb.core.prHyps="p41" org.eventb.core.prInfHyps="p73"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p73"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head0,p_head0,p_tail0,p_tail)" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p72">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p33">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p72" org.eventb.core.prHyps="p41" org.eventb.core.prInfHyps="p73"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on ¬cons(p_head0,p_tail0) bn_Eq cons(p_head0,p_tail)" org.eventb.core.prHyps="p41">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4,p74">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p41"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p74"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in ¬(p_head0=bn_LSB(cons(p_head0,p_tail))∧p_tail0 bn_Eq bn_shiftLeft1(cons(p_head0,p_tail)))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p74" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p75"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p75"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on ¬p_head0=bn_LSB(cons(p_head0,p_tail))∨¬p_tail0 bn_Eq bn_shiftLeft1(cons(p_head0,p_tail))" org.eventb.core.prHyps="p75">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4,p76">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p75"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p76"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p76" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p77"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on ¬p_tail0 bn_Eq bn_shiftLeft1(cons(p_head0,p_tail))" org.eventb.core.prHyps="p77">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4,p78">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p77"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p78"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="p78">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p63">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p24">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head0,p_head0,p_tail,p_tail0)" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p79">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p79" org.eventb.core.prHyps="p40,p30" org.eventb.core.prInfHyps="p80"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p80"/>
<org.eventb.core.prRule name="r20" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_tail0=p_tail)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p81">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail0=p_tail" org.eventb.core.prHyps="p81">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p82"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p83"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p40" org.eventb.core.prInfHyps="p84"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p44" org.eventb.core.prInfHyps="p85"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p45" org.eventb.core.prInfHyps="p86"/>
<org.eventb.core.prHypAction name="FORWARD_INF5" org.eventb.core.prHyps="p46" org.eventb.core.prInfHyps="p87"/>
<org.eventb.core.prHypAction name="FORWARD_INF6" org.eventb.core.prHyps="p59" org.eventb.core.prInfHyps="p88"/>
<org.eventb.core.prHypAction name="FORWARD_INF7" org.eventb.core.prHyps="p78" org.eventb.core.prInfHyps="p89"/>
<org.eventb.core.prHypAction name="DESELECT8" org.eventb.core.prHyps="p20,p30,p40,p44,p45,p46,p59,p78"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p85" org.eventb.core.prHyps="p88,p68" org.eventb.core.prInfHyps="p90"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p86" org.eventb.core.prHyps="p68,p88" org.eventb.core.prInfHyps="p91"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p87" org.eventb.core.prHyps="p88,p68" org.eventb.core.prInfHyps="p92"/>
<org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p89" org.eventb.core.prHyps="p83" org.eventb.core.prInfHyps="p61"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p90"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p91"/>
<org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p92"/>
<org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p61" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p63"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p63"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p93">
<org.eventb.core.prRule name="r20" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_tail=nil)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p94">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail=nil" org.eventb.core.prHyps="p94">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p95"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p38" org.eventb.core.prInfHyps="p96"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p40" org.eventb.core.prInfHyps="p97"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p44" org.eventb.core.prInfHyps="p98"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p45" org.eventb.core.prInfHyps="p99"/>
<org.eventb.core.prHypAction name="FORWARD_INF5" org.eventb.core.prHyps="p46" org.eventb.core.prInfHyps="p100"/>
<org.eventb.core.prHypAction name="FORWARD_INF6" org.eventb.core.prHyps="p68" org.eventb.core.prInfHyps="p101"/>
<org.eventb.core.prHypAction name="FORWARD_INF7" org.eventb.core.prHyps="p59" org.eventb.core.prInfHyps="p102"/>
<org.eventb.core.prHypAction name="FORWARD_INF8" org.eventb.core.prHyps="p78" org.eventb.core.prInfHyps="p103"/>
<org.eventb.core.prHypAction name="FORWARD_INF9" org.eventb.core.prHyps="p93" org.eventb.core.prInfHyps="p104"/>
<org.eventb.core.prHypAction name="DESELECT10" org.eventb.core.prHyps="p30,p38,p40,p44,p45,p46,p68,p59,p78,p93"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p17">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail0)" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p105">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p105" org.eventb.core.prHyps="p95" org.eventb.core.prInfHyps="p106"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p106" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p107"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p6">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail0)" org.eventb.core.prHyps="p6">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p108">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p108" org.eventb.core.prHyps="p103,p107" org.eventb.core.prInfHyps="p109"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p109" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p63"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p63"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Eq nil⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·nil bn_Eq x⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p110">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p46"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (p_head0=bn_LSB(p_tail0)∧p_tail bn_Eq bn_shiftLeft1(p_tail0)⇒bn_shiftLeft1(p_tail0) bn_Eq p_tail∧bn_LSB(p_tail0)=p_head0)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p111">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p111" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p114" org.eventb.core.prHyps="p112,p113">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p114" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p115">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p115" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p115">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p44" org.eventb.core.prHyps="p112" org.eventb.core.prInfHyps="p116"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p45" org.eventb.core.prHyps="p112,p113" org.eventb.core.prInfHyps="p117"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p46" org.eventb.core.prHyps="p112,p113" org.eventb.core.prInfHyps="p118"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p116" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p119"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p117" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p120"/>
<org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p118"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p120" org.eventb.core.prHyps="p119" org.eventb.core.prInfHyps="p63"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p63"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p121">
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p121" org.eventb.core.prHyps="p112"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p111">
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (p_tail bn_Eq bn_shiftLeft1(p_tail0)⇒bn_shiftLeft1(p_tail0) bn_Eq p_tail)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p122">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p122" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p115" org.eventb.core.prHyps="p113">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p115" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p115">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p44" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p123"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p45" org.eventb.core.prHyps="p113" org.eventb.core.prInfHyps="p124"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p46" org.eventb.core.prHyps="p113" org.eventb.core.prInfHyps="p125"/>
<org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p111" org.eventb.core.prHyps="p113" org.eventb.core.prInfHyps="p126"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p123" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p119"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p124" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p127"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p125" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p128"/>
<org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p126" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p129"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p127" org.eventb.core.prHyps="p129,p119" org.eventb.core.prInfHyps="p130"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p128" org.eventb.core.prHyps="p119,p129" org.eventb.core.prInfHyps="p130"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p130"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p24">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head0,p_head0,p_tail,p_tail0)" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p79">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p79" org.eventb.core.prHyps="p40,p30" org.eventb.core.prInfHyps="p80"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e3,e4,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p122"/>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p122"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p111"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p94"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p81"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e3,e4,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e3,e2,e4"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e3,e2,e4"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p131">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p67"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p67" org.eventb.core.prHyps="p131" org.eventb.core.prInfHyps="p132"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p132"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p55,p64">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p51"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p49" org.eventb.core.prHyps="p64" org.eventb.core.prInfHyps="p133"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p50" org.eventb.core.prHyps="p55,p64" org.eventb.core.prInfHyps="p134"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p133" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p135"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p134"/>
<org.eventb.core.prRule name="r21" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with bn_LSB(p_tail)=p_head0" org.eventb.core.prHyps="p64">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p136"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p137"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p38" org.eventb.core.prInfHyps="p138"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p40" org.eventb.core.prInfHyps="p139"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p41" org.eventb.core.prInfHyps="p140"/>
<org.eventb.core.prHypAction name="FORWARD_INF5" org.eventb.core.prHyps="p44" org.eventb.core.prInfHyps="p141"/>
<org.eventb.core.prHypAction name="FORWARD_INF6" org.eventb.core.prHyps="p45" org.eventb.core.prInfHyps="p142"/>
<org.eventb.core.prHypAction name="FORWARD_INF7" org.eventb.core.prHyps="p46" org.eventb.core.prInfHyps="p143"/>
<org.eventb.core.prHypAction name="FORWARD_INF8" org.eventb.core.prHyps="p47" org.eventb.core.prInfHyps="p144"/>
<org.eventb.core.prHypAction name="FORWARD_INF9" org.eventb.core.prHyps="p135" org.eventb.core.prInfHyps="p145"/>
<org.eventb.core.prHypAction name="DESELECT10" org.eventb.core.prHyps="p20,p31,p38,p40,p41,p44,p45,p46,p47,p135"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p51"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e4,e3,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2,e3,e4"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,xB,xs·x bn_Eq cons(xB,xs)⇒bn_shiftLeft1(x) bn_Eq xs∧bn_LSB(x)=xB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p146">
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p146" org.eventb.core.prHyps="p31"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p147">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p147" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p148" org.eventb.core.prHyps="p33,p146">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p148" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p30">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p30">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p25" org.eventb.core.prHyps="p146" org.eventb.core.prInfHyps="p149"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p27" org.eventb.core.prHyps="p33,p146" org.eventb.core.prInfHyps="p150"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p149" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p151"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p150" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p152"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=p_head" org.eventb.core.prHyps="p146">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p153"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p22" org.eventb.core.prInfHyps="p154"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p151" org.eventb.core.prInfHyps="p155"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p152" org.eventb.core.prInfHyps="p156"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p20,p22,p151,p152"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p31">
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="p146"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e5,e3,e4,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e5,e2,e4"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e5,e3,e4,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p155" org.eventb.core.predicate="¬cons(p_head,p_tail) bn_Eq cons(p_head,p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))⇔(nil ⦂ List(BOOL)) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p135" org.eventb.core.predicate="p_tail0 bn_Eq bn_shiftLeft1(p_tail)⇒p_tail bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="p_head0=bn_LSB(p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p65" org.eventb.core.predicate="¬(p_head0=bn_LSB(p_tail)∧p_tail0 bn_Eq bn_shiftLeft1(p_tail))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p140" org.eventb.core.predicate="¬cons(bn_LSB(p_tail),p_tail0) bn_Eq cons(bn_LSB(p_tail),p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p84" org.eventb.core.predicate="cons(p_head0,p_tail) bn_Eq cons(p_head0,p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p154" org.eventb.core.predicate="p_tail bn_Eq cons(p_head,p_tail0)⇔cons(p_head,p_tail0) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="p_tail bn_Eq y⇔y bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="p_tail bn_Eq cons(p_head0,p_tail0)⇒⊥∧⊤">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="p_tail0 bn_Eq cons(p_head0,p_tail)⇒bn_shiftLeft1(p_tail0) bn_Eq p_tail∧bn_LSB(p_tail0)=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p79" org.eventb.core.predicate="cons(p_head0,p_tail) bn_Eq cons(p_head0,p_tail0)⇔p_tail bn_Eq p_tail0∧p_head0=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq p_tail⇒p_tail bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p74" org.eventb.core.predicate="¬(p_head0=bn_LSB(cons(p_head0,p_tail))∧p_tail0 bn_Eq bn_shiftLeft1(cons(p_head0,p_tail)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq y⇔y bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p124" org.eventb.core.predicate="p_head0=bn_LSB(p_tail0)∧⊤⇒p_tail0 bn_Eq cons(p_head0,p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p138" org.eventb.core.predicate="x=cons(bn_LSB(p_tail),p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="p_tail0 bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p88" org.eventb.core.predicate="¬p_tail bn_Eq cons(p_head0,p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="p_head0=bn_LSB(p_tail)∧p_tail0 bn_Eq bn_shiftLeft1(p_tail)⇒bn_shiftLeft1(p_tail) bn_Eq p_tail0∧bn_LSB(p_tail)=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p139" org.eventb.core.predicate="cons(bn_LSB(p_tail),p_tail) bn_Eq cons(bn_LSB(p_tail),p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p102" org.eventb.core.predicate="¬(nil ⦂ List(BOOL)) bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p127" org.eventb.core.predicate="p_head0=bn_LSB(p_tail0)⇒p_tail0 bn_Eq cons(p_head0,p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p131" org.eventb.core.predicate="¬p_tail0 bn_Eq bn_shiftLeft1(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p73" org.eventb.core.predicate="⊥⇔⊥∧p_head0=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p128" org.eventb.core.predicate="p_tail0 bn_Eq cons(p_head0,p_tail)⇒p_head0=bn_LSB(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="x bn_Eq y⇔y bn_Eq x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p98" org.eventb.core.predicate="p_tail0 bn_Eq cons(p_head0,nil ⦂ List(BOOL))⇒bn_shiftLeft1(p_tail0) bn_Eq (nil ⦂ List(BOOL))∧bn_LSB(p_tail0)=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(p_head0,p_tail0)⇔cons(p_head0,p_tail0) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(p_head0,p_tail0)⇔⊤∧⊤">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p97" org.eventb.core.predicate="cons(p_head0,nil ⦂ List(BOOL)) bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p151" org.eventb.core.predicate="¬cons(p_head,p_tail) bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p106" org.eventb.core.predicate="⊤⇔bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p61" org.eventb.core.predicate="¬⊤"/>
<org.eventb.core.prPred name="p109" org.eventb.core.predicate="⊥⇔⊤"/>
<org.eventb.core.prPred name="p75" org.eventb.core.predicate="¬p_head0=bn_LSB(cons(p_head0,p_tail))∨¬p_tail0 bn_Eq bn_shiftLeft1(cons(p_head0,p_tail))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p119" org.eventb.core.predicate="¬p_tail0 bn_Eq cons(p_head0,p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p149" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(p_head0,p_tail0)⇔⊥∧⊤">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="cons(p_head0,p_tail) bn_Eq p_tail0⇔p_tail0 bn_Eq cons(p_head0,p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="¬cons(p_head0,p_tail0) bn_Eq cons(p_head0,p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p137" org.eventb.core.predicate="p_head=bn_LSB(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p141" org.eventb.core.predicate="p_tail0 bn_Eq cons(bn_LSB(p_tail),p_tail)⇒bn_shiftLeft1(p_tail0) bn_Eq p_tail∧bn_LSB(p_tail0)=bn_LSB(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p107" org.eventb.core.predicate="bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p125" org.eventb.core.predicate="p_tail0 bn_Eq cons(p_head0,p_tail)⇒p_head0=bn_LSB(p_tail0)∧⊤">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="cons(p_head0,p_tail) bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="p_tail bn_Eq cons(p_head0,p_tail0)⇒cons(p_head0,p_tail0) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="p_tail bn_Eq cons(p_head0,p_tail0)⇔cons(p_head0,p_tail0) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p108" org.eventb.core.predicate="p_tail0 bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p71" org.eventb.core.predicate="⊥⇒cons(p_head0,p_tail0) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p130" org.eventb.core.predicate="⊥⇒⊥"/>
<org.eventb.core.prPred name="p156" org.eventb.core.predicate="cons(p_head,p_tail0) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p62" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p87" org.eventb.core.predicate="p_tail bn_Eq cons(p_head0,p_tail)⇒p_head0=bn_LSB(p_tail)∧p_tail bn_Eq bn_shiftLeft1(p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p103" org.eventb.core.predicate="¬p_tail0 bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p134" org.eventb.core.predicate="p_tail bn_Eq cons(p_head0,p_tail0)⇒⊤∧⊤">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(p_head0,p_tail0)⇔p_tail bn_Eq p_tail0∧p_head=p_head0">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p142" org.eventb.core.predicate="bn_LSB(p_tail)=bn_LSB(p_tail0)∧p_tail bn_Eq bn_shiftLeft1(p_tail0)⇒p_tail0 bn_Eq cons(bn_LSB(p_tail),p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="p_tail bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(p_head,p_tail)⇔bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="∀x⦂List(BOOL),xB⦂BOOL,xs⦂List(BOOL)·x bn_Eq cons(xB,xs)⇒bn_shiftLeft1(x) bn_Eq xs∧bn_LSB(x)=xB"/>
<org.eventb.core.prPred name="p63" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p114" org.eventb.core.predicate="bn_shiftLeft1(p_tail0) bn_Eq p_tail∧bn_LSB(p_tail0)=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p89" org.eventb.core.predicate="¬p_tail bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p101" org.eventb.core.predicate="¬p_head0=bn_LSB(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p118" org.eventb.core.predicate="p_tail0 bn_Eq cons(p_head0,p_tail)⇒⊤∧⊤">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq cons(p_head,p_tail)⇔⊥∧⊤">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="p_tail bn_Eq p_tail0∧p_head=p_head0⇔p_tail0 bn_Eq p_tail∧p_head0=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p111" org.eventb.core.predicate="p_head0=bn_LSB(p_tail0)∧p_tail bn_Eq bn_shiftLeft1(p_tail0)⇒bn_shiftLeft1(p_tail0) bn_Eq p_tail∧bn_LSB(p_tail0)=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq p_tail0⇔p_tail0 bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="p_tail bn_Eq p_tail0∧p_head=p_head0⇒p_tail0 bn_Eq p_tail∧p_head0=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p60" org.eventb.core.predicate="⊤⇒cons(p_head0,p_tail0) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p110" org.eventb.core.predicate="¬p_tail=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p148" org.eventb.core.predicate="p_tail bn_Eq p_tail0∧p_head=p_head0">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p123" org.eventb.core.predicate="p_tail0 bn_Eq cons(p_head0,p_tail)⇒⊥∧bn_LSB(p_tail0)=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p145" org.eventb.core.predicate="p_tail0 bn_Eq bn_shiftLeft1(p_tail)⇒p_tail bn_Eq cons(bn_LSB(p_tail),p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="y bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq y⇔y bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="p_tail0 bn_Eq p_tail∧p_head0=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p80" org.eventb.core.predicate="⊤⇔⊤∧p_head0=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p83" org.eventb.core.predicate="p_tail bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p82" org.eventb.core.predicate="y=cons(p_head0,p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p144" org.eventb.core.predicate="p_tail bn_Eq cons(bn_LSB(p_tail),p_tail0)⇒cons(bn_LSB(p_tail),p_tail0) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="p_head0=bn_LSB(p_tail0)∧p_tail bn_Eq bn_shiftLeft1(p_tail0)⇒p_tail0 bn_Eq cons(p_head0,p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p132" org.eventb.core.predicate="¬p_head0=bn_LSB(p_tail)∨¬⊥">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq cons(p_head,p_tail)⇔p_tail0 bn_Eq p_tail∧p_head0=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="p_head0=bn_LSB(p_tail0)∧p_tail bn_Eq bn_shiftLeft1(p_tail0)⇔p_tail0 bn_Eq cons(p_head0,p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p70" org.eventb.core.predicate="¬⊥∨¬p_tail0 bn_Eq bn_shiftLeft1(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p153" org.eventb.core.predicate="y=cons(p_head,p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="p_head=p_head0">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p76" org.eventb.core.predicate="¬p_head0=p_head0∨¬p_tail0 bn_Eq bn_shiftLeft1(cons(p_head0,p_tail))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_isZero(y)⇔y bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="bn_shiftLeft1(p_tail) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p81" org.eventb.core.predicate="p_tail0=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p133" org.eventb.core.predicate="⊤∧p_tail0 bn_Eq bn_shiftLeft1(p_tail)⇒p_tail bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="¬cons(p_head0,p_tail0) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p68" org.eventb.core.predicate="¬p_head0=bn_LSB(p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p112" org.eventb.core.predicate="p_head0=bn_LSB(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p150" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq cons(p_head,p_tail)⇔⊤∧⊤">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p105" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq p_tail0⇔bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p77" org.eventb.core.predicate="¬p_tail0 bn_Eq bn_shiftLeft1(cons(p_head0,p_tail))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p116" org.eventb.core.predicate="p_tail0 bn_Eq cons(p_head0,p_tail)⇒⊥∧⊤">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="x=cons(p_head0,p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p90" org.eventb.core.predicate="⊥⇒bn_shiftLeft1(p_tail) bn_Eq p_tail∧⊥">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p121" org.eventb.core.predicate="bn_LSB(p_tail0)=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="p_tail0 bn_Eq bn_shiftLeft1(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x bn_Eq y⇔y bn_Eq x"/>
<org.eventb.core.prPred name="p72" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq cons(p_head0,p_tail)⇔p_tail0 bn_Eq p_tail∧p_head0=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="p_tail bn_Eq cons(p_head0,p_tail0)⇒bn_shiftLeft1(p_tail) bn_Eq p_tail0∧bn_LSB(p_tail)=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p152" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p126" org.eventb.core.predicate="p_head0=bn_LSB(p_tail0)∧⊤⇒⊥∧bn_LSB(p_tail0)=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p85" org.eventb.core.predicate="p_tail bn_Eq cons(p_head0,p_tail)⇒bn_shiftLeft1(p_tail) bn_Eq p_tail∧bn_LSB(p_tail)=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p93" org.eventb.core.predicate="¬p_tail0=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p78" org.eventb.core.predicate="¬p_tail0 bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p122" org.eventb.core.predicate="p_tail bn_Eq bn_shiftLeft1(p_tail0)⇒bn_shiftLeft1(p_tail0) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="p_tail bn_Eq p_tail0∧p_head=p_head0⇔cons(p_head0,p_tail0) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p91" org.eventb.core.predicate="⊥∧p_tail bn_Eq bn_shiftLeft1(p_tail)⇒⊥">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p66" org.eventb.core.predicate="⊥⇒p_tail bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p59" org.eventb.core.predicate="¬p_tail bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p115" org.eventb.core.predicate="bn_shiftLeft1(p_tail0) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p95" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="⊤∧⊤⇒p_tail bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p58" org.eventb.core.predicate="p_tail bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p100" org.eventb.core.predicate="p_tail0 bn_Eq cons(p_head0,nil ⦂ List(BOOL))⇒p_head0=bn_LSB(p_tail0)∧(nil ⦂ List(BOOL)) bn_Eq bn_shiftLeft1(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p69" org.eventb.core.predicate="p_tail bn_Eq cons(p_head0,p_tail0)⇒bn_shiftLeft1(p_tail) bn_Eq p_tail0∧⊥">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p96" org.eventb.core.predicate="x=cons(p_head0,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p129" org.eventb.core.predicate="¬p_head0=bn_LSB(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p86" org.eventb.core.predicate="p_head0=bn_LSB(p_tail)∧p_tail bn_Eq bn_shiftLeft1(p_tail)⇒p_tail bn_Eq cons(p_head0,p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p120" org.eventb.core.predicate="p_tail0 bn_Eq cons(p_head0,p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="∀x⦂List(BOOL)·(nil ⦂ List(BOOL)) bn_Eq x⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq (nil ⦂ List(BOOL))⇔(nil ⦂ List(BOOL)) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="y=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p92" org.eventb.core.predicate="⊥⇒⊥∧p_tail bn_Eq bn_shiftLeft1(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p94" org.eventb.core.predicate="p_tail=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="bn_isZero(y)⇔bn_isZero(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p147" org.eventb.core.predicate="p_tail0 bn_Eq p_tail∧p_head0=p_head⇒p_tail bn_Eq p_tail0∧p_head=p_head0">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p146" org.eventb.core.predicate="p_head0=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p136" org.eventb.core.predicate="y=cons(bn_LSB(p_tail),p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p117" org.eventb.core.predicate="⊤∧⊤⇒p_tail0 bn_Eq cons(p_head0,p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="p_tail bn_Eq (nil ⦂ List(BOOL))⇔(nil ⦂ List(BOOL)) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="p_head0=bn_LSB(p_tail)∧p_tail0 bn_Eq bn_shiftLeft1(p_tail)⇒p_tail bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p99" org.eventb.core.predicate="p_head0=bn_LSB(p_tail0)∧(nil ⦂ List(BOOL)) bn_Eq bn_shiftLeft1(p_tail0)⇒p_tail0 bn_Eq cons(p_head0,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p67" org.eventb.core.predicate="¬p_head0=bn_LSB(p_tail)∨¬p_tail0 bn_Eq bn_shiftLeft1(p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="bn_shiftLeft1(p_tail) bn_Eq p_tail0∧bn_LSB(p_tail)=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p113" org.eventb.core.predicate="p_tail bn_Eq bn_shiftLeft1(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p64" org.eventb.core.predicate="bn_LSB(p_tail)=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="p_tail0 bn_Eq cons(p_head0,p_tail)⇒p_head0=bn_LSB(p_tail0)∧p_tail bn_Eq bn_shiftLeft1(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))⇔bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="∀yB⦂BOOL,zB⦂BOOL,y⦂List(BOOL),z⦂List(BOOL)·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
<org.eventb.core.prPred name="p104" org.eventb.core.predicate="¬p_tail0=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p143" org.eventb.core.predicate="p_tail0 bn_Eq cons(bn_LSB(p_tail),p_tail)⇒bn_LSB(p_tail)=bn_LSB(p_tail0)∧p_tail bn_Eq bn_shiftLeft1(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="y">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e5" org.eventb.core.expression="p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r17" org.eventb.core.prRID="org.eventb.core.seqprover.impCase"/>
<org.eventb.core.prReas name="r18" org.eventb.core.prRID="org.eventb.core.seqprover.rn"/>
<org.eventb.core.prReas name="r16" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRewrites"/>
<org.eventb.core.prReas name="r14" org.eventb.core.prRID="org.eventb.core.seqprover.cut"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r21" org.eventb.core.prRID="org.eventb.core.seqprover.he:1"/>
<org.eventb.core.prReas name="r15" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r19" org.eventb.core.prRID="org.eventb.core.seqprover.disjE"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.mngHyp"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.eqvLR"/>
<org.eventb.core.prReas name="r20" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="bn_Eq expand/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="x,y" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p2,p3"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="bn_remTrailingZeros(x)=y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_remTrailingZeros(y)=y∧x bn_Eq y⇒bn_remTrailingZeros(x)=y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="x bn_Eq y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_remTrailingZeros(y)=y∧x bn_Eq y⇒bn_remTrailingZeros(x)=y"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="bn_remTrailingZeros(y)=y">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="Testing/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,p_tail0,x,y,p_head0" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p2,p3">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p7"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p2,p3"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(nil)=nil" org.eventb.core.prHyps="p6">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst x)" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p12">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p11"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p12" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p13"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p13" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p14"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p15">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst x)" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p16" org.eventb.core.prHyps="p14" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p18"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isZero(x)⇔bn_remTrailingZeros(x)=nil"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Eq nil⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p19,p20">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head,p_tail)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p19">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p21"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p22"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p2,p3"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with bn_remTrailingZeros(x)=p_tail" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="p20">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p27">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p19" org.eventb.core.prInfHyps="p24"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p21" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p22" org.eventb.core.prInfHyps="p26"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p21,p19,p22"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(p_head,bn_remTrailingZeros(x)))=cons(p_head,bn_remTrailingZeros(x))" org.eventb.core.prHyps="p25">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p28,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p25"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p28"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p29">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p28" org.eventb.core.prHyps="p29" org.eventb.core.prInfHyps="p30"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p30" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p31"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p29">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p24" org.eventb.core.prInfHyps="p32"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p26" org.eventb.core.prInfHyps="p33"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p24,p26"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p35">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst x)" org.eventb.core.prHyps="p35">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p31">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p35"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p36">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p41">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p38"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p32" org.eventb.core.prInfHyps="p39"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p33" org.eventb.core.prInfHyps="p40"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p20,p32,p31,p33"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p41" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p18">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p43">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(TRUE,bn_remTrailingZeros(nil)))" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p44">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p43"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p44" org.eventb.core.prHyps="p40" org.eventb.core.prInfHyps="p45"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p45" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p46"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on bn_isZero(cons(TRUE,bn_remTrailingZeros(nil)))" org.eventb.core.prHyps="p46">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p47,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p46"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p47"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p47" org.eventb.core.prInfHyps="p48,p49"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p47"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p48" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p18"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·nil bn_Eq x⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p50,p51">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p50">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p56">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p52"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p53"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p32" org.eventb.core.prInfHyps="p54"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p33" org.eventb.core.prInfHyps="p55"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p20,p32,p31,p33"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p56" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p57" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p58">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p57" org.eventb.core.prHyps="p58">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p59">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p59" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p60">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p60" org.eventb.core.prHyps="p58">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p61">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p61" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p62">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p62" org.eventb.core.prHyps="p58">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p68">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p50" org.eventb.core.prInfHyps="p63"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p52" org.eventb.core.prInfHyps="p64"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p53" org.eventb.core.prInfHyps="p65"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p54" org.eventb.core.prInfHyps="p66"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p55" org.eventb.core.prInfHyps="p67"/>
<org.eventb.core.prHypAction name="DESELECT5" org.eventb.core.prHyps="p50,p53,p55,p54,p52"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p68" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p69" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p69" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p51">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p51" org.eventb.core.prHyps="p51"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p70">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p57" org.eventb.core.prHyps="p70">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p71">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p71" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p73">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p70" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p72"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p73" org.eventb.core.prHyps="p72">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p79">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p50" org.eventb.core.prInfHyps="p74"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p52" org.eventb.core.prInfHyps="p75"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p53" org.eventb.core.prInfHyps="p76"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p54" org.eventb.core.prInfHyps="p77"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p55" org.eventb.core.prInfHyps="p78"/>
<org.eventb.core.prHypAction name="DESELECT5" org.eventb.core.prHyps="p50,p53,p55,p54,p52"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p79" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p80" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p80" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p81">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p82">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst FALSE,TRUE,p_tail0,bn_remTrailingZeros(cons(FALSE,p_tail0)))" org.eventb.core.prHyps="p82">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p83">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p82"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p83" org.eventb.core.prHyps="p78" org.eventb.core.prInfHyps="p84"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p84" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p18"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2,e3,e4,e5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p58"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_remTrailingZeros(bn_remTrailingZeros(x))=bn_remTrailingZeros(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p85">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p28" org.eventb.core.prHyps="p85" org.eventb.core.prInfHyps="p86"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p85" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p87"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p86" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p88"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p87">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p92">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p24" org.eventb.core.prInfHyps="p89"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p26" org.eventb.core.prInfHyps="p90"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p88" org.eventb.core.prInfHyps="p91"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p24,p26,p88"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p92" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p92" org.eventb.core.prHyps="p36">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p92" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p96">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p89" org.eventb.core.prInfHyps="p93"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p90" org.eventb.core.prInfHyps="p94"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p91" org.eventb.core.prInfHyps="p95"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p20,p89,p90,p91"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p96" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p97" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p97" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p18">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on COND(¬bn_isZero(bn_remTrailingZeros(nil)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(nil))),nil)=cons(FALSE,bn_remTrailingZeros(nil))" org.eventb.core.prHyps="p95">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9,p98">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p95"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p98"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on COND(¬bn_isZero(nil),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(nil))),nil)=cons(FALSE,bn_remTrailingZeros(nil))" org.eventb.core.prHyps="p98">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p99,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p98"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p99"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p99" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p18"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p92" org.eventb.core.prHyps="p50,p100">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p92" org.eventb.core.prHyps="p50">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p104">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p52"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p89" org.eventb.core.prInfHyps="p101"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p90" org.eventb.core.prInfHyps="p102"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p91" org.eventb.core.prInfHyps="p103"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p20,p89,p90,p91"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p104" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p105" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p105" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p106" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p58">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p106" org.eventb.core.prHyps="p58">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p107">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p107" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p108">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p108" org.eventb.core.prHyps="p58">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p112">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p50" org.eventb.core.prInfHyps="p63"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p52" org.eventb.core.prInfHyps="p64"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p101" org.eventb.core.prInfHyps="p109"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p102" org.eventb.core.prInfHyps="p110"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p103" org.eventb.core.prInfHyps="p111"/>
<org.eventb.core.prHypAction name="DESELECT5" org.eventb.core.prHyps="p50,p103,p102,p101,p52"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p112" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p18">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on COND(¬bn_isZero(bn_remTrailingZeros(cons(TRUE,p_tail0))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(TRUE,p_tail0)))),nil)=cons(FALSE,bn_remTrailingZeros(cons(TRUE,p_tail0)))" org.eventb.core.prHyps="p111">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9,p113">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p111"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p113"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p113" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p114"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on COND(¬bn_isZero(cons(TRUE,bn_remTrailingZeros(p_tail0))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(TRUE,p_tail0)))),nil)=cons(FALSE,bn_remTrailingZeros(cons(TRUE,p_tail0)))" org.eventb.core.prHyps="p114">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9,p115">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p114"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p115"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p115" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p65"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(bn_remTrailingZeros(cons(TRUE,p_tail0)))=bn_remTrailingZeros(cons(TRUE,p_tail0))" org.eventb.core.prHyps="p65">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9,p116">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p65"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p116"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p116" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p117"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(TRUE,bn_remTrailingZeros(p_tail0)))=bn_remTrailingZeros(cons(TRUE,p_tail0))" org.eventb.core.prHyps="p117">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p118,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p117"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p118"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p118" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p119"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on cons(TRUE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail0)))=bn_remTrailingZeros(cons(TRUE,p_tail0))" org.eventb.core.prHyps="p119">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p120,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p119"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p120"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p120" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p121"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on cons(TRUE,p_tail0) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(TRUE,p_tail0)))" org.eventb.core.prHyps="p110">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p122,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p110"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p122"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p122" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p123"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p82">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst TRUE,FALSE,p_tail0,cons(TRUE,bn_remTrailingZeros(p_tail0)))" org.eventb.core.prHyps="p82">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p124">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p82"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p124" org.eventb.core.prHyps="p123" org.eventb.core.prInfHyps="p125"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p125" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p18"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e2,e4,e6"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p70">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p106" org.eventb.core.prHyps="p70">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p126">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p126" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p127">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p70" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p72"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p127" org.eventb.core.prHyps="p72">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p131">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p50" org.eventb.core.prInfHyps="p74"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p52" org.eventb.core.prInfHyps="p75"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p101" org.eventb.core.prInfHyps="p128"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p102" org.eventb.core.prInfHyps="p129"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p103" org.eventb.core.prInfHyps="p130"/>
<org.eventb.core.prHypAction name="DESELECT5" org.eventb.core.prHyps="p50,p103,p102,p101,p52"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on COND(¬bn_isZero(bn_remTrailingZeros(cons(FALSE,p_tail0))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(FALSE,p_tail0)))),nil)=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))" org.eventb.core.prHyps="p130">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9,p132">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p130"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p132"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p132" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p133"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on COND(¬bn_isZero(COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(FALSE,p_tail0)))),nil)=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))" org.eventb.core.prHyps="p133">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p134,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p133"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p134"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p134" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p135"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on COND(¬bn_isZero(COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil)),cons(FALSE,bn_remTrailingZeros(COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil))),nil)=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))" org.eventb.core.prHyps="p135">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9,p136">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p135"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p136"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p136" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p137"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with COND(¬bn_isZero(COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil)),cons(FALSE,bn_remTrailingZeros(COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil))),nil)=cons(FALSE,COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil))" org.eventb.core.prGoal="p131" org.eventb.core.prHyps="p137">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p138">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p82">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst FALSE,FALSE,p_tail0,bn_remTrailingZeros(cons(FALSE,p_tail0)))" org.eventb.core.prHyps="p82">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p139">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p82"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p139" org.eventb.core.prHyps="p129" org.eventb.core.prInfHyps="p140"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p140" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p141"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on p_tail0 bn_Eq bn_remTrailingZeros(cons(FALSE,p_tail0))" org.eventb.core.prHyps="p141">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9,p142">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p141"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p142"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p142" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p143"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (bn_isZero(p_tail0))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p144">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p144" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p144">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p137" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p145"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p143" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p146"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p145" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p147"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p146" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p148"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on COND(¬bn_isZero(cons(FALSE,bn_remTrailingZeros(p_tail0))),cons(FALSE,bn_remTrailingZeros(cons(FALSE,bn_remTrailingZeros(p_tail0)))),nil)=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))" org.eventb.core.prHyps="p147">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9,p149">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p147"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p149"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p149" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p150"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on COND(¬bn_isZero(cons(FALSE,bn_remTrailingZeros(p_tail0))),cons(FALSE,COND(¬bn_isZero(bn_remTrailingZeros(p_tail0)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail0))),nil)),nil)=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))" org.eventb.core.prHyps="p150">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9,p151">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p150"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p151"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p151" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p152"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p82">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst FALSE,FALSE,p_tail0,bn_remTrailingZeros(cons(FALSE,p_tail0)))" org.eventb.core.prHyps="p82">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p139">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p82"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p139" org.eventb.core.prHyps="p129,p141" org.eventb.core.prInfHyps="p153"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p153"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,p_tail0))=p_tail" org.eventb.core.prHyps="p75">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9,p154">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p75"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p154"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p144" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p144">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p154" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p155"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p155" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p156"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p157">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail0)" org.eventb.core.prHyps="p157">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p158">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p157"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p144" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p144">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p158" org.eventb.core.prHyps="p148" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p18"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e4"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Eq cons(FALSE,bn_remTrailingZeros(x))⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2,e2,e4,e5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p144">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p138" org.eventb.core.prHyps="p144">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p161">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p137" org.eventb.core.prHyps="p144" org.eventb.core.prInfHyps="p159"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p143" org.eventb.core.prHyps="p144" org.eventb.core.prInfHyps="p160"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p161" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p164">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p159" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p162"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p160" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p163"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p164" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p165" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p165" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p144"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2,e2,e4,e5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p58"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p29"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="TRUE=FALSE∧bn_isZero(bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="x bn_Eq cons(TRUE,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p93" org.eventb.core.predicate="y=cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p69" org.eventb.core.predicate="bn_remTrailingZeros(p_tail0)=COND(TRUE=TRUE∨¬bn_isZero(p_tail0),cons(TRUE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL))=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="∀x⦂List(BOOL)·(nil ⦂ List(BOOL)) bn_Eq x⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p74" org.eventb.core.predicate="x=cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p100" org.eventb.core.predicate="bn_remTrailingZeros(p_tail0)=cons(FALSE,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="⊤⇔bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_remTrailingZeros(y)=y∧x bn_Eq y⇒bn_remTrailingZeros(x)=y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="x=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p80" org.eventb.core.predicate="COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(TRUE,COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p95" org.eventb.core.predicate="COND(¬bn_isZero(bn_remTrailingZeros(nil ⦂ List(BOOL))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(nil ⦂ List(BOOL)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p161" org.eventb.core.predicate="COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=COND(¬bn_isZero(COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))),cons(FALSE,bn_remTrailingZeros(COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p88" org.eventb.core.predicate="COND(¬bn_isZero(bn_remTrailingZeros(x)),cons(p_head,bn_remTrailingZeros(bn_remTrailingZeros(x))),nil ⦂ List(BOOL))=cons(p_head,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p96" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p104" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head0,p_tail0))=cons(FALSE,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p64" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,p_tail0))=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="bn_remTrailingZeros(y)=y">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p89" org.eventb.core.predicate="y=cons(FALSE,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p99" org.eventb.core.predicate="COND(¬⊤,cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(nil ⦂ List(BOOL)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="COND(p_head=TRUE∨¬bn_isZero(bn_remTrailingZeros(x)),cons(p_head,bn_remTrailingZeros(bn_remTrailingZeros(x))),nil ⦂ List(BOOL))=cons(p_head,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="bn_remTrailingZeros(x)=y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p79" org.eventb.core.predicate="COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(TRUE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p138" org.eventb.core.predicate="COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=COND(¬bn_isZero(COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))),cons(FALSE,bn_remTrailingZeros(COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p152" org.eventb.core.predicate="COND(¬bn_isZero(bn_remTrailingZeros(p_tail0)),cons(FALSE,COND(¬bn_isZero(bn_remTrailingZeros(p_tail0)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail0))),nil ⦂ List(BOOL))),nil ⦂ List(BOOL))=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p120" org.eventb.core.predicate="cons(TRUE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail0)))=COND(TRUE=TRUE∨¬bn_isZero(p_tail0),cons(TRUE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p75" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,p_tail0))=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="⊤⇔⊥"/>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="bn_isZero(bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="x bn_Eq cons(p_head,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(x))=bn_remTrailingZeros(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p90" org.eventb.core.predicate="x bn_Eq cons(FALSE,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p130" org.eventb.core.predicate="COND(¬bn_isZero(bn_remTrailingZeros(cons(FALSE,p_tail0))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(FALSE,p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p62" org.eventb.core.predicate="bn_remTrailingZeros(p_tail0)=bn_remTrailingZeros(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p139" org.eventb.core.predicate="cons(FALSE,p_tail0) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))⇔p_tail0 bn_Eq bn_remTrailingZeros(cons(FALSE,p_tail0))∧FALSE=FALSE">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p116" org.eventb.core.predicate="bn_remTrailingZeros(COND(TRUE=TRUE∨¬bn_isZero(p_tail0),cons(TRUE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))=bn_remTrailingZeros(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="bn_remTrailingZeros(x)=cons(TRUE,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="y=cons(TRUE,bn_remTrailingZeros(nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p125" org.eventb.core.predicate="⊤⇔p_tail0 bn_Eq cons(TRUE,bn_remTrailingZeros(p_tail0))∧TRUE=FALSE">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p135" org.eventb.core.predicate="COND(¬bn_isZero(COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))),cons(FALSE,bn_remTrailingZeros(COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(cons(p_head0,p_tail0)))=bn_remTrailingZeros(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p115" org.eventb.core.predicate="COND(¬(TRUE=FALSE∧bn_isZero(bn_remTrailingZeros(p_tail0))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(TRUE,p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(TRUE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p59" org.eventb.core.predicate="COND(⊤∨¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(TRUE,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p67" org.eventb.core.predicate="cons(TRUE,p_tail0) bn_Eq cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p82" org.eventb.core.predicate="∀yB⦂BOOL,zB⦂BOOL,y⦂List(BOOL),z⦂List(BOOL)·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
<org.eventb.core.prPred name="p144" org.eventb.core.predicate="bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p86" org.eventb.core.predicate="COND(⊥∨¬bn_isZero(bn_remTrailingZeros(x)),cons(p_head,bn_remTrailingZeros(bn_remTrailingZeros(x))),nil ⦂ List(BOOL))=cons(p_head,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p142" org.eventb.core.predicate="p_tail0 bn_Eq COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p68" org.eventb.core.predicate="bn_remTrailingZeros(p_tail0)=bn_remTrailingZeros(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL))=cons(TRUE,bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head0,p_tail0))=cons(TRUE,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p94" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="x bn_Eq y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="x bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p72" org.eventb.core.predicate="p_head0=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p98" org.eventb.core.predicate="COND(¬bn_isZero(nil ⦂ List(BOOL)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(nil ⦂ List(BOOL)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p146" org.eventb.core.predicate="p_tail0 bn_Eq COND(¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="y=cons(TRUE,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p163" org.eventb.core.predicate="p_tail0 bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p97" org.eventb.core.predicate="(nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p58" org.eventb.core.predicate="p_head0=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p155" org.eventb.core.predicate="COND(FALSE=TRUE∨¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p91" org.eventb.core.predicate="COND(¬bn_isZero(bn_remTrailingZeros(x)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(x))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p132" org.eventb.core.predicate="COND(¬bn_isZero(COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(FALSE,p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="bn_remTrailingZeros(x)=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="x bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p78" org.eventb.core.predicate="cons(FALSE,p_tail0) bn_Eq cons(TRUE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p105" org.eventb.core.predicate="COND(p_head0=TRUE∨¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p107" org.eventb.core.predicate="COND(⊤∨¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(FALSE,COND(⊤∨¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p159" org.eventb.core.predicate="COND(¬bn_isZero(COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))),cons(FALSE,bn_remTrailingZeros(COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))),nil ⦂ List(BOOL))=cons(FALSE,COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p150" org.eventb.core.predicate="COND(¬bn_isZero(cons(FALSE,bn_remTrailingZeros(p_tail0))),cons(FALSE,COND(¬bn_isZero(bn_remTrailingZeros(p_tail0)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail0))),nil ⦂ List(BOOL))),nil ⦂ List(BOOL))=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="x bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p128" org.eventb.core.predicate="y=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p165" org.eventb.core.predicate="(nil ⦂ List(BOOL))=COND(¬⊤,cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL))),nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p124" org.eventb.core.predicate="cons(TRUE,p_tail0) bn_Eq cons(FALSE,cons(TRUE,bn_remTrailingZeros(p_tail0)))⇔p_tail0 bn_Eq cons(TRUE,bn_remTrailingZeros(p_tail0))∧TRUE=FALSE">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p140" org.eventb.core.predicate="⊤⇔p_tail0 bn_Eq bn_remTrailingZeros(cons(FALSE,p_tail0))∧FALSE=FALSE">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p92" org.eventb.core.predicate="bn_remTrailingZeros(x)=cons(FALSE,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p164" org.eventb.core.predicate="(nil ⦂ List(BOOL))=COND(¬bn_isZero(nil ⦂ List(BOOL)),cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL))),nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p66" org.eventb.core.predicate="y=cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p154" org.eventb.core.predicate="COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p137" org.eventb.core.predicate="COND(¬bn_isZero(COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))),cons(FALSE,bn_remTrailingZeros(COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))),nil ⦂ List(BOOL))=cons(FALSE,COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p127" org.eventb.core.predicate="COND(¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(FALSE,COND(¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(nil ⦂ List(BOOL)))=bn_remTrailingZeros(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="TRUE=FALSE"/>
<org.eventb.core.prPred name="p110" org.eventb.core.predicate="cons(TRUE,p_tail0) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(TRUE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p160" org.eventb.core.predicate="p_tail0 bn_Eq COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="bn_isZero(cons(TRUE,bn_remTrailingZeros(nil ⦂ List(BOOL))))"/>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p133" org.eventb.core.predicate="COND(¬bn_isZero(COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(FALSE,p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p134" org.eventb.core.predicate="COND(¬bn_isZero(COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))),cons(FALSE,bn_remTrailingZeros(COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="bn_remTrailingZeros(x)=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p129" org.eventb.core.predicate="cons(FALSE,p_tail0) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p108" org.eventb.core.predicate="p_head0=FALSE∧bn_remTrailingZeros(p_tail0)=cons(p_head0,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p158" org.eventb.core.predicate="p_tail0 bn_Eq cons(FALSE,bn_remTrailingZeros(p_tail0))⇔bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p101" org.eventb.core.predicate="y=cons(FALSE,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="(nil ⦂ List(BOOL))=cons(TRUE,bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p123" org.eventb.core.predicate="cons(TRUE,p_tail0) bn_Eq cons(FALSE,cons(TRUE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p141" org.eventb.core.predicate="p_tail0 bn_Eq bn_remTrailingZeros(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isZero(x)⇔bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="COND(⊤∨¬bn_isZero(bn_remTrailingZeros(x)),cons(p_head,bn_remTrailingZeros(bn_remTrailingZeros(x))),nil ⦂ List(BOOL))=cons(p_head,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p85" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p131" org.eventb.core.predicate="COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(FALSE,COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="COND(p_head0=TRUE∨¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(TRUE,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p83" org.eventb.core.predicate="cons(FALSE,p_tail0) bn_Eq cons(TRUE,bn_remTrailingZeros(cons(FALSE,p_tail0)))⇔p_tail0 bn_Eq bn_remTrailingZeros(cons(FALSE,p_tail0))∧FALSE=TRUE">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p102" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p117" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,bn_remTrailingZeros(p_tail0)))=bn_remTrailingZeros(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p84" org.eventb.core.predicate="⊤⇔p_tail0 bn_Eq bn_remTrailingZeros(cons(FALSE,p_tail0))∧FALSE=TRUE">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="bn_isZero(x)⇔bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p143" org.eventb.core.predicate="p_tail0 bn_Eq COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p126" org.eventb.core.predicate="COND(⊥∨¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(FALSE,COND(⊥∨¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p87" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p122" org.eventb.core.predicate="cons(TRUE,p_tail0) bn_Eq cons(FALSE,COND(TRUE=TRUE∨¬bn_isZero(p_tail0),cons(TRUE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(TRUE,bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(TRUE,bn_remTrailingZeros(nil ⦂ List(BOOL)))⇔bn_isZero(cons(TRUE,bn_remTrailingZeros(nil ⦂ List(BOOL))))"/>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head0,p_tail0))=p_tail">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p60" org.eventb.core.predicate="p_head0=TRUE∧bn_remTrailingZeros(p_tail0)=bn_remTrailingZeros(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p77" org.eventb.core.predicate="y=cons(TRUE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p118" org.eventb.core.predicate="COND(TRUE=TRUE∨¬bn_isZero(bn_remTrailingZeros(p_tail0)),cons(TRUE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail0))),nil ⦂ List(BOOL))=bn_remTrailingZeros(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p145" org.eventb.core.predicate="COND(¬bn_isZero(COND(¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))),cons(FALSE,bn_remTrailingZeros(COND(¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))),nil ⦂ List(BOOL))=cons(FALSE,COND(¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p149" org.eventb.core.predicate="COND(¬bn_isZero(cons(FALSE,bn_remTrailingZeros(p_tail0))),cons(FALSE,COND(FALSE=TRUE∨¬bn_isZero(bn_remTrailingZeros(p_tail0)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail0))),nil ⦂ List(BOOL))),nil ⦂ List(BOOL))=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="y=cons(p_head,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p109" org.eventb.core.predicate="y=cons(FALSE,bn_remTrailingZeros(cons(TRUE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="bn_remTrailingZeros(x)=cons(p_head,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p63" org.eventb.core.predicate="x=cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p162" org.eventb.core.predicate="COND(¬bn_isZero(nil ⦂ List(BOOL)),cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL))),nil ⦂ List(BOOL))=cons(FALSE,nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,p_tail))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="bn_remTrailingZeros(p_tail0)=cons(TRUE,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p61" org.eventb.core.predicate="⊤∧bn_remTrailingZeros(p_tail0)=bn_remTrailingZeros(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p73" org.eventb.core.predicate="COND(¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(TRUE,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p112" org.eventb.core.predicate="TRUE=FALSE∧bn_remTrailingZeros(p_tail0)=cons(TRUE,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p157" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Eq cons(FALSE,bn_remTrailingZeros(x))⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,bn_remTrailingZeros(x)))=cons(p_head,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p153" org.eventb.core.predicate="⊤⇔⊤∧FALSE=FALSE"/>
<org.eventb.core.prPred name="p136" org.eventb.core.predicate="COND(¬bn_isZero(COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))),cons(FALSE,bn_remTrailingZeros(COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))),nil ⦂ List(BOOL))=cons(FALSE,COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p65" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(cons(TRUE,p_tail0)))=bn_remTrailingZeros(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p114" org.eventb.core.predicate="COND(¬bn_isZero(cons(TRUE,bn_remTrailingZeros(p_tail0))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(TRUE,p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(TRUE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq cons(TRUE,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="y=cons(TRUE,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p76" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(cons(FALSE,p_tail0)))=bn_remTrailingZeros(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p111" org.eventb.core.predicate="COND(¬bn_isZero(bn_remTrailingZeros(cons(TRUE,p_tail0))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(TRUE,p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(TRUE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p106" org.eventb.core.predicate="COND(p_head0=TRUE∨¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(FALSE,COND(p_head0=TRUE∨¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p156" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(p_tail0))=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p119" org.eventb.core.predicate="cons(TRUE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail0)))=bn_remTrailingZeros(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p103" org.eventb.core.predicate="COND(¬bn_isZero(bn_remTrailingZeros(cons(p_head0,p_tail0))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(p_head0,p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p81" org.eventb.core.predicate="COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(TRUE,COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_remTrailingZeros(y)=y∧x bn_Eq y⇒bn_remTrailingZeros(x)=y"/>
<org.eventb.core.prPred name="p70" org.eventb.core.predicate="¬p_head0=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_remTrailingZeros(bn_remTrailingZeros(x))=bn_remTrailingZeros(x)"/>
<org.eventb.core.prPred name="p147" org.eventb.core.predicate="COND(¬bn_isZero(cons(FALSE,bn_remTrailingZeros(p_tail0))),cons(FALSE,bn_remTrailingZeros(cons(FALSE,bn_remTrailingZeros(p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="⊤⇔bn_isZero(cons(TRUE,bn_remTrailingZeros(nil ⦂ List(BOOL))))"/>
<org.eventb.core.prPred name="p121" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(p_tail0))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p151" org.eventb.core.predicate="COND(¬(FALSE=FALSE∧bn_isZero(bn_remTrailingZeros(p_tail0))),cons(FALSE,COND(¬bn_isZero(bn_remTrailingZeros(p_tail0)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail0))),nil ⦂ List(BOOL))),nil ⦂ List(BOOL))=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p148" org.eventb.core.predicate="p_tail0 bn_Eq cons(FALSE,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p71" org.eventb.core.predicate="COND(⊥∨¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(TRUE,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="y=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p113" org.eventb.core.predicate="COND(¬bn_isZero(COND(TRUE=TRUE∨¬bn_isZero(p_tail0),cons(TRUE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(TRUE,p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(TRUE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="TRUE"/>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="FALSE"/>
<org.eventb.core.prExpr name="e6" org.eventb.core.expression="cons(TRUE,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="cons(TRUE,bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prExpr name="e5" org.eventb.core.expression="bn_remTrailingZeros(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.he:1"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r14" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r15" org.eventb.core.prRID="org.eventb.core.seqprover.cut"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="remZeros(remZeros(x)) = remZeros(x)/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p6,p7">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p7">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_isZero(p_tail))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p11"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p18">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p19">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail)" org.eventb.core.prHyps="p19">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p20">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p19"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p20" org.eventb.core.prHyps="p9" org.eventb.core.prInfHyps="p21"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p21" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p22"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_remTrailingZeros(p_tail)=nil" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="p22">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p23"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="p23"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isZero(x)⇔bn_remTrailingZeros(x)=nil"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p26">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p27">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p29">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p31">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p32">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p10"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p36">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p11"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p37" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p37" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p38">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p38" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p39">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p39" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p41">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p41" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p18">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p6"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p26">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p27">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p29">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p43">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p43" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p44">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p44" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p45" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p45" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p46">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p46" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p47" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p47" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p48">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p48" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p49">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (¬bn_isZero(bn_remTrailingZeros(p_tail)))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p50">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p19">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail)" org.eventb.core.prHyps="p19">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p20">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p19"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p20" org.eventb.core.prHyps="p36" org.eventb.core.prInfHyps="p51"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p51" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p52"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p19">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail)" org.eventb.core.prHyps="p19">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p20">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p19"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p20" org.eventb.core.prHyps="p36,p52" org.eventb.core.prInfHyps="p53"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p53"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p54">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p54" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p55"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail)" org.eventb.core.prHyps="p55">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p56">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p55"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p50" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p50">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p56" org.eventb.core.prHyps="p52" org.eventb.core.prInfHyps="p57"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p57" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p58"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p58"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_remTrailingZeros(x)≠nil⇒¬bn_isZero(bn_remTrailingZeros(x))"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isZero(x)⇔bn_remTrailingZeros(x)=nil"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isZero(x)⇔bn_remTrailingZeros(x)=nil"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p50">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p49" org.eventb.core.prHyps="p50">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p59">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p59" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p6"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p50"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p10"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p9"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL))=bn_remTrailingZeros(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="bn_isZero(p_tail)⇔bn_remTrailingZeros(p_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="¬bn_remTrailingZeros(p_tail)=(nil ⦂ List(BOOL))⇒¬bn_isZero(bn_remTrailingZeros(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="COND(FALSE=TRUE∨¬bn_isZero(bn_remTrailingZeros(p_tail)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail))),nil ⦂ List(BOOL))=bn_remTrailingZeros(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(nil ⦂ List(BOOL)))=bn_remTrailingZeros(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,bn_remTrailingZeros(p_tail)))=COND(TRUE=TRUE∨¬⊥,cons(TRUE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,nil ⦂ List(BOOL)))=cons(TRUE,nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="COND(TRUE=TRUE∨¬bn_isZero(nil ⦂ List(BOOL)),cons(TRUE,bn_remTrailingZeros(nil ⦂ List(BOOL))),nil ⦂ List(BOOL))=cons(TRUE,nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="bn_remTrailingZeros(COND(FALSE=TRUE∨¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))=bn_remTrailingZeros(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(cons(FALSE,p_tail)))=bn_remTrailingZeros(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p59" org.eventb.core.predicate="COND(¬⊥,cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL))=bn_remTrailingZeros(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="¬bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isZero(x)⇔bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="bn_remTrailingZeros(COND(TRUE=TRUE∨¬bn_isZero(p_tail),cons(TRUE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))=bn_remTrailingZeros(cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(cons(TRUE,p_tail)))=COND(TRUE=TRUE∨¬bn_isZero(p_tail),cons(TRUE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="bn_remTrailingZeros(COND(FALSE=TRUE∨¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))=bn_remTrailingZeros(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="COND(TRUE=TRUE∨¬bn_isZero(bn_remTrailingZeros(p_tail)),cons(TRUE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail))),nil ⦂ List(BOOL))=cons(TRUE,bn_remTrailingZeros(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,bn_remTrailingZeros(p_tail)))=cons(TRUE,bn_remTrailingZeros(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="bn_remTrailingZeros(COND(TRUE=TRUE∨¬⊥,cons(TRUE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))=bn_remTrailingZeros(cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,bn_remTrailingZeros(p_tail)))=bn_remTrailingZeros(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(x))=bn_remTrailingZeros(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="bn_remTrailingZeros(COND(FALSE=TRUE∨¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))=bn_remTrailingZeros(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL))=COND(FALSE=TRUE∨¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="¬⊥⇒¬⊤"/>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(cons(TRUE,p_tail)))=bn_remTrailingZeros(cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="⊤⇔bn_remTrailingZeros(p_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="⊥⇔⊥"/>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(cons(TRUE,p_tail)))=cons(TRUE,bn_remTrailingZeros(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="COND(¬bn_isZero(bn_remTrailingZeros(p_tail)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail))),nil ⦂ List(BOOL))=bn_remTrailingZeros(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,bn_remTrailingZeros(p_tail)))=COND(TRUE=TRUE∨¬bn_isZero(p_tail),cons(TRUE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="¬bn_isZero(bn_remTrailingZeros(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_remTrailingZeros(x)≠(nil ⦂ List(BOOL))⇒¬bn_isZero(bn_remTrailingZeros(x))"/>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(p_tail))=bn_remTrailingZeros(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="∀x⦂List(BOOL)·¬bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))⇒¬bn_isZero(bn_remTrailingZeros(x))"/>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p58" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="bn_remTrailingZeros(COND(TRUE=TRUE∨¬bn_isZero(p_tail),cons(TRUE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))=cons(TRUE,bn_remTrailingZeros(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="⊥⇔bn_remTrailingZeros(p_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="¬bn_remTrailingZeros(p_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="bn_remTrailingZeros(COND(TRUE=TRUE∨¬⊤,cons(TRUE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))=cons(TRUE,bn_remTrailingZeros(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="x=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_remTrailingZeros(bn_remTrailingZeros(x))=bn_remTrailingZeros(x)"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,bn_remTrailingZeros(p_tail)))=bn_remTrailingZeros(cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="COND(¬bn_isZero(bn_remTrailingZeros(p_tail)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail))),nil ⦂ List(BOOL))=COND(FALSE=TRUE∨¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="COND(¬bn_isZero(bn_remTrailingZeros(p_tail)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail))),nil ⦂ List(BOOL))=COND(FALSE=TRUE∨¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL))=COND(FALSE=TRUE∨¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(cons(p_head,p_tail)))=bn_remTrailingZeros(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="COND(¬bn_isZero(bn_remTrailingZeros(p_tail)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(cons(TRUE,p_tail)))=COND(TRUE=TRUE∨¬⊤,cons(TRUE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.cut"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="remZeros ≠ nil ⇒ ¬(isZero)/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on ¬bn_remTrailingZeros(nil)=nil" org.eventb.core.prHyps="p6">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p12">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p12" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p11"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p11"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p13,p14">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p13">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on ¬bn_remTrailingZeros(cons(p_head,p_tail))=nil" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p18">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p18"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p19">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p19">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p18" org.eventb.core.prHyps="p19" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p20"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p19">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p13" org.eventb.core.prInfHyps="p23"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p26">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p27">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p27">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p29">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p18" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p32">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p27" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p30"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p28" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p31"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p30">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p35">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p13" org.eventb.core.prInfHyps="p33"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p34"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p13,p31"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_isZero(p_tail))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p36">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p39">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p31" org.eventb.core.prHyps="p36" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p34" org.eventb.core.prHyps="p36" org.eventb.core.prInfHyps="p38"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p39" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p37" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p11"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p38" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p11"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p11"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p40">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="p40">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p43">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p31" org.eventb.core.prHyps="p40" org.eventb.core.prInfHyps="p41"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p34" org.eventb.core.prHyps="p40" org.eventb.core.prInfHyps="p42"/>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p43" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p44">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p41"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p42"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p44" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p45" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p45" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p46">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p46" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p36"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p19"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="¬COND(¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="¬(FALSE=FALSE∧bn_isZero(bn_remTrailingZeros(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="¬bn_isZero(cons(TRUE,bn_remTrailingZeros(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="¬COND(⊤∨¬bn_isZero(p_tail),cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="¬(TRUE=FALSE∧⊥)"/>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="¬COND(p_head=TRUE∨¬bn_isZero(p_tail),cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="¬bn_isZero(cons(p_head,bn_remTrailingZeros(p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="¬COND(¬bn_isZero(p_tail),cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="¬bn_remTrailingZeros(cons(p_head,p_tail))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="¬bn_isZero(COND(¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="¬bn_isZero(COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="¬bn_isZero(cons(FALSE,bn_remTrailingZeros(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="¬bn_remTrailingZeros(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="¬bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="¬bn_isZero(bn_remTrailingZeros(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="¬(TRUE=FALSE∧bn_isZero(bn_remTrailingZeros(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="¬COND(⊥∨¬bn_isZero(p_tail),cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="¬(FALSE=FALSE∧⊥)"/>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="¬COND(¬⊤,cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_remTrailingZeros(x)≠(nil ⦂ List(BOOL))⇒¬bn_isZero(bn_remTrailingZeros(x))"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="¬bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))⇒¬bn_isZero(bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="¬bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="∀x⦂List(BOOL)·¬bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))⇒¬bn_isZero(bn_remTrailingZeros(x))"/>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="¬bn_isZero(COND(¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="¬(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="¬bn_isZero(COND(p_head=TRUE∨¬bn_isZero(p_tail),cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="¬bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="¬bn_isZero(COND(⊤∨¬bn_isZero(p_tail),cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="¬bn_isZero(COND(¬bn_isZero(p_tail),cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="¬COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="x=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="¬COND(¬⊥,cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="¬COND(¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="¬bn_isZero(bn_remTrailingZeros(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="¬bn_isZero(bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="¬bn_isZero(COND(⊥∨¬bn_isZero(p_tail),cons(p_head,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="¬bn_isZero(bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="¬⊤"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="ConsFalseToZero/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p8,p9">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p8">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p12">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p13"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p16">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst TRUE,FALSE,p_tail,bn_remTrailingZeros(cons(TRUE,p_tail)))" org.eventb.core.prHyps="p16">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p17">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p18" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p19"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p19"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1,e2,e3"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p20">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p20" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p21"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p21">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="p21">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p25">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p24"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p16">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst FALSE,FALSE,p_tail,bn_remTrailingZeros(cons(FALSE,p_tail)))" org.eventb.core.prHyps="p16">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p26">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with cons(FALSE,p_tail) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail)))⇔p_tail bn_Eq bn_remTrailingZeros(cons(FALSE,p_tail))" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="p27">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p28">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p30">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on cons(FALSE,p_tail) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail)))⇔p_tail bn_Eq bn_remTrailingZeros(cons(FALSE,p_tail))" org.eventb.core.prHyps="p27">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4,p31">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p27"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p31"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p31" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p32"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on cons(FALSE,p_tail) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail)))⇔p_tail bn_Eq COND(¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil)" org.eventb.core.prHyps="p32">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4,p33">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p32"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p33"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p33" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p34"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in goal" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p35">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p37" org.eventb.core.prHyps="p36">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p37" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p37">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p9" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p38"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p34" org.eventb.core.prHyps="p36" org.eventb.core.prInfHyps="p39"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p36" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p40"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p38" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p41"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p39" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p42"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p40" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p43"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p43" org.eventb.core.prHyps="p41" org.eventb.core.prInfHyps="p19"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p19"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p44">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p44" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="p37">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="p37">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p47">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p9" org.eventb.core.prHyps="p37" org.eventb.core.prInfHyps="p45"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p34" org.eventb.core.prHyps="p37" org.eventb.core.prInfHyps="p46"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p47" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p49">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p45" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p43"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p46" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p48"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p50">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail)" org.eventb.core.prHyps="p50">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p51">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p50"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p49" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p49">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p51" org.eventb.core.prHyps="p37" org.eventb.core.prInfHyps="p52"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p52" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p19"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p19"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Eq nil⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e1,e1,e2,e4"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p12"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="x bn_Eq cons(FALSE,bn_remTrailingZeros(x))⇔bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_isZero(cons(FALSE,nil ⦂ List(BOOL)))⇔bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(p_head,p_tail)))⇔bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL)))⇔bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="FALSE=FALSE∧bn_isZero(nil ⦂ List(BOOL))⇔bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="p_tail bn_Eq COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(TRUE,p_tail)))⇔TRUE=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="¬cons(TRUE,p_tail) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(TRUE,p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="p_tail bn_Eq COND(¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))⇒bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="p_tail bn_Eq COND(¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))⇔bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="p_tail bn_Eq COND(FALSE=TRUE∨¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))⇔bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="⊥⇔⊤"/>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="p_tail bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail)))⇔p_tail bn_Eq bn_remTrailingZeros(cons(FALSE,p_tail))∧FALSE=FALSE">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="∀yB⦂BOOL,zB⦂BOOL,y⦂List(BOOL),z⦂List(BOOL)·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="p_tail bn_Eq bn_remTrailingZeros(cons(FALSE,p_tail))⇔bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(FALSE,COND(¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))⇔p_tail bn_Eq COND(¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Eq cons(FALSE,bn_remTrailingZeros(x))⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="p_tail bn_Eq cons(FALSE,bn_remTrailingZeros(p_tail))⇔⊤">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(FALSE,COND(¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))⇔⊤">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="bn_isZero(p_tail)⇒p_tail bn_Eq COND(¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail)))⇔p_tail bn_Eq COND(¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_isZero(cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL))))⇔bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="¬p_tail bn_Eq cons(FALSE,bn_remTrailingZeros(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(p_head,p_tail)))⇔bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="p_tail bn_Eq COND(¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="⊤⇔p_tail bn_Eq bn_remTrailingZeros(cons(TRUE,p_tail))∧TRUE=FALSE">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="p_tail bn_Eq COND(¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="¬cons(FALSE,p_tail) bn_Eq cons(FALSE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(p_head,p_tail)))⇔⊤∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(TRUE,p_tail)))⇔p_tail bn_Eq bn_remTrailingZeros(cons(TRUE,p_tail))∧TRUE=FALSE">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail)))⇔bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="p_tail bn_Eq cons(FALSE,bn_remTrailingZeros(p_tail))⇔⊥">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(p_head,p_tail)))⇔p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail)))⇔p_tail bn_Eq COND(FALSE=TRUE∨¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="p_tail bn_Eq cons(FALSE,bn_remTrailingZeros(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="p_tail bn_Eq cons(FALSE,bn_remTrailingZeros(p_tail))⇔bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(FALSE,COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))⇔⊥">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="x=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(FALSE,COND(FALSE=TRUE∨¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)))⇔p_tail bn_Eq COND(¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="p_tail bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail)))⇔p_tail bn_Eq bn_remTrailingZeros(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="bn_remTrailingZeros(cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="TRUE"/>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="bn_remTrailingZeros(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="FALSE"/>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.eqvLR"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRewrites"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="Reducebn_remTrailingZerosLeft/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,p_tail0,x,y,p_head0" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p2,p3">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p7"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p2,p3"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(nil)=nil" org.eventb.core.prHyps="p6">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p6"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p13,p14">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p17">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(p_head,p_tail))" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p18">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p18" org.eventb.core.prHyps="p15" org.eventb.core.prInfHyps="p19"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p19" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p21">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,p_tail)" org.eventb.core.prHyps="p21">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p22">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p21"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p22" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p23"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p23" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p24,p25"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p29">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p14" org.eventb.core.prInfHyps="p26"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p15" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p15,p20,p14"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="p25">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p31">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀aB,b·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Eq nil⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p32,p33">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head,p_tail)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p32">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p36">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p34"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p35"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p2,p3"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with bn_remTrailingZeros(x)=p_tail" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="p33">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p40">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p32" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p34" org.eventb.core.prInfHyps="p38"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p35" org.eventb.core.prInfHyps="p39"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p34,p32,p35"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p45">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p33" org.eventb.core.prInfHyps="p41"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p37" org.eventb.core.prInfHyps="p42"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p38" org.eventb.core.prInfHyps="p43"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p39" org.eventb.core.prInfHyps="p44"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p37,p39,p33,p38"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p45" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p46" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p46" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p47">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(p_head,bn_remTrailingZeros(nil)))=cons(p_head,bn_remTrailingZeros(nil))" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p48,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p43"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p48"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on nil bn_Eq cons(p_head,bn_remTrailingZeros(nil))" org.eventb.core.prHyps="p44">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9,p49">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p44"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p49"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(p_head,nil))=cons(p_head,bn_remTrailingZeros(nil))" org.eventb.core.prHyps="p48">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9,p50">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p48"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p50"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on nil bn_Eq cons(p_head,nil)" org.eventb.core.prHyps="p49">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p51,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p49"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p51"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on y=cons(p_head,bn_remTrailingZeros(nil))" org.eventb.core.prHyps="p42">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p52,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p42"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p52"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(nil)=p_tail" org.eventb.core.prHyps="p41">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9,p53">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p41"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p53"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on bn_isZero(cons(p_head,nil))" org.eventb.core.prHyps="p51">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p54,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p51"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p54"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p54" org.eventb.core.prInfHyps="p24,p55"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p54"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p50" org.eventb.core.prInfHyps="p56"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p52" org.eventb.core.prInfHyps="p57"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p52,p50"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on bn_isZero(nil)" org.eventb.core.prHyps="p55">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p55"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,nil))=cons(FALSE,nil)" org.eventb.core.prHyps="p56">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p58,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p56"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p58"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p58" org.eventb.core.prHyps="p55" org.eventb.core.prInfHyps="p59"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p59" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p47"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p47"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="p60,p61">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="p60">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p66">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p33" org.eventb.core.prInfHyps="p62"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p37" org.eventb.core.prInfHyps="p63"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p38" org.eventb.core.prInfHyps="p64"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p39" org.eventb.core.prInfHyps="p65"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p37,p39,p33,p38"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p67">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head0,p_head,p_tail0,bn_remTrailingZeros(cons(p_head0,p_tail0)))" org.eventb.core.prHyps="p67">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p68">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p67"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p68" org.eventb.core.prHyps="p65" org.eventb.core.prInfHyps="p69"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p69" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p70,p71"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=p_head" org.eventb.core.prGoal="p66" org.eventb.core.prHyps="p71">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p78">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p60" org.eventb.core.prInfHyps="p72"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p62" org.eventb.core.prInfHyps="p73"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p63" org.eventb.core.prInfHyps="p74"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p64" org.eventb.core.prInfHyps="p75"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p65" org.eventb.core.prInfHyps="p76"/>
<org.eventb.core.prHypAction name="FORWARD_INF5" org.eventb.core.prHyps="p70" org.eventb.core.prInfHyps="p77"/>
<org.eventb.core.prHypAction name="DESELECT6" org.eventb.core.prHyps="p65,p60,p63,p70,p64,p62"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p67"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p67"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p79">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p78" org.eventb.core.prHyps="p79">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p88">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p61" org.eventb.core.prInfHyps="p80"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p71" org.eventb.core.prInfHyps="p81"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p72" org.eventb.core.prInfHyps="p82"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p73" org.eventb.core.prInfHyps="p83"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p74" org.eventb.core.prInfHyps="p84"/>
<org.eventb.core.prHypAction name="FORWARD_INF5" org.eventb.core.prHyps="p75" org.eventb.core.prInfHyps="p85"/>
<org.eventb.core.prHypAction name="FORWARD_INF6" org.eventb.core.prHyps="p76" org.eventb.core.prInfHyps="p86"/>
<org.eventb.core.prHypAction name="FORWARD_INF7" org.eventb.core.prHyps="p77" org.eventb.core.prInfHyps="p87"/>
<org.eventb.core.prHypAction name="DESELECT8" org.eventb.core.prHyps="p76,p74,p71,p61,p73,p75,p77,p72"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p88" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p89" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p89" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p90">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p90" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p91" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p91" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p80">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p80" org.eventb.core.prHyps="p80"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p92">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p92" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p24"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p78" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p101">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p61" org.eventb.core.prInfHyps="p93"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p71" org.eventb.core.prInfHyps="p94"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p72" org.eventb.core.prInfHyps="p95"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p73" org.eventb.core.prInfHyps="p96"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p74" org.eventb.core.prInfHyps="p97"/>
<org.eventb.core.prHypAction name="FORWARD_INF5" org.eventb.core.prHyps="p75" org.eventb.core.prInfHyps="p98"/>
<org.eventb.core.prHypAction name="FORWARD_INF6" org.eventb.core.prHyps="p76" org.eventb.core.prInfHyps="p99"/>
<org.eventb.core.prHypAction name="FORWARD_INF7" org.eventb.core.prHyps="p77" org.eventb.core.prInfHyps="p100"/>
<org.eventb.core.prHypAction name="DESELECT8" org.eventb.core.prHyps="p76,p74,p71,p61,p73,p75,p77,p72"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p101" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p102" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p102" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p103">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p103" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p104" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p104" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p105">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_isZero(p_tail0))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p106">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p105" org.eventb.core.prHyps="p106">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p107">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p107" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p47">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0))))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))" org.eventb.core.prHyps="p98">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p108,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p98"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p108"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p108" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p109"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on COND(¬bn_isZero(bn_remTrailingZeros(cons(FALSE,p_tail0))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(FALSE,p_tail0)))),nil)=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))" org.eventb.core.prHyps="p109">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9,p110">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p109"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p110"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p110" org.eventb.core.prHyps="p106" org.eventb.core.prInfHyps="p111"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p111" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p112"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on COND(¬bn_isZero(nil),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(FALSE,p_tail0)))),nil)=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))" org.eventb.core.prHyps="p112">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p113,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p112"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p113"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p113" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p47"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p47"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p114">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p105" org.eventb.core.prHyps="p114">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p115">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p115" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p93">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p93" org.eventb.core.prHyps="p93"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p106"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p79"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e0,e4,e5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="COND(FALSE=TRUE∨¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p91" org.eventb.core.predicate="bn_remTrailingZeros(p_tail0)=COND(TRUE=TRUE∨¬bn_isZero(p_tail0),cons(TRUE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL))=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p78" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,p_tail0))=cons(p_head,bn_remTrailingZeros(cons(p_head,p_tail0)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p93" org.eventb.core.predicate="bn_remTrailingZeros(p_tail0)=cons(FALSE,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p95" org.eventb.core.predicate="x=cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_remTrailingZeros(y)=y∧x bn_Eq y⇒bn_remTrailingZeros(x)=y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p60" org.eventb.core.predicate="x=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p68" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq cons(p_head,bn_remTrailingZeros(cons(p_head0,p_tail0)))⇔p_tail0 bn_Eq bn_remTrailingZeros(cons(p_head0,p_tail0))∧p_head0=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p107" org.eventb.core.predicate="COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(FALSE,COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p83" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,p_tail0))=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="bn_remTrailingZeros(y)=y">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p75" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,bn_remTrailingZeros(cons(p_head,p_tail0))))=cons(p_head,bn_remTrailingZeros(cons(p_head,p_tail0)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="bn_remTrailingZeros(x)=y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p65" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq cons(p_head,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p63" org.eventb.core.predicate="y=cons(p_head,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p70" org.eventb.core.predicate="p_tail0 bn_Eq bn_remTrailingZeros(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p102" org.eventb.core.predicate="COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="COND(FALSE=TRUE∨¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,nil ⦂ List(BOOL)))=cons(FALSE,nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p96" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,p_tail0))=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p85" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0))))=cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="y=cons(FALSE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="x bn_Eq cons(p_head,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p109" org.eventb.core.predicate="COND(¬bn_isZero(bn_remTrailingZeros(cons(FALSE,p_tail0))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(FALSE,p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="y=cons(p_head,bn_remTrailingZeros(nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p67" org.eventb.core.predicate="∀yB⦂BOOL,zB⦂BOOL,y⦂List(BOOL),z⦂List(BOOL)·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
<org.eventb.core.prPred name="p86" org.eventb.core.predicate="cons(TRUE,p_tail0) bn_Eq cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p106" org.eventb.core.predicate="bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="⊤⇔p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="⊤⇔bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="(nil ⦂ List(BOOL))=cons(p_head,bn_remTrailingZeros(nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p89" org.eventb.core.predicate="COND(TRUE=TRUE∨¬bn_isZero(p_tail0),cons(TRUE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL))=cons(p_head,bn_remTrailingZeros(nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p90" org.eventb.core.predicate="bn_remTrailingZeros(p_tail0)=bn_remTrailingZeros(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p114" org.eventb.core.predicate="¬bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p61" org.eventb.core.predicate="bn_remTrailingZeros(p_tail0)=cons(p_head,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="x bn_Eq y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="x bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p94" org.eventb.core.predicate="p_head0=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p72" org.eventb.core.predicate="x=cons(p_head,p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,nil ⦂ List(BOOL)))=cons(p_head,bn_remTrailingZeros(nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p103" org.eventb.core.predicate="COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p81" org.eventb.core.predicate="p_head0=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p110" org.eventb.core.predicate="COND(¬bn_isZero(COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(FALSE,p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="bn_remTrailingZeros(x)=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p112" org.eventb.core.predicate="COND(¬bn_isZero(nil ⦂ List(BOOL)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(FALSE,p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,nil ⦂ List(BOOL)))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p113" org.eventb.core.predicate="COND(¬⊤,cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(FALSE,p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="(nil ⦂ List(BOOL))=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="x bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p64" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,bn_remTrailingZeros(cons(p_head0,p_tail0))))=cons(p_head,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p88" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,p_tail0))=cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p97" org.eventb.core.predicate="y=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))⇔p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="∀aB⦂BOOL,b⦂List(BOOL)·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
<org.eventb.core.prPred name="p84" org.eventb.core.predicate="y=cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p87" org.eventb.core.predicate="p_tail0 bn_Eq bn_remTrailingZeros(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="bn_remTrailingZeros(x)=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p99" org.eventb.core.predicate="cons(FALSE,p_tail0) bn_Eq cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p69" org.eventb.core.predicate="⊤⇔p_tail0 bn_Eq bn_remTrailingZeros(cons(p_head0,p_tail0))∧p_head0=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="p_head=FALSE∧bn_isZero(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="y=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p79" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p108" org.eventb.core.predicate="COND(FALSE=TRUE∨¬bn_isZero(bn_remTrailingZeros(cons(FALSE,p_tail0))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(FALSE,p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(p_head,bn_remTrailingZeros(nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p100" org.eventb.core.predicate="p_tail0 bn_Eq bn_remTrailingZeros(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p92" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p105" org.eventb.core.predicate="COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(FALSE,COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p111" org.eventb.core.predicate="COND(¬bn_isZero(COND(FALSE=TRUE∨¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(cons(FALSE,p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p115" org.eventb.core.predicate="COND(¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(FALSE,COND(¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,p_tail))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p62" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head0,p_tail0))=p_tail">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p76" org.eventb.core.predicate="cons(p_head,p_tail0) bn_Eq cons(p_head,bn_remTrailingZeros(cons(p_head,p_tail0)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="y=cons(p_head,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="bn_isZero(cons(p_head,nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="bn_remTrailingZeros(x)=cons(p_head,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p82" org.eventb.core.predicate="x=cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,p_tail))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p80" org.eventb.core.predicate="bn_remTrailingZeros(p_tail0)=cons(TRUE,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p98" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0))))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p77" org.eventb.core.predicate="p_tail0 bn_Eq bn_remTrailingZeros(cons(p_head,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p74" org.eventb.core.predicate="y=cons(p_head,bn_remTrailingZeros(cons(p_head,p_tail0)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,bn_remTrailingZeros(x)))=cons(p_head,bn_remTrailingZeros(x))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p66" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head0,p_tail0))=cons(p_head,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="bn_isZero(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p104" org.eventb.core.predicate="COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))=cons(FALSE,COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,bn_remTrailingZeros(nil ⦂ List(BOOL))))=cons(p_head,bn_remTrailingZeros(nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p71" org.eventb.core.predicate="p_head0=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p58" org.eventb.core.predicate="COND(FALSE=TRUE∨¬bn_isZero(nil ⦂ List(BOOL)),cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL))),nil ⦂ List(BOOL))=cons(FALSE,nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_remTrailingZeros(y)=y∧x bn_Eq y⇒bn_remTrailingZeros(x)=y"/>
<org.eventb.core.prPred name="p59" org.eventb.core.predicate="COND(FALSE=TRUE∨¬⊤,cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL))),nil ⦂ List(BOOL))=cons(FALSE,nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,p_tail))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="y=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p73" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,p_tail0))=p_tail">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p101" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,p_tail0))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e5" org.eventb.core.expression="bn_remTrailingZeros(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r14" org.eventb.core.prRID="org.eventb.core.seqprover.mngHyp"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.he:1"/>
<org.eventb.core.prReas name="r15" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="Reduce_bn_remTrailingRightLeft/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_tail1,p_head,p_tail0,x,y,p_head1,p_head0" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p2,p3">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p7"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p2,p3"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst y)" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p11">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p11" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p12" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p13"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p14">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst y)" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p15">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p15" org.eventb.core.prHyps="p13" org.eventb.core.prInfHyps="p16"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p16" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p17"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isZero(x)⇔bn_remTrailingZeros(x)=nil"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·nil bn_Eq x⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p18,p19">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p19">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p21"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p2,p3"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail=bn_remTrailingZeros(y)" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p18">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p26">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p19" org.eventb.core.prInfHyps="p23"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p24"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p21" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p20,p21,p19"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on cons(p_head,bn_remTrailingZeros(y)) bn_Eq y" org.eventb.core.prHyps="p25">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p27">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p25"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p27"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p28,p29"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p27"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=bn_LSB(y)" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="p28">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p32">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p23" org.eventb.core.prInfHyps="p30"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p24" org.eventb.core.prInfHyps="p31"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p23,p24"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p33">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p33">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p39">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p18" org.eventb.core.prInfHyps="p34"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p28" org.eventb.core.prInfHyps="p35"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p29" org.eventb.core.prInfHyps="p36"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p38"/>
<org.eventb.core.prHypAction name="DESELECT5" org.eventb.core.prHyps="p18,p31,p30,p28,p29"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p39" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p41" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p41" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on bn_remTrailingZeros(cons(bn_LSB(nil),bn_remTrailingZeros(nil)))=cons(bn_LSB(nil),bn_remTrailingZeros(nil))" org.eventb.core.prHyps="p38">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p43">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p38"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p43"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,bn_remTrailingZeros(nil)))=cons(bn_LSB(nil),bn_remTrailingZeros(nil))" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p44,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p43"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p44"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on bn_remTrailingZeros(cons(FALSE,nil))=cons(bn_LSB(nil),bn_remTrailingZeros(nil))" org.eventb.core.prHyps="p44">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p45">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p44"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p45"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,nil))=cons(FALSE,bn_remTrailingZeros(nil))" org.eventb.core.prHyps="p45">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p46,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p45"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p46"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on x=cons(bn_LSB(nil),bn_remTrailingZeros(nil))" org.eventb.core.prHyps="p37">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p47">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p37"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p47"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on bn_remTrailingZeros(nil) bn_Eq bn_shiftLeft1(nil)" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p48,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p36"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p48"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on x=cons(bn_LSB(nil),nil)" org.eventb.core.prHyps="p47">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p49">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p47"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p49"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(nil) bn_Eq nil" org.eventb.core.prHyps="p48">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p50,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p48"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p50"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,nil))=cons(FALSE,nil)" org.eventb.core.prHyps="p46">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p51,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p46"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p51"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p51" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p52"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on COND(¬bn_isZero(nil),cons(FALSE,bn_remTrailingZeros(nil)),nil)=cons(FALSE,nil)" org.eventb.core.prHyps="p52">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p53,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p52"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p53"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p53" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p17"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p54,p55">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p54">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p61">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p18" org.eventb.core.prInfHyps="p56"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p28" org.eventb.core.prInfHyps="p57"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p29" org.eventb.core.prInfHyps="p58"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p59"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p60"/>
<org.eventb.core.prHypAction name="DESELECT5" org.eventb.core.prHyps="p18,p31,p30,p28,p29"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p61" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p62" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on bn_remTrailingZeros(cons(bn_LSB(cons(p_head0,p_tail0)),bn_remTrailingZeros(cons(p_head0,p_tail0))))=cons(bn_LSB(cons(p_head0,p_tail0)),bn_remTrailingZeros(cons(p_head0,p_tail0)))" org.eventb.core.prHyps="p60">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p63">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p60"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p63"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on bn_remTrailingZeros(cons(p_head0,bn_remTrailingZeros(cons(p_head0,p_tail0))))=cons(bn_LSB(cons(p_head0,p_tail0)),bn_remTrailingZeros(cons(p_head0,p_tail0)))" org.eventb.core.prHyps="p63">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p64,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p63"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p64"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on x=cons(bn_LSB(cons(p_head0,p_tail0)),bn_remTrailingZeros(cons(p_head0,p_tail0)))" org.eventb.core.prHyps="p59">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p65">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p59"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p65"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on bn_remTrailingZeros(cons(p_head0,p_tail0)) bn_Eq bn_shiftLeft1(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p58">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p66,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p58"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p66"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on p_head=bn_LSB(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p57">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p67,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p57"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p67"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with p_head=p_head0" org.eventb.core.prGoal="p62" org.eventb.core.prHyps="p67">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p73">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p54" org.eventb.core.prInfHyps="p68"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p56" org.eventb.core.prInfHyps="p69"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p64" org.eventb.core.prInfHyps="p70"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p65" org.eventb.core.prInfHyps="p71"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p66" org.eventb.core.prInfHyps="p72"/>
<org.eventb.core.prHypAction name="DESELECT5" org.eventb.core.prHyps="p54,p56,p64,p66,p65"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=p_head0" org.eventb.core.prGoal="p73" org.eventb.core.prHyps="p67">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p62">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p72,p69,p71,p70,p68"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p54,p56,p64,p66,p65"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p74">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p62" org.eventb.core.prHyps="p74">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p81">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p67" org.eventb.core.prInfHyps="p75"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p54" org.eventb.core.prInfHyps="p76"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p56" org.eventb.core.prInfHyps="p77"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p64" org.eventb.core.prInfHyps="p78"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p65" org.eventb.core.prInfHyps="p79"/>
<org.eventb.core.prHypAction name="FORWARD_INF5" org.eventb.core.prHyps="p66" org.eventb.core.prInfHyps="p80"/>
<org.eventb.core.prHypAction name="DESELECT6" org.eventb.core.prHyps="p67,p54,p56,p64,p66,p65"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p81" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p82" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p82" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p83">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p83" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p84" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p84" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p85">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0))))=cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0)))" org.eventb.core.prHyps="p78">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p86">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p78"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p86"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p86" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p87"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0))))=cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0)))" org.eventb.core.prHyps="p87">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p88,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p87"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p88"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p88" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p89"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0))))=cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0)))" org.eventb.core.prHyps="p89">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p90">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p89"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p90"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p90" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p91"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(TRUE,bn_remTrailingZeros(p_tail0)))=cons(TRUE,bn_remTrailingZeros(p_tail0))" org.eventb.core.prHyps="p91">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p92,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p91"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p92"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p92" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p93"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(TRUE,p_tail0)) bn_Eq p_tail0" org.eventb.core.prHyps="p80">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p94,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p80"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p94"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p94" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p95"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on p_tail=bn_remTrailingZeros(cons(TRUE,p_tail0))" org.eventb.core.prHyps="p77">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p96">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p77"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p96"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p96" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p97"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on cons(TRUE,bn_remTrailingZeros(p_tail0)) bn_Eq p_tail0" org.eventb.core.prHyps="p95">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p98,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p95"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p98"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p98" org.eventb.core.prInfHyps="p99,p100"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p98"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p101">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_remTrailingZeros(p_tail0),TRUE)" org.eventb.core.prHyps="p101">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p102">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p101"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p102" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p103"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on ¬cons(TRUE,bn_remTrailingZeros(p_tail0)) bn_Eq bn_remTrailingZeros(p_tail0)" org.eventb.core.prHyps="p103">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p104">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p103"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p104"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in ¬(TRUE=bn_LSB(bn_remTrailingZeros(p_tail0))∧bn_remTrailingZeros(p_tail0) bn_Eq bn_shiftLeft1(bn_remTrailingZeros(p_tail0)))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p104" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p105"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p105"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p105" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p106"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∨ hyp (FALSE=bn_LSB(bn_remTrailingZeros(p_tail0))∨¬bn_remTrailingZeros(p_tail0) bn_Eq bn_shiftLeft1(bn_remTrailingZeros(p_tail0)))" org.eventb.core.prHyps="p106">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p107">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p106"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p106" org.eventb.core.prHyps="p107" org.eventb.core.prInfHyps="p108"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p108"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p85" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p85" org.eventb.core.prHyps="p109">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail0=nil" org.eventb.core.prGoal="p85" org.eventb.core.prHyps="p109">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p116">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p55" org.eventb.core.prInfHyps="p39"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p76" org.eventb.core.prInfHyps="p110"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p79" org.eventb.core.prInfHyps="p111"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p93" org.eventb.core.prInfHyps="p112"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p97" org.eventb.core.prInfHyps="p113"/>
<org.eventb.core.prHypAction name="FORWARD_INF5" org.eventb.core.prHyps="p99" org.eventb.core.prInfHyps="p114"/>
<org.eventb.core.prHypAction name="FORWARD_INF6" org.eventb.core.prHyps="p100" org.eventb.core.prInfHyps="p36"/>
<org.eventb.core.prHypAction name="FORWARD_INF7" org.eventb.core.prHyps="p107" org.eventb.core.prInfHyps="p115"/>
<org.eventb.core.prHypAction name="DESELECT8" org.eventb.core.prHyps="p93,p55,p79,p107,p99,p97,p100,p76"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p116" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p117" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p117" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p118" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p118" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on FALSE=bn_LSB(bn_remTrailingZeros(nil))" org.eventb.core.prHyps="p115">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p119">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p115"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p119"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on FALSE=bn_LSB(nil)" org.eventb.core.prHyps="p119">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p120,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p119"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p120"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p120"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on bn_remTrailingZeros(nil) bn_Eq bn_shiftLeft1(nil)" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p48,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p36"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p48"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(nil) bn_Eq nil" org.eventb.core.prHyps="p48">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p50,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p48"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p50"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on nil bn_Eq nil" org.eventb.core.prHyps="p50">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p121">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p50"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p121"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on bn_isZero(nil)" org.eventb.core.prHyps="p121">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p121"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on TRUE=bn_LSB(nil)" org.eventb.core.prHyps="p114">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p122,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p114"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p122"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p122" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p17"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p85" org.eventb.core.prHyps="p123,p124">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail0=cons(p_head1,p_tail1)" org.eventb.core.prGoal="p85" org.eventb.core.prHyps="p123">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p133">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p55" org.eventb.core.prInfHyps="p125"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p76" org.eventb.core.prInfHyps="p126"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p79" org.eventb.core.prInfHyps="p127"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p93" org.eventb.core.prInfHyps="p128"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p97" org.eventb.core.prInfHyps="p129"/>
<org.eventb.core.prHypAction name="FORWARD_INF5" org.eventb.core.prHyps="p99" org.eventb.core.prInfHyps="p130"/>
<org.eventb.core.prHypAction name="FORWARD_INF6" org.eventb.core.prHyps="p100" org.eventb.core.prInfHyps="p131"/>
<org.eventb.core.prHypAction name="FORWARD_INF7" org.eventb.core.prHyps="p107" org.eventb.core.prInfHyps="p132"/>
<org.eventb.core.prHypAction name="DESELECT8" org.eventb.core.prHyps="p93,p55,p79,p107,p99,p97,p100,p76"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p133" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p134" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p134" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p135" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on FALSE=bn_LSB(bn_remTrailingZeros(cons(p_head1,p_tail1)))" org.eventb.core.prHyps="p132">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p136,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p132"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p136"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head1=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p137">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p135" org.eventb.core.prHyps="p137">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p139">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p136" org.eventb.core.prHyps="p137" org.eventb.core.prInfHyps="p138"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p139" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p141">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p138" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p140"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p141" org.eventb.core.prHyps="p137">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p142">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p142" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p143">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head1=TRUE" org.eventb.core.prGoal="p143" org.eventb.core.prHyps="p137">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p124">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p123" org.eventb.core.prInfHyps="p144"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p125" org.eventb.core.prInfHyps="p145"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p126" org.eventb.core.prInfHyps="p146"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p127" org.eventb.core.prInfHyps="p147"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p128" org.eventb.core.prInfHyps="p148"/>
<org.eventb.core.prHypAction name="FORWARD_INF5" org.eventb.core.prHyps="p129" org.eventb.core.prInfHyps="p149"/>
<org.eventb.core.prHypAction name="FORWARD_INF6" org.eventb.core.prHyps="p130" org.eventb.core.prInfHyps="p150"/>
<org.eventb.core.prHypAction name="FORWARD_INF7" org.eventb.core.prHyps="p131" org.eventb.core.prInfHyps="p151"/>
<org.eventb.core.prHypAction name="FORWARD_INF8" org.eventb.core.prHyps="p140" org.eventb.core.prInfHyps="p152"/>
<org.eventb.core.prHypAction name="DESELECT9" org.eventb.core.prHyps="p123,p129,p126,p131,p125,p128,p130,p140,p127"/>
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p124" org.eventb.core.prHyps="p124"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p153">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p135" org.eventb.core.prHyps="p153">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p155">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p136" org.eventb.core.prHyps="p153" org.eventb.core.prInfHyps="p154"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p155" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p158">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p153" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p156"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p154" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p157"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head1=FALSE" org.eventb.core.prGoal="p158" org.eventb.core.prHyps="p156">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p168">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p123" org.eventb.core.prInfHyps="p159"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p125" org.eventb.core.prInfHyps="p160"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p126" org.eventb.core.prInfHyps="p161"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p127" org.eventb.core.prInfHyps="p162"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p128" org.eventb.core.prInfHyps="p163"/>
<org.eventb.core.prHypAction name="FORWARD_INF5" org.eventb.core.prHyps="p129" org.eventb.core.prInfHyps="p164"/>
<org.eventb.core.prHypAction name="FORWARD_INF6" org.eventb.core.prHyps="p130" org.eventb.core.prInfHyps="p165"/>
<org.eventb.core.prHypAction name="FORWARD_INF7" org.eventb.core.prHyps="p131" org.eventb.core.prInfHyps="p166"/>
<org.eventb.core.prHypAction name="FORWARD_INF8" org.eventb.core.prHyps="p157" org.eventb.core.prInfHyps="p167"/>
<org.eventb.core.prHypAction name="DESELECT9" org.eventb.core.prHyps="p123,p129,p157,p126,p131,p125,p128,p130,p127"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,p_tail1)) bn_Eq bn_shiftLeft1(cons(FALSE,p_tail1))" org.eventb.core.prHyps="p166">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p169,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p166"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p169"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p169" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p170"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on COND(¬bn_isZero(p_tail1),cons(FALSE,bn_remTrailingZeros(p_tail1)),nil) bn_Eq bn_shiftLeft1(cons(FALSE,p_tail1))" org.eventb.core.prHyps="p170">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p171,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p170"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p171"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on TRUE=bn_LSB(cons(FALSE,p_tail1))" org.eventb.core.prHyps="p165">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p122,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p165"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p122"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p122" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p17"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p137"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p172">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p106"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p106" org.eventb.core.prHyps="p172" org.eventb.core.prInfHyps="p173"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p173"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p174">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p174" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p175"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p175" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p176"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p176" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p177"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p177"/>
<org.eventb.core.prRule name="r19" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (length(cons(TRUE,bn_remTrailingZeros(p_tail0)))≠length(bn_remTrailingZeros(p_tail0)))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p178">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p178" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p179">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="length expansion on goal" org.eventb.core.prGoal="p179" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p180" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r20" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="arithmetic simplification in goal" org.eventb.core.prGoal="p180" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p181">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p181" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="ListTheory"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="_AuxiliaryDefinitions"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="_AuxiliaryDefinitions.length case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p178">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p178" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p179"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p182">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p182" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p183"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p183" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p184"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p184" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p185"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(TRUE,bn_remTrailingZeros(p_tail0)),bn_remTrailingZeros(p_tail0))" org.eventb.core.prHyps="p185">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p186">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p185"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p85" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p85">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p186" org.eventb.core.prHyps="p179" org.eventb.core.prInfHyps="p187"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p187"/>
<org.eventb.core.prRule name="r21" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="PP" org.eventb.core.prGoal="p85" org.eventb.core.prHyps="p93,p55,p75,p79,p99,p172,p179,p74,p97,p100,p76">
<org.eventb.core.prString name=".arg" org.eventb.core.prSValue="R500"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e1,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x∈List(BOOL)⇒(length(x)≠length(y)⇒x≠y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p178"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,a,b·x∈List(BOOL)⇒x≠cons(a,cons(b,x))"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2,e3"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,xB·cons(xB,x) bn_Eq x⇒xB=FALSE∧bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p188">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p188" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p189"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p62" org.eventb.core.prHyps="p189">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p196">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p67" org.eventb.core.prInfHyps="p190"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p54" org.eventb.core.prInfHyps="p191"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p56" org.eventb.core.prInfHyps="p192"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p64" org.eventb.core.prInfHyps="p193"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p65" org.eventb.core.prInfHyps="p194"/>
<org.eventb.core.prHypAction name="FORWARD_INF5" org.eventb.core.prHyps="p66" org.eventb.core.prInfHyps="p195"/>
<org.eventb.core.prHypAction name="DESELECT6" org.eventb.core.prHyps="p67,p54,p56,p64,p66,p65"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p196" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p197" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p197" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p198">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p198" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p199" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p199" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p200">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_isZero(p_tail0))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p201">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p200" org.eventb.core.prHyps="p201">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p202">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p202" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0))))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))" org.eventb.core.prHyps="p193">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p203">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p193"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p203"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p203" org.eventb.core.prHyps="p201" org.eventb.core.prInfHyps="p204"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p204" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p205"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,p_tail0)) bn_Eq p_tail0" org.eventb.core.prHyps="p195">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p206">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p195"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p206"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p206" org.eventb.core.prHyps="p201" org.eventb.core.prInfHyps="p207"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p207" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p208"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on p_tail=bn_remTrailingZeros(cons(FALSE,p_tail0))" org.eventb.core.prHyps="p192">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p209">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p192"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p209"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p209" org.eventb.core.prHyps="p201" org.eventb.core.prInfHyps="p210"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p210" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p211"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,nil))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))" org.eventb.core.prHyps="p205">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p212,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p205"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p212"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p212" org.eventb.core.prHyps="p201" org.eventb.core.prInfHyps="p213"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p213" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p46"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,nil))=cons(FALSE,nil)" org.eventb.core.prHyps="p46">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p51,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p46"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p51"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p51" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p52"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on COND(¬bn_isZero(nil),cons(FALSE,bn_remTrailingZeros(nil)),nil)=cons(FALSE,nil)" org.eventb.core.prHyps="p52">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p53,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p52"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p53"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p53" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p17"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p214">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p200" org.eventb.core.prHyps="p214">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p215">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p215" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p216">
<org.eventb.core.prRule name="r19" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (length(cons(FALSE,bn_remTrailingZeros(p_tail0)))≠length(bn_remTrailingZeros(p_tail0)))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p217">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p217" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p218">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="length expansion on goal" org.eventb.core.prGoal="p218" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p180" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r20" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="arithmetic simplification in goal" org.eventb.core.prGoal="p180" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p181">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p181" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="ListTheory"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="_AuxiliaryDefinitions"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="_AuxiliaryDefinitions.length case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p217">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p217" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p218"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p182">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p182" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p183"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p183" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p184"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p184" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p185"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(FALSE,bn_remTrailingZeros(p_tail0)),bn_remTrailingZeros(p_tail0))" org.eventb.core.prHyps="p185">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p219">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p185"/>
<org.eventb.core.prRule name="r19" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (¬cons(FALSE,bn_remTrailingZeros(p_tail0))=bn_remTrailingZeros(p_tail0))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p220">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p220" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p220">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p219" org.eventb.core.prHyps="p218" org.eventb.core.prInfHyps="p221"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p221" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p17"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p220">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,p_tail0)) bn_Eq p_tail0" org.eventb.core.prHyps="p195">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p206">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p195"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p206"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p216" org.eventb.core.prHyps="p220">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p219" org.eventb.core.prHyps="p220,p218" org.eventb.core.prInfHyps="p187"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p206" org.eventb.core.prHyps="p214" org.eventb.core.prInfHyps="p222"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p187"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p222" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p223"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0))))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))" org.eventb.core.prHyps="p193">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p203">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p193"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p203"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p203" org.eventb.core.prHyps="p214" org.eventb.core.prInfHyps="p224"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p224" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p225"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0))))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))" org.eventb.core.prHyps="p225">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p226,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p225"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p226"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p226" org.eventb.core.prHyps="p214" org.eventb.core.prInfHyps="p227"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p227" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p228"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0))))=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))" org.eventb.core.prHyps="p228">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p229">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p228"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p229"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p229" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p230"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on COND(¬bn_isZero(cons(FALSE,bn_remTrailingZeros(p_tail0))),cons(FALSE,bn_remTrailingZeros(cons(FALSE,bn_remTrailingZeros(p_tail0)))),nil)=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))" org.eventb.core.prHyps="p230">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p231">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p230"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p231"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p231" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p232"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p233">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on p_tail=bn_remTrailingZeros(cons(FALSE,p_tail0))" org.eventb.core.prHyps="p192">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p209">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p192"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p209"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p209" org.eventb.core.prHyps="p214" org.eventb.core.prInfHyps="p234"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p234" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p235"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on COND(¬bn_isZero(bn_remTrailingZeros(p_tail0)),cons(FALSE,bn_remTrailingZeros(cons(FALSE,bn_remTrailingZeros(p_tail0)))),nil)=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))" org.eventb.core.prHyps="p232">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p236">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p232"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p236"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p236" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p237"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p233">
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p233"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p238">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail0)" org.eventb.core.prHyps="p238">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p239">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p238"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p239" org.eventb.core.prHyps="p223,p214" org.eventb.core.prInfHyps="p16"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p16" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p17"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e4"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·cons(FALSE,bn_remTrailingZeros(x)) bn_Eq x⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Eq cons(FALSE,bn_remTrailingZeros(x))⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Eq cons(FALSE,bn_remTrailingZeros(x))⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p220"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e5,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x∈List(BOOL)⇒(length(x)≠length(y)⇒x≠y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p217"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p201"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p74"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p166" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,p_tail1)) bn_Eq bn_shiftLeft1(cons(FALSE,p_tail1))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL))))=cons(bn_LSB(nil ⦂ List(BOOL)),bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="x=cons(p_head,bn_remTrailingZeros(y))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL))=bn_remTrailingZeros(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p216" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(p_tail0))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="∀x⦂List(BOOL)·(nil ⦂ List(BOOL)) bn_Eq x⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="x=cons(bn_LSB(y),bn_remTrailingZeros(y))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p88" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,COND(TRUE=TRUE∨¬bn_isZero(p_tail0),cons(TRUE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))))=cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq y⇔bn_isZero(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p183" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x∈List(BOOL)⇒(¬length(x)=length(y)⇒¬x=y)"/>
<org.eventb.core.prPred name="p70" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,bn_remTrailingZeros(cons(p_head,p_tail0))))=cons(p_head,bn_remTrailingZeros(cons(p_head,p_tail0)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p72" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,p_tail0)) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p87" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0))))=cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p175" org.eventb.core.predicate="∀x⦂List(BOOL),a⦂BOOL,b⦂BOOL·x∈List(BOOL)⇒¬x=cons(a,cons(b,x))"/>
<org.eventb.core.prPred name="p228" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0))))=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p220" org.eventb.core.predicate="¬cons(FALSE,bn_remTrailingZeros(p_tail0))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p105" org.eventb.core.predicate="¬TRUE=bn_LSB(bn_remTrailingZeros(p_tail0))∨¬bn_remTrailingZeros(p_tail0) bn_Eq bn_shiftLeft1(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p127" org.eventb.core.predicate="x=cons(TRUE,bn_remTrailingZeros(cons(TRUE,cons(p_head1,p_tail1))))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p209" org.eventb.core.predicate="p_tail=COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p235" org.eventb.core.predicate="p_tail=cons(FALSE,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,nil ⦂ List(BOOL)))=cons(FALSE,nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p212" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,nil ⦂ List(BOOL)))=cons(FALSE,COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p121" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="⊤⇔⊥"/>
<org.eventb.core.prPred name="p78" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0))))=cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p195" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,p_tail0)) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p141" org.eventb.core.predicate="TRUE=p_head1∧cons(p_head1,bn_remTrailingZeros(p_tail1))=bn_remTrailingZeros(p_tail1)">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p126" org.eventb.core.predicate="y=cons(TRUE,cons(p_head1,p_tail1))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p92" org.eventb.core.predicate="COND(TRUE=TRUE∨¬bn_isZero(bn_remTrailingZeros(p_tail0)),cons(TRUE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail0))),nil ⦂ List(BOOL))=cons(TRUE,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p102" org.eventb.core.predicate="cons(TRUE,bn_remTrailingZeros(p_tail0)) bn_Eq bn_remTrailingZeros(p_tail0)⇒TRUE=FALSE∧bn_isZero(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p179" org.eventb.core.predicate="¬length(cons(TRUE,bn_remTrailingZeros(p_tail0)))=length(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p155" org.eventb.core.predicate="cons(TRUE,COND(⊥∨¬bn_isZero(p_tail1),cons(p_head1,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL)))=COND(⊥∨¬bn_isZero(p_tail1),cons(p_head1,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p149" org.eventb.core.predicate="p_tail=cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail1)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p85" org.eventb.core.predicate="cons(TRUE,bn_remTrailingZeros(p_tail0))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p147" org.eventb.core.predicate="x=cons(TRUE,bn_remTrailingZeros(cons(TRUE,cons(TRUE,p_tail1))))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL)) bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p111" org.eventb.core.predicate="x=cons(TRUE,bn_remTrailingZeros(cons(TRUE,nil ⦂ List(BOOL))))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p232" org.eventb.core.predicate="COND(¬bn_isZero(bn_remTrailingZeros(p_tail0)),cons(FALSE,bn_remTrailingZeros(cons(FALSE,bn_remTrailingZeros(p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p201" org.eventb.core.predicate="bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p133" org.eventb.core.predicate="cons(TRUE,bn_remTrailingZeros(cons(p_head1,p_tail1)))=bn_remTrailingZeros(cons(p_head1,p_tail1))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p132" org.eventb.core.predicate="FALSE=bn_LSB(bn_remTrailingZeros(cons(p_head1,p_tail1)))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p196" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))=bn_remTrailingZeros(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p103" org.eventb.core.predicate="¬cons(TRUE,bn_remTrailingZeros(p_tail0)) bn_Eq bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p134" org.eventb.core.predicate="cons(TRUE,COND(p_head1=TRUE∨¬bn_isZero(p_tail1),cons(p_head1,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL)))=bn_remTrailingZeros(cons(p_head1,p_tail1))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p214" org.eventb.core.predicate="¬bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p79" org.eventb.core.predicate="x=cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p170" org.eventb.core.predicate="COND(¬bn_isZero(p_tail1),cons(FALSE,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL)) bn_Eq bn_shiftLeft1(cons(FALSE,p_tail1))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x bn_Eq y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p217" org.eventb.core.predicate="length(cons(FALSE,bn_remTrailingZeros(p_tail0)))≠length(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p115" org.eventb.core.predicate="FALSE=bn_LSB(bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,nil ⦂ List(BOOL)))=cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p119" org.eventb.core.predicate="FALSE=bn_LSB(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p197" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))=COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p152" org.eventb.core.predicate="FALSE=bn_LSB(cons(TRUE,bn_remTrailingZeros(p_tail1)))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="x=cons(FALSE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_remTrailingZeros(x)=x∧x bn_Eq y⇒x=bn_remTrailingZeros(y)"/>
<org.eventb.core.prPred name="p113" org.eventb.core.predicate="p_tail=cons(TRUE,bn_remTrailingZeros(nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p91" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,bn_remTrailingZeros(p_tail0)))=cons(TRUE,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="x=bn_remTrailingZeros(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p130" org.eventb.core.predicate="TRUE=bn_LSB(cons(p_head1,p_tail1))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p215" org.eventb.core.predicate="cons(FALSE,COND(¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))=COND(¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="bn_remTrailingZeros(cons(bn_LSB(nil ⦂ List(BOOL)),bn_remTrailingZeros(nil ⦂ List(BOOL))))=cons(bn_LSB(nil ⦂ List(BOOL)),bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p81" org.eventb.core.predicate="cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0)))=bn_remTrailingZeros(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p229" org.eventb.core.predicate="COND(FALSE=TRUE∨¬bn_isZero(cons(FALSE,bn_remTrailingZeros(p_tail0))),cons(FALSE,bn_remTrailingZeros(cons(FALSE,bn_remTrailingZeros(p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="(nil ⦂ List(BOOL))=bn_remTrailingZeros(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p234" org.eventb.core.predicate="p_tail=COND(FALSE=TRUE∨¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p71" org.eventb.core.predicate="x=cons(p_head,bn_remTrailingZeros(cons(p_head,p_tail0)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p142" org.eventb.core.predicate="⊤∧cons(p_head1,bn_remTrailingZeros(p_tail1))=bn_remTrailingZeros(p_tail1)">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p204" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,COND(FALSE=TRUE∨¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p222" org.eventb.core.predicate="COND(FALSE=TRUE∨¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p182" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x∈List(BOOL)⇒(length(x)≠length(y)⇒x≠y)"/>
<org.eventb.core.prPred name="p67" org.eventb.core.predicate="p_head=p_head0">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p180" org.eventb.core.predicate="¬1+length(bn_remTrailingZeros(p_tail0))=length(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p122" org.eventb.core.predicate="TRUE=FALSE"/>
<org.eventb.core.prPred name="p163" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(cons(FALSE,p_tail1)))=bn_remTrailingZeros(cons(FALSE,p_tail1))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p157" org.eventb.core.predicate="FALSE=bn_LSB(COND(¬bn_isZero(p_tail1),cons(p_head1,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p225" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0))))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p199" org.eventb.core.predicate="cons(FALSE,COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))=COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p75" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p187" org.eventb.core.predicate="¬⊥⇒¬⊥"/>
<org.eventb.core.prPred name="p178" org.eventb.core.predicate="length(cons(TRUE,bn_remTrailingZeros(p_tail0)))≠length(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p86" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0))))=cons(TRUE,COND(TRUE=TRUE∨¬bn_isZero(p_tail0),cons(TRUE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p108" org.eventb.core.predicate="⊤∨¬bn_remTrailingZeros(p_tail0) bn_Eq bn_shiftLeft1(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p156" org.eventb.core.predicate="p_head1=FALSE">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p174" org.eventb.core.predicate="∀x⦂List(BOOL),a⦂BOOL,b⦂BOOL·x∈List(BOOL)⇒x≠cons(a,cons(b,x))"/>
<org.eventb.core.prPred name="p144" org.eventb.core.predicate="p_tail0=cons(TRUE,p_tail1)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p203" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p107" org.eventb.core.predicate="FALSE=bn_LSB(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p190" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p137" org.eventb.core.predicate="p_head1=TRUE">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p90" org.eventb.core.predicate="COND(TRUE=TRUE∨¬bn_isZero(cons(TRUE,bn_remTrailingZeros(p_tail0))),cons(TRUE,bn_remTrailingZeros(cons(TRUE,bn_remTrailingZeros(p_tail0)))),nil ⦂ List(BOOL))=cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p167" org.eventb.core.predicate="FALSE=bn_LSB(COND(¬bn_isZero(p_tail1),cons(FALSE,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_remTrailingZeros(x)=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p210" org.eventb.core.predicate="p_tail=COND(FALSE=TRUE∨¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p154" org.eventb.core.predicate="FALSE=bn_LSB(COND(⊥∨¬bn_isZero(p_tail1),cons(p_head1,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p185" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·¬length(x)=length(y)⇒¬x=y"/>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p95" org.eventb.core.predicate="cons(TRUE,bn_remTrailingZeros(p_tail0)) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p208" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p162" org.eventb.core.predicate="x=cons(TRUE,bn_remTrailingZeros(cons(TRUE,cons(FALSE,p_tail1))))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p139" org.eventb.core.predicate="cons(TRUE,COND(⊤∨¬bn_isZero(p_tail1),cons(p_head1,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL)))=COND(⊤∨¬bn_isZero(p_tail1),cons(p_head1,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p66" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head0,p_tail0)) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p233" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Eq cons(FALSE,bn_remTrailingZeros(x))⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,bn_remTrailingZeros(y)))=cons(p_head,bn_remTrailingZeros(y))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="x=cons(bn_LSB(nil ⦂ List(BOOL)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p60" org.eventb.core.predicate="bn_remTrailingZeros(cons(bn_LSB(cons(p_head0,p_tail0)),bn_remTrailingZeros(cons(p_head0,p_tail0))))=cons(bn_LSB(cons(p_head0,p_tail0)),bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p200" org.eventb.core.predicate="cons(FALSE,COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))=COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p171" org.eventb.core.predicate="COND(¬bn_isZero(p_tail1),cons(FALSE,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL)) bn_Eq p_tail1">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p172" org.eventb.core.predicate="¬bn_remTrailingZeros(p_tail0) bn_Eq bn_shiftLeft1(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="p_tail=bn_remTrailingZeros(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p100" org.eventb.core.predicate="bn_remTrailingZeros(p_tail0) bn_Eq bn_shiftLeft1(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p148" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(cons(TRUE,p_tail1)))=bn_remTrailingZeros(cons(TRUE,p_tail1))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p59" org.eventb.core.predicate="x=cons(bn_LSB(cons(p_head0,p_tail0)),bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p136" org.eventb.core.predicate="FALSE=bn_LSB(COND(p_head1=TRUE∨¬bn_isZero(p_tail1),cons(p_head1,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p169" org.eventb.core.predicate="COND(FALSE=TRUE∨¬bn_isZero(p_tail1),cons(FALSE,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL)) bn_Eq bn_shiftLeft1(cons(FALSE,p_tail1))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq y">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="COND(FALSE=TRUE∨¬bn_isZero(nil ⦂ List(BOOL)),cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL))),nil ⦂ List(BOOL))=cons(FALSE,nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p186" org.eventb.core.predicate="¬length(cons(TRUE,bn_remTrailingZeros(p_tail0)))=length(bn_remTrailingZeros(p_tail0))⇒¬cons(TRUE,bn_remTrailingZeros(p_tail0))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p125" org.eventb.core.predicate="cons(bn_LSB(cons(p_head1,p_tail1)),bn_remTrailingZeros(cons(p_head1,p_tail1)))=bn_remTrailingZeros(cons(p_head1,p_tail1))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p219" org.eventb.core.predicate="¬length(cons(FALSE,bn_remTrailingZeros(p_tail0)))=length(bn_remTrailingZeros(p_tail0))⇒¬cons(FALSE,bn_remTrailingZeros(p_tail0))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p97" org.eventb.core.predicate="p_tail=cons(TRUE,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p188" org.eventb.core.predicate="¬p_head0=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p83" org.eventb.core.predicate="cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0)))=bn_remTrailingZeros(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq y">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p159" org.eventb.core.predicate="p_tail0=cons(FALSE,p_tail1)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p123" org.eventb.core.predicate="p_tail0=cons(p_head1,p_tail1)">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p109" org.eventb.core.predicate="p_tail0=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p117" org.eventb.core.predicate="cons(TRUE,nil ⦂ List(BOOL))=bn_remTrailingZeros(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p230" org.eventb.core.predicate="COND(¬bn_isZero(cons(FALSE,bn_remTrailingZeros(p_tail0))),cons(FALSE,bn_remTrailingZeros(cons(FALSE,bn_remTrailingZeros(p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p218" org.eventb.core.predicate="¬length(cons(FALSE,bn_remTrailingZeros(p_tail0)))=length(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p181" org.eventb.core.predicate="¬1=0"/>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="bn_remTrailingZeros(y) bn_Eq bn_shiftLeft1(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p73" org.eventb.core.predicate="cons(p_head,bn_remTrailingZeros(cons(p_head,p_tail0)))=bn_remTrailingZeros(cons(p_head,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p63" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head0,bn_remTrailingZeros(cons(p_head0,p_tail0))))=cons(bn_LSB(cons(p_head0,p_tail0)),bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p61" org.eventb.core.predicate="cons(bn_LSB(cons(p_head0,p_tail0)),bn_remTrailingZeros(cons(p_head0,p_tail0)))=bn_remTrailingZeros(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p124" org.eventb.core.predicate="cons(TRUE,bn_remTrailingZeros(p_tail1))=bn_remTrailingZeros(p_tail1)">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="p_head=bn_LSB(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p238" org.eventb.core.predicate="∀x⦂List(BOOL)·cons(FALSE,bn_remTrailingZeros(x)) bn_Eq x⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="p_tail=bn_remTrailingZeros(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p129" org.eventb.core.predicate="p_tail=cons(TRUE,bn_remTrailingZeros(cons(p_head1,p_tail1)))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p82" org.eventb.core.predicate="cons(TRUE,COND(TRUE=TRUE∨¬bn_isZero(p_tail0),cons(TRUE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))=bn_remTrailingZeros(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_remTrailingZeros(x)=x∧x bn_Eq y⇒x=bn_remTrailingZeros(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="p_head=bn_LSB(y)∧bn_remTrailingZeros(y) bn_Eq bn_shiftLeft1(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p77" org.eventb.core.predicate="p_tail=bn_remTrailingZeros(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p58" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head0,p_tail0)) bn_Eq bn_shiftLeft1(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p237" org.eventb.core.predicate="COND(¬bn_isZero(bn_remTrailingZeros(p_tail0)),cons(FALSE,COND(¬bn_isZero(bn_remTrailingZeros(p_tail0)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail0))),nil ⦂ List(BOOL))),nil ⦂ List(BOOL))=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p146" org.eventb.core.predicate="y=cons(TRUE,cons(TRUE,p_tail1))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p206" org.eventb.core.predicate="COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p153" org.eventb.core.predicate="¬p_head1=TRUE">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="p_tail=bn_remTrailingZeros(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p89" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0))))=cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p76" org.eventb.core.predicate="y=cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p165" org.eventb.core.predicate="TRUE=bn_LSB(cons(FALSE,p_tail1))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p198" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))=COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="bn_remTrailingZeros(cons(bn_LSB(y),bn_remTrailingZeros(y)))=cons(bn_LSB(y),bn_remTrailingZeros(y))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p114" org.eventb.core.predicate="TRUE=bn_LSB(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p205" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,nil ⦂ List(BOOL)))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="bn_isZero(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p221" org.eventb.core.predicate="¬⊥⇒¬⊤"/>
<org.eventb.core.prPred name="p184" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·⊤⇒(¬length(x)=length(y)⇒¬x=y)"/>
<org.eventb.core.prPred name="p173" org.eventb.core.predicate="FALSE=bn_LSB(bn_remTrailingZeros(p_tail0))∨¬⊥">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="⊤⇔bn_isZero(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="cons(p_head,p_tail)=bn_remTrailingZeros(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p189" org.eventb.core.predicate="p_head0=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p101" org.eventb.core.predicate="∀x⦂List(BOOL),xB⦂BOOL·cons(xB,x) bn_Eq x⇒xB=FALSE∧bn_isZero(x)"/>
<org.eventb.core.prPred name="p164" org.eventb.core.predicate="p_tail=cons(TRUE,bn_remTrailingZeros(cons(FALSE,p_tail1)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL)))=bn_remTrailingZeros(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p177" org.eventb.core.predicate="∀x⦂List(BOOL),a⦂BOOL,b⦂BOOL·¬x=cons(a,cons(b,x))"/>
<org.eventb.core.prPred name="p74" org.eventb.core.predicate="p_head0=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p140" org.eventb.core.predicate="FALSE=bn_LSB(cons(p_head1,bn_remTrailingZeros(p_tail1)))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p150" org.eventb.core.predicate="TRUE=bn_LSB(cons(TRUE,p_tail1))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="cons(bn_LSB(nil ⦂ List(BOOL)),bn_remTrailingZeros(nil ⦂ List(BOOL)))=bn_remTrailingZeros(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p110" org.eventb.core.predicate="y=cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p202" org.eventb.core.predicate="cons(FALSE,COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))=COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p227" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0))))=cons(FALSE,COND(FALSE=TRUE∨¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="p_head=bn_LSB(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p239" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(p_tail0)) bn_Eq p_tail0⇔bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p69" org.eventb.core.predicate="p_tail=bn_remTrailingZeros(cons(p_head,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p231" org.eventb.core.predicate="COND(¬(FALSE=FALSE∧bn_isZero(bn_remTrailingZeros(p_tail0))),cons(FALSE,bn_remTrailingZeros(cons(FALSE,bn_remTrailingZeros(p_tail0)))),nil ⦂ List(BOOL))=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p191" org.eventb.core.predicate="y=cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p80" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,p_tail0)) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p161" org.eventb.core.predicate="y=cons(TRUE,cons(FALSE,p_tail1))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="bn_isZero(y)⇔bn_remTrailingZeros(y)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p131" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head1,p_tail1)) bn_Eq bn_shiftLeft1(cons(p_head1,p_tail1))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p84" org.eventb.core.predicate="cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0)))=COND(TRUE=TRUE∨¬bn_isZero(p_tail0),cons(TRUE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p98" org.eventb.core.predicate="TRUE=bn_LSB(p_tail0)∧bn_remTrailingZeros(p_tail0) bn_Eq bn_shiftLeft1(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p68" org.eventb.core.predicate="y=cons(p_head,p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p143" org.eventb.core.predicate="cons(p_head1,bn_remTrailingZeros(p_tail1))=bn_remTrailingZeros(p_tail1)">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="cons(p_head,bn_remTrailingZeros(y)) bn_Eq y">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="COND(¬⊤,cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL))),nil ⦂ List(BOOL))=cons(FALSE,nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p112" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(nil ⦂ List(BOOL)))=bn_remTrailingZeros(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p226" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0))))=cons(FALSE,COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p118" org.eventb.core.predicate="cons(TRUE,nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p168" org.eventb.core.predicate="cons(TRUE,COND(¬bn_isZero(p_tail1),cons(FALSE,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL)))=COND(¬bn_isZero(p_tail1),cons(FALSE,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p213" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,nil ⦂ List(BOOL)))=cons(FALSE,COND(FALSE=TRUE∨¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_remTrailingZeros(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p106" org.eventb.core.predicate="FALSE=bn_LSB(bn_remTrailingZeros(p_tail0))∨¬bn_remTrailingZeros(p_tail0) bn_Eq bn_shiftLeft1(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p62" org.eventb.core.predicate="cons(p_head0,bn_remTrailingZeros(cons(p_head0,p_tail0)))=bn_remTrailingZeros(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="cons(bn_LSB(p_tail0),bn_remTrailingZeros(p_tail0))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isZero(x)⇔bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p128" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(cons(p_head1,p_tail1)))=bn_remTrailingZeros(cons(p_head1,p_tail1))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p120" org.eventb.core.predicate="FALSE=FALSE"/>
<org.eventb.core.prPred name="p64" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head0,bn_remTrailingZeros(cons(p_head0,p_tail0))))=cons(p_head0,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p207" org.eventb.core.predicate="COND(FALSE=TRUE∨¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p223" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(p_tail0)) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p94" org.eventb.core.predicate="COND(TRUE=TRUE∨¬bn_isZero(p_tail0),cons(TRUE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p236" org.eventb.core.predicate="COND(¬bn_isZero(bn_remTrailingZeros(p_tail0)),cons(FALSE,COND(FALSE=TRUE∨¬bn_isZero(bn_remTrailingZeros(p_tail0)),cons(FALSE,bn_remTrailingZeros(bn_remTrailingZeros(p_tail0))),nil ⦂ List(BOOL))),nil ⦂ List(BOOL))=cons(FALSE,cons(FALSE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="x=cons(bn_LSB(nil ⦂ List(BOOL)),bn_remTrailingZeros(nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="COND(¬bn_isZero(nil ⦂ List(BOOL)),cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL))),nil ⦂ List(BOOL))=cons(FALSE,nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,p_tail))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p138" org.eventb.core.predicate="FALSE=bn_LSB(COND(⊤∨¬bn_isZero(p_tail1),cons(p_head1,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p151" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,p_tail1)) bn_Eq bn_shiftLeft1(cons(TRUE,p_tail1))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p193" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0))))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="cons(p_head,bn_remTrailingZeros(y))=bn_remTrailingZeros(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p194" org.eventb.core.predicate="x=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p65" org.eventb.core.predicate="x=cons(p_head0,bn_remTrailingZeros(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p96" org.eventb.core.predicate="p_tail=COND(TRUE=TRUE∨¬bn_isZero(p_tail0),cons(TRUE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p176" org.eventb.core.predicate="∀x⦂List(BOOL),a⦂BOOL,b⦂BOOL·⊤⇒¬x=cons(a,cons(b,x))"/>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="y=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="p_head=bn_LSB(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p116" org.eventb.core.predicate="cons(TRUE,bn_remTrailingZeros(nil ⦂ List(BOOL)))=bn_remTrailingZeros(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p211" org.eventb.core.predicate="p_tail=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,nil ⦂ List(BOOL)))=cons(bn_LSB(nil ⦂ List(BOOL)),bn_remTrailingZeros(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p99" org.eventb.core.predicate="TRUE=bn_LSB(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p104" org.eventb.core.predicate="¬(TRUE=bn_LSB(bn_remTrailingZeros(p_tail0))∧bn_remTrailingZeros(p_tail0) bn_Eq bn_shiftLeft1(bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p158" org.eventb.core.predicate="cons(TRUE,COND(¬bn_isZero(p_tail1),cons(p_head1,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL)))=COND(¬bn_isZero(p_tail1),cons(p_head1,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p224" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,COND(FALSE=TRUE∨¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))))=cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p192" org.eventb.core.predicate="p_tail=bn_remTrailingZeros(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="cons(bn_LSB(y),bn_remTrailingZeros(y))=bn_remTrailingZeros(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p93" org.eventb.core.predicate="bn_remTrailingZeros(bn_remTrailingZeros(p_tail0))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p135" org.eventb.core.predicate="cons(TRUE,COND(p_head1=TRUE∨¬bn_isZero(p_tail1),cons(p_head1,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL)))=COND(p_head1=TRUE∨¬bn_isZero(p_tail1),cons(p_head1,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p145" org.eventb.core.predicate="cons(bn_LSB(cons(TRUE,p_tail1)),bn_remTrailingZeros(cons(TRUE,p_tail1)))=bn_remTrailingZeros(cons(TRUE,p_tail1))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p160" org.eventb.core.predicate="cons(bn_LSB(cons(FALSE,p_tail1)),bn_remTrailingZeros(cons(FALSE,p_tail1)))=bn_remTrailingZeros(cons(FALSE,p_tail1))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="TRUE"/>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="cons(TRUE,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="y">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e5" org.eventb.core.expression="cons(FALSE,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r18" org.eventb.core.prRID="org.eventb.core.seqprover.mngHyp"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r14" org.eventb.core.prRID="org.eventb.core.seqprover.rn"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r21" org.eventb.core.prRID="com.clearsy.atelierb.provers.core.externalPP:1"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r15" org.eventb.core.prRID="org.eventb.core.seqprover.disjE"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r17" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.he:1"/>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r16" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r19" org.eventb.core.prRID="org.eventb.core.seqprover.cut"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r20" org.eventb.core.prRID="org.eventb.core.seqprover.arithRewrites:1"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="cons(xB, x) = x ⇒ isZero(x)/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x,xB" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,xB)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p7">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(xB,nil))" org.eventb.core.prHyps="p7">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p9">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p9" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p10"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p10" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p11"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p12">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst xB,nil)" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p13">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p13" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p14"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p14" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p15"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀aB,b·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Eq nil⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p17,p18">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p19">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p20">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p22" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p23"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p23" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p24"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p18" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p25" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p26"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p27">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst xB,p_head,cons(p_head,p_tail),p_tail)" org.eventb.core.prHyps="p27">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p28">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p27"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p28" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p29"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p29" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p30,p31"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with xB=p_head" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p31">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p32"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p26" org.eventb.core.prInfHyps="p33"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p20,p26"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p33" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p35"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p35" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p15"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e3,e4,e5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p36">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p27">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst xB,p_head,cons(p_head,p_tail),p_tail)" org.eventb.core.prHyps="p27">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p28">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p27"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p28" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p29"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p29" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p30,p31"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with xB=p_head" org.eventb.core.prHyps="p31">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p18" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p32"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p18,p20"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p37" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p38"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p38" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p34,p39"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p18" org.eventb.core.prHyps="p39" org.eventb.core.prInfHyps="p40"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p40" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p41"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with xB=p_head" org.eventb.core.prHyps="p31">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p41" org.eventb.core.prInfHyps="p42"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p41"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p42" org.eventb.core.prHyps="p30,p34" org.eventb.core.prInfHyps="p43"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p43"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="p34">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p47">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p17" org.eventb.core.prInfHyps="p44"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p45"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p32" org.eventb.core.prInfHyps="p46"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p17,p30,p31,p32"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p41" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p48"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p48"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p47" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p49" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p49" org.eventb.core.prHyps="p39">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p50">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p50" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e3,e4,e5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="cons(xB,p_tail) bn_Eq p_tail⇒⊤">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="bn_isZero(cons(xB,nil ⦂ List(BOOL)))⇔xB=FALSE∧bn_isZero(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="∀aB⦂BOOL,b⦂List(BOOL)·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="cons(xB,cons(p_head,p_tail)) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="xB=FALSE∧bn_isZero(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="bn_isZero(cons(xB,nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="FALSE=FALSE∧⊤"/>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="⊤⇔cons(p_head,p_tail) bn_Eq p_tail∧xB=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="⊤⇔bn_isZero(cons(xB,nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="bn_remTrailingZeros(cons(xB,p_tail)) bn_Eq p_tail⇒⊥∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="⊤⇒⊤"/>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="cons(FALSE,cons(FALSE,p_tail)) bn_Eq cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="cons(xB,cons(p_head,p_tail)) bn_Eq cons(p_head,p_tail)⇒xB=FALSE∧bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="xB=FALSE∧bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="cons(xB,p_tail) bn_Eq p_tail⇒⊥∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="cons(xB,cons(p_head,p_tail)) bn_Eq cons(p_head,p_tail)⇔cons(p_head,p_tail) bn_Eq p_tail∧xB=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="xB=FALSE">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="cons(p_head,cons(p_head,p_tail)) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="¬⊤"/>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="⊤⇒p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="cons(xB,x) bn_Eq x⇒xB=FALSE∧bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="cons(xB,nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(cons(xB,nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="xB=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="∀yB⦂BOOL,zB⦂BOOL,y⦂List(BOOL),z⦂List(BOOL)·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="¬cons(xB,p_tail) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq p_tail⇒p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="cons(xB,p_tail) bn_Eq p_tail⇒xB=FALSE">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="bn_isZero(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="bn_remTrailingZeros(cons(xB,p_tail)) bn_Eq p_tail⇒xB=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),xB⦂BOOL·cons(xB,x) bn_Eq x⇒xB=FALSE∧bn_isZero(x)"/>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="cons(xB,nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="cons(xB,p_tail) bn_Eq p_tail⇒xB=FALSE∧⊤">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="FALSE=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="¬bn_remTrailingZeros(cons(xB,p_tail)) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="⊤⇔⊥∧bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="cons(xB,nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))⇒xB=FALSE∧bn_isZero(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="¬cons(p_head,p_tail) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq p_tail⇒p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="cons(xB,p_tail) bn_Eq p_tail⇒xB=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="nil ⦂ List(BOOL)"/>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e5" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="xB">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="cons(xB,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="x = cons(xB, x) ⇒ isZero(x)/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x,xB" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,xB)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on nil bn_Eq cons(xB,nil)" org.eventb.core.prHyps="p4">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on bn_isZero(cons(xB,nil))" org.eventb.core.prHyps="p8">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p7,p5">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p5"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p6,p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p5"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p6"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p10,p11">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p13">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p11" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p15" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p16"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p17">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,xB,p_tail,p_tail)" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p18">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p19">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail,xB,p_tail)" org.eventb.core.prHyps="p19">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p20">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p19"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p20" org.eventb.core.prHyps="p16" org.eventb.core.prInfHyps="p21"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p21"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p17">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,xB,p_tail,cons(p_head,p_tail))" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p22">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p22" org.eventb.core.prHyps="p13" org.eventb.core.prInfHyps="p23"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p23" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p24,p25"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p18" org.eventb.core.prHyps="p25" org.eventb.core.prInfHyps="p26"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=xB" org.eventb.core.prHyps="p25">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p13" org.eventb.core.prInfHyps="p29"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p24" org.eventb.core.prInfHyps="p30"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p31"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p10,p13,p24,p27"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p30" org.eventb.core.prHyps="p16" org.eventb.core.prInfHyps="p32"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p32"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1,e2,e3"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2,e1,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,xB,xs·x bn_Eq cons(xB,xs)⇒bn_shiftLeft1(x) bn_Eq xs∧bn_LSB(x)=xB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1,e2,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p33">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p17">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,xB,p_tail,cons(p_head,p_tail))" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p22">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p22" org.eventb.core.prHyps="p13" org.eventb.core.prInfHyps="p23"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p23" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p24,p25"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=xB" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="p25">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p13" org.eventb.core.prInfHyps="p29"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p24" org.eventb.core.prInfHyps="p30"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p10,p13,p24"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p11" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p35"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p35" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p6,p36"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with xB=FALSE" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p6">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p41">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p25" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p28" org.eventb.core.prInfHyps="p38"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p29" org.eventb.core.prInfHyps="p39"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p30" org.eventb.core.prInfHyps="p40"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p25,p28,p29,p30"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p19">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail,FALSE,p_tail)" org.eventb.core.prHyps="p19">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p42">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p19"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p42" org.eventb.core.prHyps="p40" org.eventb.core.prInfHyps="p43"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p43" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p44,p45"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p41" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p46" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p46" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p47">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p47" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2,e4,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,xB,xs·x bn_Eq cons(xB,xs)⇒bn_shiftLeft1(x) bn_Eq xs∧bn_LSB(x)=xB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1,e2,e3"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="p_tail bn_Eq cons(xB,p_tail)⇒⊥∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="⊥⇒bn_shiftLeft1(p_tail) bn_Eq p_tail∧bn_LSB(p_tail)=xB">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="cons(xB,p_tail) bn_Eq cons(xB,p_tail)⇔p_tail bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),xB⦂BOOL·x bn_Eq cons(xB,x)⇒xB=FALSE∧bn_isZero(x)"/>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(FALSE,cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="p_tail bn_Eq cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="∀yB⦂BOOL,zB⦂BOOL,y⦂List(BOOL),z⦂List(BOOL)·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="xB=FALSE∧bn_isZero(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="bn_isZero(cons(xB,nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(xB,cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="⊤⇒xB=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="p_tail bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="⊤⇔p_tail bn_Eq cons(p_head,p_tail)∧p_head=xB">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(xB,p_tail)⇔p_tail bn_Eq p_tail">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="cons(xB,p_tail) bn_Eq cons(xB,cons(xB,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="∀x⦂List(BOOL),xB⦂BOOL,xs⦂List(BOOL)·x bn_Eq cons(xB,xs)⇒bn_shiftLeft1(x) bn_Eq xs∧bn_LSB(x)=xB"/>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="bn_LSB(p_tail)=FALSE">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="FALSE=FALSE∧⊤"/>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="bn_isZero(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(xB,p_tail)⇔p_tail bn_Eq p_tail∧p_head=xB">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(xB,cons(p_head,p_tail))⇒xB=FALSE∧bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="x=cons(xB,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(xB,nil ⦂ List(BOOL))⇒xB=FALSE∧bn_isZero(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="bn_isZero(cons(xB,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(xB,cons(p_head,p_tail))⇔p_tail bn_Eq cons(p_head,p_tail)∧p_head=xB">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="FALSE=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="p_tail bn_Eq cons(FALSE,p_tail)⇒bn_shiftLeft1(p_tail) bn_Eq p_tail∧bn_LSB(p_tail)=FALSE">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="bn_shiftLeft1(p_tail) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="p_tail bn_Eq cons(xB,p_tail)⇒bn_shiftLeft1(p_tail) bn_Eq p_tail∧bn_LSB(p_tail)=xB">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="⊤⇒bn_shiftLeft1(p_tail) bn_Eq p_tail∧bn_LSB(p_tail)=FALSE">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="p_tail bn_Eq cons(xB,p_tail)⇒xB=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="¬p_tail bn_Eq cons(xB,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="xB=FALSE∧bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(xB,p_tail)⇔p_tail bn_Eq p_tail∧⊤">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="p_head=xB">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="p_tail bn_Eq cons(xB,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="x bn_Eq cons(xB,x)⇒xB=FALSE∧bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="xB=FALSE">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(xB,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="FALSE"/>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="xB">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="ConsFalseToZero2/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p11">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on goal" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p14,p15">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p17">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst FALSE,p_head,bn_remTrailingZeros(cons(p_head,p_tail)),p_tail)" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p18">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with cons(FALSE,bn_remTrailingZeros(cons(p_head,p_tail))) bn_Eq cons(p_head,p_tail)⇔bn_remTrailingZeros(cons(p_head,p_tail)) bn_Eq p_tail∧FALSE=p_head" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="p18">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p19">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p20">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,p_tail)" org.eventb.core.prHyps="p20">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p21">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p20"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with bn_isZero(cons(p_head,p_tail))⇔p_head=FALSE∧bn_isZero(p_tail)" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="p21">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in goal" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="p24,p25">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p27">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p25"/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p28">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p28">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p15" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p29"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p18" org.eventb.core.prHyps="p24,p25" org.eventb.core.prInfHyps="p30"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p21" org.eventb.core.prHyps="p25" org.eventb.core.prInfHyps="p31"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p29" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p32"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p30" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p33"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p31" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p34"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with FALSE=p_head" org.eventb.core.prHyps="p25">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p14" org.eventb.core.prInfHyps="p35"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p24" org.eventb.core.prInfHyps="p36"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p33" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p34" org.eventb.core.prInfHyps="p38"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p14,p24,p33,p34"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p20">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst FALSE,p_tail)" org.eventb.core.prHyps="p20">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p39">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p20"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with bn_isZero(cons(FALSE,p_tail))⇔FALSE=FALSE∧bn_isZero(p_tail)" org.eventb.core.prHyps="p39">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p38" org.eventb.core.prInfHyps="p40"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p38"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p28">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p39" org.eventb.core.prHyps="p38,p40" org.eventb.core.prInfHyps="p41"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p40" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p42"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p41"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p42"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p17">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst FALSE,FALSE,bn_remTrailingZeros(cons(FALSE,p_tail)),p_tail)" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p43">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p43" org.eventb.core.prHyps="p37,p36" org.eventb.core.prInfHyps="p44"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p44"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,p_tail)) bn_Eq p_tail" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4,p45">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p36"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p45"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p28">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p45" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p46"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p46" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p47"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p47" org.eventb.core.prHyps="p32" org.eventb.core.prInfHyps="p48"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p48"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e0,e1,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀aB,b·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p49">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p49" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p50" org.eventb.core.prHyps="p27,p28">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p50" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p15" org.eventb.core.prHyps="p28" org.eventb.core.prInfHyps="p51"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p18" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p52"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p21" org.eventb.core.prHyps="p27,p28" org.eventb.core.prInfHyps="p53"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p51" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p47"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p52" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p54"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p53" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p55"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p27">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p36">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p14" org.eventb.core.prInfHyps="p35"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p54" org.eventb.core.prInfHyps="p56"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p55" org.eventb.core.prInfHyps="p57"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p14,p54,p55"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on goal" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p45" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p45" org.eventb.core.prHyps="p28">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p58">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p58" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p59">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p60">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail)" org.eventb.core.prHyps="p60">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p61">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p60"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p59" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p59">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p61" org.eventb.core.prHyps="p28" org.eventb.core.prInfHyps="p62"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p62" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p48"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p48"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·nil bn_Eq x⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p25">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="p27"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀aB,b·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e3,e4,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀yB,zB,y,z·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))⇔p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="∀aB⦂BOOL,b⦂List(BOOL)·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
<org.eventb.core.prPred name="p60" org.eventb.core.predicate="∀x⦂List(BOOL)·(nil ⦂ List(BOOL)) bn_Eq x⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·cons(FALSE,bn_remTrailingZeros(x)) bn_Eq x⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(p_tail)) bn_Eq p_tail⇔⊤">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="COND(FALSE=TRUE∨¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="FALSE=bn_LSB(nil ⦂ List(BOOL))∧(nil ⦂ List(BOOL)) bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,p_tail)) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p59" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="p_head=FALSE∧bn_isZero(p_tail)⇒bn_remTrailingZeros(cons(p_head,p_tail)) bn_Eq p_tail∧FALSE=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(cons(p_head,p_tail))) bn_Eq cons(p_head,p_tail)⇔⊤∧⊤">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,p_tail)) bn_Eq p_tail∧FALSE=p_head⇔bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(p_tail)) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="COND(FALSE=TRUE∨¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="FALSE=FALSE"/>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="¬bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="¬bn_isZero(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,p_tail)) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p62" org.eventb.core.predicate="⊥⇔⊤"/>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(cons(p_head,p_tail))) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p61" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq p_tail⇔bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="∀yB⦂BOOL,zB⦂BOOL,y⦂List(BOOL),z⦂List(BOOL)·cons(yB,y) bn_Eq cons(zB,z)⇔y bn_Eq z∧yB=zB"/>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(cons(p_head,p_tail))) bn_Eq cons(p_head,p_tail)⇔⊥∧⊤">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="⊥⇔⊥"/>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,p_tail)) bn_Eq p_tail∧FALSE=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(x)) bn_Eq x⇔bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="⊤⇔⊤∧FALSE=FALSE"/>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="bn_isZero(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="¬cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail))) bn_Eq cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="FALSE=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="¬(FALSE=FALSE∧⊥)"/>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))⇔⊤∧⊤">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(cons(p_head,p_tail))) bn_Eq cons(p_head,p_tail)⇔bn_remTrailingZeros(cons(p_head,p_tail)) bn_Eq p_tail∧FALSE=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="FALSE=bn_LSB(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="¬(FALSE=FALSE∧bn_isZero(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="bn_isZero(cons(FALSE,p_tail))⇔FALSE=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail))) bn_Eq cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(cons(FALSE,p_tail))) bn_Eq cons(FALSE,p_tail)⇔bn_remTrailingZeros(cons(FALSE,p_tail)) bn_Eq p_tail∧FALSE=FALSE">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(nil ⦂ List(BOOL))) bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))⇔⊤"/>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,p_tail)) bn_Eq p_tail∧FALSE=p_head⇒p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="¬cons(FALSE,bn_remTrailingZeros(cons(p_head,p_tail))) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="¬cons(FALSE,bn_remTrailingZeros(p_tail)) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq bn_shiftLeft1(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p58" org.eventb.core.predicate="COND(FALSE=TRUE∨¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL)) bn_Eq p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(p_tail)) bn_Eq p_tail⇔bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="bn_remTrailingZeros(cons(p_head,p_tail)) bn_Eq p_tail∧FALSE=p_head⇔p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(cons(p_head,p_tail))) bn_Eq cons(p_head,p_tail)⇔bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(p_tail)) bn_Eq p_tail⇔⊥">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))⇔⊤∧⊥">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="bn_remTrailingZeros(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="FALSE"/>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="bn_remTrailingZeros(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.eqvLR"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRewrites"/>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r15" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r14" org.eventb.core.prRID="org.eventb.core.seqprover.he:1"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="cons(⊤, x)⇒ notZero/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="¬bn_isZero(cons(TRUE,x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="¬(TRUE=FALSE∧bn_isZero(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·¬bn_isZero(cons(TRUE,x))"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="bn_Eq preservers LSB/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,p_tail0,x,y,p_head0" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p5"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p9">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst y)" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p10" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p11"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p11" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p13">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p13">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p14"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p12" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p5,p12"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p18">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head,p_tail)" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p18">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p19"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p12" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p5,p12"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p22">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,p_tail)" org.eventb.core.prHyps="p22">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p23">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p22"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p23" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p24"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p24" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25,p26"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p25">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p30">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p18" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p19" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p29"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p19,p18,p20"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀aB,b·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·nil bn_Eq x⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p31">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p31">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p33">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p32"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p13">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p13">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p36">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p32" org.eventb.core.prInfHyps="p35"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p32"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p37">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(p_head,p_tail))" org.eventb.core.prHyps="p37">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p38">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p37"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p38" org.eventb.core.prHyps="p35" org.eventb.core.prInfHyps="p39"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p39" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p22">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,p_tail)" org.eventb.core.prHyps="p22">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p23">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p22"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p25">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p23" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p40"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p40" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p41"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p41"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀aB,b·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Eq nil⇔bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p42,p43">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p42">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p45">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p32" org.eventb.core.prInfHyps="p44"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p32"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=bn_LSB(p_tail0)" org.eventb.core.prGoal="p45" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p48">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p46"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p44" org.eventb.core.prInfHyps="p47"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p44,p31"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p48" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p49" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion on cons(bn_LSB(p_tail0),p_tail) bn_Eq cons(p_head0,p_tail0)" org.eventb.core.prHyps="p47">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p7,p50">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p47"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p50"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p50" org.eventb.core.prInfHyps="p48,p51"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p50"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on p_tail bn_Eq bn_shiftLeft1(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p51">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p7,p52">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p51"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p52"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on bn_LSB(p_tail0)=bn_LSB(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p48">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p7,p49">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p48"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p49"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p49" org.eventb.core.prHyps="p49"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))⇔p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_LSB(nil ⦂ List(BOOL))=bn_LSB(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="∀aB⦂BOOL,b⦂List(BOOL)·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="bn_LSB(p_tail0)=bn_LSB(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="p_head=bn_LSB(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="cons(bn_LSB(p_tail0),p_tail) bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="p_tail bn_Eq bn_shiftLeft1(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="⊤⇔⊥∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_LSB(x)=bn_LSB(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="x bn_Eq y⇒bn_LSB(x)=bn_LSB(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="bn_LSB(p_tail0)=p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq (nil ⦂ List(BOOL))⇔bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="FALSE=FALSE"/>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="bn_LSB(cons(p_head,p_tail))=bn_LSB(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="x=cons(bn_LSB(p_tail0),p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="p_head=bn_LSB(p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="bn_LSB(p_tail0)=bn_LSB(cons(p_head0,p_tail0))∧p_tail bn_Eq bn_shiftLeft1(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_isZero(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x bn_Eq y⇒bn_LSB(x)=bn_LSB(y)"/>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="⊤⇔p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="⊤⇔bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="⊤⇔bn_isZero(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="FALSE=bn_LSB(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="FALSE=bn_LSB(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="bn_isZero(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x bn_Eq y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="FALSE=bn_LSB(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="∀x⦂List(BOOL)·(nil ⦂ List(BOOL)) bn_Eq x⇔bn_isZero(x)"/>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="p_tail bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="y=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="p_head=bn_LSB(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="y=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="FALSE=bn_LSB(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq y">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq y">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="p_head=bn_LSB(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq y⇔bn_isZero(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="y=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="y">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.dtDistinctCase"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="isZero(y) ⇒ LSB(y) = FALSE/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_isZero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p5"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p9">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p10"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="p7">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p13">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_head,p_tail)" org.eventb.core.prHyps="p13">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p14" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p15" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p16"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p16"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀aB,b·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))⇔p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_LSB(nil ⦂ List(BOOL))=FALSE"/>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="∀aB⦂BOOL,b⦂List(BOOL)·bn_isZero(cons(aB,b))⇔aB=FALSE∧bn_isZero(b)"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isZero(x)⇒bn_LSB(x)=FALSE"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="FALSE=FALSE"/>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="bn_LSB(cons(p_head,p_tail))=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_isZero(x)⇒bn_LSB(x)=FALSE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_LSB(x)=FALSE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="⊤⇔⊥∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.dtDistinctCase"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
</org.eventb.core.prProof>
</org.eventb.core.prFile>
