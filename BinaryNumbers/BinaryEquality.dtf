<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.deployedTheoryRoot org.eventb.core.accurate="true" org.eventb.core.comment="GENERATED THEORY FILE: !DO NOT CHANGE!" org.eventb.theory.core.modificationHashValue="ec625ce39108e15957d4da9cc5b17525" org.eventb.theory.core.outdated="true">
<org.eventb.theory.core.useTheory name="BOOL" org.eventb.core.scTarget="/BOOL/BOOL.dtf|org.eventb.theory.core.deployedTheoryRoot#BOOL"/>
<org.eventb.theory.core.useTheory name="BitwiseOps" org.eventb.core.scTarget="/BinaryNumbers/BitwiseOps.dtf|org.eventb.theory.core.deployedTheoryRoot#BitwiseOps"/>
<org.eventb.theory.core.scNewOperatorDefinition name=")" org.eventb.core.label="bn_equals_zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_equals_zero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="*" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_equals_zero(b)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scTheorem name="generatedBlocl" org.eventb.core.label="EqualitySwap" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x bn_Eq y⇔y bn_Eq x" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.theorem#+" org.eventb.theory.core.order="0"/>
<org.eventb.theory.core.scTheorem name="generatedBlocm" org.eventb.core.label="equality" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Eq x" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.theorem#," org.eventb.theory.core.order="1"/>
<org.eventb.theory.core.scTheorem name="generatedBlocn" org.eventb.core.label="x−yEquality" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x=y⇒x bn_Eq y" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.theorem#-" org.eventb.theory.core.order="2"/>
<org.eventb.theory.core.scProofRulesBlock name="generatedBlock" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#(">
<org.eventb.theory.core.scMetavariable name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scMetavariable name="aB" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scMetavariable name="as" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scMetavariable name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRewriteRule name="BinaryEquality.bn_equals_zero case 0" org.eventb.core.accurate="true" org.eventb.core.label="BinaryEquality.bn_equals_zero case 0" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_equals_zero expansion" org.eventb.theory.core.formula="bn_equals_zero(nil ⦂ List(BOOL))">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_equals_zero rhs" org.eventb.core.label="bn_equals_zero rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BinaryEquality.bn_equals_zero case 1" org.eventb.core.accurate="true" org.eventb.core.label="BinaryEquality.bn_equals_zero case 1" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_equals_zero expansion" org.eventb.theory.core.formula="bn_equals_zero(cons(aB,as))">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_equals_zero rhs" org.eventb.core.label="bn_equals_zero rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.formula="aB=FALSE∧bn_equals_zero(as)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BinaryEquality.bn_Eq case 0" org.eventb.core.accurate="true" org.eventb.core.label="BinaryEquality.bn_Eq case 0" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_Eq expansion" org.eventb.theory.core.formula="(nil ⦂ List(BOOL)) bn_Eq b">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_Eq rhs" org.eventb.core.label="bn_Eq rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.formula="bn_equals_zero(b)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BinaryEquality.bn_Eq case 1" org.eventb.core.accurate="true" org.eventb.core.label="BinaryEquality.bn_Eq case 1" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_Eq expansion" org.eventb.theory.core.formula="cons(aB,as) bn_Eq b">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_Eq rhs" org.eventb.core.label="bn_Eq rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.formula="aB=FALSE∧as bn_Eq bn_shiftLeft1(b)"/>
</org.eventb.theory.core.scRewriteRule>
</org.eventb.theory.core.scProofRulesBlock>
</org.eventb.theory.core.deployedTheoryRoot>
