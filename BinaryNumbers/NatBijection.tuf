<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.theoryRoot org.eventb.core.configuration="org.eventb.theory.core.thy">
<org.eventb.theory.core.importTheoryProject name="'" org.eventb.theory.core.importTheoryProject="/BinaryNumbers">
<org.eventb.theory.core.importTheory name="(" org.eventb.theory.core.importTheory="/BinaryNumbers/BinaryNaturals.dtf|org.eventb.theory.core.deployedTheoryRoot#BinaryNaturals"/>
<org.eventb.theory.core.importTheory name=")" org.eventb.theory.core.importTheory="/BinaryNumbers/BitwiseOpsExt.dtf|org.eventb.theory.core.deployedTheoryRoot#BitwiseOpsExt"/>
</org.eventb.theory.core.importTheoryProject>
<org.eventb.theory.core.newOperatorDefinition name="0" org.eventb.core.label="bn_toNat" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="List(BOOL)" org.eventb.core.identifier="a"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="nil" org.eventb.theory.core.formula="zero"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB, aT)" org.eventb.theory.core.formula="COND(aB = TRUE, one nAdd (two nTimes bn_toNat(aT)), (two nTimes bn_toNat(aT)))"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="(" org.eventb.core.label="bn_toNat2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="List(BOOL)" org.eventb.core.identifier="a"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="nil" org.eventb.theory.core.formula="zero"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB, xs)" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB, xs)), zero, suc(bn_toNat2(bn_decrement(cons(xB, xs)))))"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name=")" org.eventb.core.label="bn_toBin" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="Nat" org.eventb.core.identifier="a"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="zero" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.theorem name="1" org.eventb.core.label="toNat(zero) = zero" org.eventb.core.predicate="∀x·bn_isZero(x) ⇔ bn_toNat(x) = zero"/>
<org.eventb.theory.core.theorem name="/" org.eventb.core.label="alternate toNat" org.eventb.core.predicate="∀x·bn_toNat(cons(TRUE, x)) = suc(bn_toNat(bn_decrement(cons(TRUE, x))))"/>
<org.eventb.theory.core.theorem name="2" org.eventb.core.label="alternate toNat2" org.eventb.core.predicate="∀x·¬bn_isZero(x) ⇔ bn_toNat(cons(FALSE, x)) = suc(bn_toNat(cons(TRUE, bn_decrement(x))))"/>
<org.eventb.theory.core.theorem name="," org.eventb.core.label="increment to suc" org.eventb.core.predicate="∀x·bn_toNat(bn_increment(x)) = suc(bn_toNat(x))"/>
<org.eventb.theory.core.theorem name="." org.eventb.core.label="suc to incremnet" org.eventb.core.predicate="∀x· bn_toBin(suc(x)) bn_Eq bn_increment(bn_toBin(x))"/>
<org.eventb.theory.core.theorem name="4" org.eventb.core.label="toBin is normal" org.eventb.core.predicate="∀x·bn_isNormal(bn_toBin(x))"/>
<org.eventb.theory.core.theorem name="5" org.eventb.core.label="increment outside addition" org.eventb.core.predicate="∀x, y·bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y)"/>
<org.eventb.theory.core.theorem name="8" org.eventb.core.label="NormalIncrCorrally" org.eventb.core.predicate="∀x, y·bn_isNormal(y) ∧ bn_isNormal(x) ∧ x ≠ nil ⇒ cons(TRUE,x bn_Add bn_shiftLeft1(y))≠y"/>
<org.eventb.theory.core.theorem name="7" org.eventb.core.label="Normal incrementOutsideAddition" org.eventb.core.predicate="∀x, y·bn_isNormal(x) ∧ bn_isNormal(y) ⇒ bn_increment(x) bn_Add y = bn_increment(x bn_Add y)"/>
<org.eventb.theory.core.theorem name="9" org.eventb.core.label="equivelenceMaitained" org.eventb.core.predicate="∀x, y·x bn_Eq y ⇔ bn_toNat(x) = bn_toNat(y)"/>
<org.eventb.theory.core.theorem name="3" org.eventb.core.label="Addition Homomorphism" org.eventb.core.predicate="∀x, y· bn_toBin(x nAdd y) bn_Eq bn_toBin(x) bn_Add bn_toBin(y)"/>
<org.eventb.theory.core.theorem name="6" org.eventb.core.label="Addition Homomorphism normal" org.eventb.core.predicate="∀x, y· bn_toBin(x nAdd y) = bn_toBin(x) bn_Add bn_toBin(y)"/>
<org.eventb.theory.core.theorem name="+" org.eventb.core.label="bijection1" org.eventb.core.predicate="∀x·bn_toNat(bn_toBin(x)) = x"/>
<org.eventb.theory.core.theorem name="-" org.eventb.core.label="bijection2" org.eventb.core.predicate="∀x·bn_isNormal(x) ⇒ bn_toBin(bn_toNat(x)) = x"/>
</org.eventb.theory.core.theoryRoot>
