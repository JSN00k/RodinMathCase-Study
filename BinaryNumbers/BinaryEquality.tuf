<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.theoryRoot org.eventb.core.configuration="org.eventb.theory.core.thy">
<org.eventb.theory.core.newOperatorDefinition name="N" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.recursiveOperatorDefinition name="'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="nil" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB, as)" org.eventb.theory.core.formula="aB = bn_LSB(b) ∧ (bn_isZero(as) ∨ bn_Eq_Equal_length(as, bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="List(BOOL)" org.eventb.core.identifier="a"/>
<org.eventb.theory.core.operatorArgument name=")" org.eventb.core.expression="List(BOOL)" org.eventb.core.identifier="b"/>
<org.eventb.theory.core.operatorWDcondition name="*" org.eventb.core.predicate="bn_countBits(a) = bn_countBits(b)"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="'" org.eventb.core.label="bn_Eq" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.notationType="INFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="List(BOOL)" org.eventb.core.identifier="a"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="List(BOOL)" org.eventb.core.identifier="b"/>
<org.eventb.theory.core.directOperatorDefinition name="*" org.eventb.theory.core.formula="bn_countBits(a) = bn_countBits(b) ∧ bn_Eq_Equal_length(a, b)"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.theorem name="U" org.eventb.core.label="bn_Eq_Equal_length(x, x) = ⊤" org.eventb.core.predicate="∀x·bn_Eq_Equal_length(x, x)"/>
<org.eventb.theory.core.theorem name="," org.eventb.core.label="equality" org.eventb.core.predicate="∀x· x bn_Eq x"/>
<org.eventb.theory.core.theorem name="-" org.eventb.core.label="x−yEquality" org.eventb.core.predicate="∀x, y·x = y ⇒ x bn_Eq y"/>
<org.eventb.theory.core.theorem name="`" org.eventb.core.label="Eq ⇒ Equal_Length" org.eventb.core.predicate="∀x, y·x bn_Eq y ⇒ bn_Eq_Equal_length(x, y)"/>
<org.eventb.theory.core.theorem name="_" org.eventb.core.label="EqualityEquality" org.eventb.core.predicate="∀x, y· bn_countBits(x) = bn_countBits(y) ⇒ (x bn_Eq y ⇔ bn_Eq_Equal_length(x, y))"/>
<org.eventb.theory.core.theorem name="O" org.eventb.core.label="countBits(x) = 0 ⇔ x = 0" org.eventb.core.predicate="∀x·bn_countBits(x) = 0 ⇔ bn_isZero(x)"/>
<org.eventb.theory.core.theorem name="7" org.eventb.core.label="Eq nil ⇒ bn_isZero()" org.eventb.core.predicate="∀x·x bn_Eq nil ⇔ bn_isZero(x)"/>
<org.eventb.theory.core.theorem name="8" org.eventb.core.label="nil Eq  ⇒ bn_isZero()" org.eventb.core.predicate="∀x·nil bn_Eq x ⇔ bn_isZero(x)"/>
<org.eventb.theory.core.theorem name="P" org.eventb.core.label="EqualNumbersSameBitCount" org.eventb.core.predicate="∀x, y· x bn_Eq y ⇒ bn_countBits(x) = bn_countBits(y)"/>
<org.eventb.theory.core.theorem name="b" org.eventb.core.label="Cons equality" org.eventb.core.predicate="∀xB, x, y·x bn_Eq y ⇔ cons(xB, x) bn_Eq cons(xB, y)"/>
<org.eventb.theory.core.theorem name="R" org.eventb.core.label="remZeros(zero) = nil" org.eventb.core.predicate="∀x·bn_isZero(x) ⇔ bn_remTrailingZeros(x) = nil"/>
<org.eventb.theory.core.theorem name="Q" org.eventb.core.label="countBits(remZeros(x)) = countBits(x))" org.eventb.core.predicate="∀x·bn_countBits(bn_remTrailingZeros(x)) = bn_countBits(x)"/>
<org.eventb.theory.core.theorem name="6" org.eventb.core.label="isZeroImpl" org.eventb.core.predicate="∀aB, b·bn_isZero(cons(aB, b)) ⇔ aB = FALSE ∧ bn_isZero(b)"/>
<org.eventb.theory.core.theorem name=":" org.eventb.core.label="LSB(zero) = FALSE" org.eventb.core.predicate="∀x·bn_isZero(x) ⇒ bn_LSB(x) = FALSE"/>
<org.eventb.theory.core.theorem name="d" org.eventb.core.label="=SameLSB" org.eventb.core.predicate="∀x, y· x = y ⇒ bn_LSB(x) = bn_LSB(y)"/>
<org.eventb.theory.core.theorem name="V" org.eventb.core.label="EquSameLSB" org.eventb.core.predicate="∀x, y· x bn_Eq y ⇒ bn_LSB(x) = bn_LSB(y)"/>
<org.eventb.theory.core.theorem name="/" org.eventb.core.label="Strip cons" org.eventb.core.predicate="∀yB, zB, y, z·cons(yB, y) bn_Eq cons(zB, z) ⇔ y bn_Eq z ∧ yB = zB"/>
<org.eventb.theory.core.theorem name="T" org.eventb.core.label="¬(x bn_Eq y) ⇒ x ≠ y" org.eventb.core.predicate="∀x, y· ¬(x bn_Eq y) ⇒ x ≠ y"/>
<org.eventb.theory.core.theorem name="K" org.eventb.core.label="cons(⊤, x)⇒ notZero" org.eventb.core.predicate="∀x · ¬(bn_isZero(cons(TRUE, x)))"/>
<org.eventb.theory.core.theorem name="0" org.eventb.core.label="remZeroImpl" org.eventb.core.predicate="∀a, b·bn_remTrailingZeros(cons(a,b)) = nil ⇔ a = FALSE ∧ bn_isZero(b)"/>
<org.eventb.theory.core.theorem name="2" org.eventb.core.label="remZeroImpl2" org.eventb.core.predicate="∀a, b·bn_remTrailingZeros(cons(a,b)) ≠ nil ⇔ a = TRUE ∨ ¬bn_isZero(b)"/>
<org.eventb.theory.core.theorem name=";" org.eventb.core.label="leftShift1(zero) = zero" org.eventb.core.predicate="∀x·bn_isZero(x) ⇒ bn_isZero(bn_shiftLeft1(x))"/>
<org.eventb.theory.core.theorem name="." org.eventb.core.label="RemoveZerosPreservesEquality" org.eventb.core.predicate="∀x·x bn_Eq bn_remTrailingZeros(x)"/>
<org.eventb.theory.core.theorem name="S" org.eventb.core.label="isZero(x) ⇔ isZero(remZeros(x))" org.eventb.core.predicate="∀x·bn_isZero(x) ⇔ bn_isZero(bn_remTrailingZeros(x))"/>
<org.eventb.theory.core.theorem name="?" org.eventb.core.label="remZero(cons(xB, x)) = cons(xB, x) ⇒ remZero(x) = x" org.eventb.core.predicate="∀xB, x·bn_remTrailingZeros(cons(xB,x))=cons(xB,x) ⇒ bn_remTrailingZeros(x) = x"/>
<org.eventb.theory.core.theorem name="A" org.eventb.core.label="bn_Eq reverse Expand" org.eventb.core.predicate="∀x, xB, xs·x bn_Eq cons(xB,xs) ⇒ bn_shiftLeft1(x) bn_Eq xs ∧ bn_LSB(x) = xB"/>
<org.eventb.theory.core.theorem name="F" org.eventb.core.label="ConsFalseToZero" org.eventb.core.predicate="∀x·x bn_Eq cons(FALSE,bn_remTrailingZeros(x)) ⇔ bn_isZero(x)"/>
<org.eventb.theory.core.theorem name="J" org.eventb.core.label="ConsFalseToZero2" org.eventb.core.predicate="∀x· cons(FALSE, bn_remTrailingZeros(x)) bn_Eq x ⇔ bn_isZero(x)"/>
<org.eventb.theory.core.theorem name="H" org.eventb.core.label="cons(xB, x) = x ⇒ isZero(x)" org.eventb.core.predicate="∀x, xB·cons(xB,x) bn_Eq x ⇒ xB = FALSE ∧ bn_isZero(x)"/>
<org.eventb.theory.core.theorem name="I" org.eventb.core.label="x = cons(xB, x) ⇒ isZero(x)" org.eventb.core.predicate="∀x, xB· x bn_Eq cons(xB,x) ⇒ xB = FALSE ∧ bn_isZero(x)"/>
<org.eventb.theory.core.theorem name="E" org.eventb.core.label="remZeros ≠ nil ⇒ ¬(isZero)" org.eventb.core.predicate="∀x·bn_remTrailingZeros(x) ≠ nil ⇒ ¬(bn_isZero(bn_remTrailingZeros(x)))"/>
<org.eventb.theory.core.theorem name="D" org.eventb.core.label="remZeros(remZeros(x)) = remZeros(x)" org.eventb.core.predicate="∀x· bn_remTrailingZeros(bn_remTrailingZeros(x)) = bn_remTrailingZeros(x)"/>
<org.eventb.theory.core.theorem name="C" org.eventb.core.label="Reducebn_remTrailingZerosLeft" org.eventb.core.predicate="∀x, y·bn_remTrailingZeros(y) = y ∧ x bn_Eq y ⇒ bn_remTrailingZeros(x) = y"/>
<org.eventb.theory.core.theorem name="G" org.eventb.core.label="Reduce_bn_remTrailingRightLeft" org.eventb.core.predicate="∀x, y·bn_remTrailingZeros(x) = x ∧ x bn_Eq y ⇒  x = bn_remTrailingZeros(y)"/>
<org.eventb.theory.core.theorem name="=" org.eventb.core.label="RemZerosToEquality" org.eventb.core.predicate="∀x, y·x bn_Eq y ⇔ bn_remTrailingZeros(x) = bn_remTrailingZeros(y)"/>
<org.eventb.theory.core.theorem name="c" org.eventb.core.label="Normal Equality" org.eventb.core.predicate="∀x, y·bn_remTrailingZeros(x) = x ∧ bn_remTrailingZeros(y) = y ⇒ (x bn_Eq y ⇔ x = y)"/>
<org.eventb.theory.core.theorem name="9" org.eventb.core.label="zeroIszero" org.eventb.core.predicate="∀x, y·bn_isZero(x) ∧ bn_isZero(y) ⇒ x bn_Eq y "/>
<org.eventb.theory.core.theorem name="[" org.eventb.core.label="zeroEqZero" org.eventb.core.predicate="∀x, y·bn_isZero(x) ∧ x bn_Eq y ⇒ bn_isZero(y)"/>
<org.eventb.theory.core.theorem name="\" org.eventb.core.label="notZeroEqNotZero" org.eventb.core.predicate="∀x, y·¬(bn_isZero(x)) ∧ x bn_Eq y ⇒ ¬(bn_isZero(y))"/>
<org.eventb.theory.core.theorem name="a" org.eventb.core.label="CommCororally" org.eventb.core.predicate="∀x, y· x bn_Eq y ⇒ y bn_Eq x"/>
<org.eventb.theory.core.theorem name="B" org.eventb.core.label="Commutivity" org.eventb.core.predicate="∀x, y· x bn_Eq y ⇔ y bn_Eq x"/>
<org.eventb.theory.core.theorem name="3" org.eventb.core.label="Transitivity" org.eventb.core.predicate="∀x, y, z·x bn_Eq y ∧ y bn_Eq z ⇒ x bn_Eq z"/>
<org.eventb.theory.core.theorem name="]" org.eventb.core.label="Transitivity2" org.eventb.core.predicate="∀x, y, z·x bn_Eq y ⇒ (y bn_Eq z ⇔ x bn_Eq z)"/>
<org.eventb.theory.core.theorem name="^" org.eventb.core.label="Transitivity Internal" org.eventb.core.predicate="∀x, y, z· x bn_Eq y ∧ bn_countBits(z) = bn_countBits(x) ⇒ (bn_Eq_Equal_length(x, z) ⇔ bn_Eq_Equal_length(y, z))"/>
<org.eventb.theory.core.proofRulesBlock name="W" org.eventb.core.label="re−writes">
<org.eventb.theory.core.metaVariable name="'" org.eventb.core.identifier="x" org.eventb.theory.core.type="List(BOOL)"/>
<org.eventb.theory.core.metaVariable name="2" org.eventb.core.identifier="xB" org.eventb.theory.core.type="BOOL"/>
<org.eventb.theory.core.metaVariable name="(" org.eventb.core.identifier="y" org.eventb.theory.core.type="List(BOOL)"/>
<org.eventb.theory.core.metaVariable name="5" org.eventb.core.identifier="yB" org.eventb.theory.core.type="BOOL"/>
<org.eventb.theory.core.metaVariable name=")" org.eventb.core.identifier="z" org.eventb.theory.core.type="List(BOOL)"/>
<org.eventb.theory.core.rewriteRule name="*" org.eventb.core.label="bn_Eq_Equal_length(x, x)" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="x = x" org.eventb.theory.core.formula="bn_Eq_Equal_length(x, x)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="C" org.eventb.core.label="isZeroPreservation" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="isZero(remZero) = isZero" org.eventb.theory.core.formula="bn_isZero(bn_remTrailingZeros(x))">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="bn_isZero(x)"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="+" org.eventb.core.label="x bn_Eq x" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="x = x" org.eventb.theory.core.formula="x bn_Eq x">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="-" org.eventb.core.label="Eq nil ⇒ isZero(x)" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Eq nil =&gt; isZero(x)" org.eventb.theory.core.formula="x bn_Eq nil">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="bn_isZero(x)"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="." org.eventb.core.label="nil Eq ⇒ isZero(x)" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="nil Eq =&gt; isZero(x)" org.eventb.theory.core.formula="nil bn_Eq x">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="bn_isZero(x)"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="B" org.eventb.core.label="cons(TRUE ≠ cons(FALSE" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="cons(TRUE ≠ cons(FALSE" org.eventb.theory.core.formula="cons(TRUE, x) bn_Eq cons(FALSE, y)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="⊥"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="/" org.eventb.core.label="remZero(isZero(x)) = nil" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="false" org.eventb.theory.core.desc="isZero(x) =&gt; remZeros(x) = nil" org.eventb.theory.core.formula="bn_remTrailingZeros(x)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="bn_isZero(x)" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="0" org.eventb.core.label="countBits(remZero(x)) = countBits(x)" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="countBits(remZero(x)) = countBits(x)" org.eventb.theory.core.formula="bn_countBits(bn_remTrailingZeros(x))">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="bn_countBits(x)"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="1" org.eventb.core.label="zero = cons(FALSE, zero)" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="zero = cons(FALSE, zero)" org.eventb.theory.core.formula="bn_isZero(cons(xB, y))">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="xB = FALSE ∧ bn_isZero(y)"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="3" org.eventb.core.label="LSB(zero) = FALSE" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="false" org.eventb.theory.core.desc="LSB(zero) = FALSE" org.eventb.theory.core.formula="bn_LSB(x)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="bn_isZero(x)" org.eventb.theory.core.formula="FALSE"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="4" org.eventb.core.label="Strip Cons" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Strip Cons" org.eventb.theory.core.formula="cons(xB, x) bn_Eq cons(yB, y)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="xB = yB ∧ x bn_Eq y"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="7" org.eventb.core.label="cons(TRUE, x) ≠ zero" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="isZero(cons(TRUE, x)) is False" org.eventb.theory.core.formula="bn_isZero(cons(TRUE, x))">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="⊥"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="8" org.eventb.core.label="cons(FALSE, notZero) ≠ zero" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="false" org.eventb.theory.core.desc="cons(FALSE, notZero) ≠ zero" org.eventb.theory.core.formula="bn_isZero(cons(FALSE, x))">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="¬(bn_isZero(x))" org.eventb.theory.core.formula="⊥"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="9" org.eventb.core.label="cons(FALSE, zero) = zero" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="false" org.eventb.theory.core.desc="cons(FALSE, zero) = zero" org.eventb.theory.core.formula="bn_isZero(cons(FALSE, x))">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="bn_isZero(x)" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name=":" org.eventb.core.label="nil is zero" org.eventb.theory.core.applicability="automatic" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="nil is zero" org.eventb.theory.core.formula="bn_isZero(nil)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name=";" org.eventb.core.label="zero &lt;&lt; 1 = zero" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="false" org.eventb.theory.core.desc="zero &lt;&lt; 1 = zero" org.eventb.theory.core.formula="bn_isZero(bn_shiftLeft1(x))">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="bn_isZero(x)" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="=" org.eventb.core.label="x bn_Eq remZeros(x)" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="x bn_Eq remZeros(x)" org.eventb.theory.core.formula="x bn_Eq bn_remTrailingZeros(x)">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="&gt;" org.eventb.core.label="remZeros(x) bn_Eq x" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="remZeros(x) bn_Eq x" org.eventb.theory.core.formula="bn_remTrailingZeros(x) bn_Eq x">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="⊤"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="?" org.eventb.core.label="remZeros(remZeros(x)) = remZeros(x)" org.eventb.theory.core.applicability="both" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="remZeros(remZeros(x)) = remZeros(x)" org.eventb.theory.core.formula="bn_remTrailingZeros(bn_remTrailingZeros(x))">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="bn_remTrailingZeros(x)"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="@" org.eventb.core.label="remZerosToEquality" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="remZerosToEquality" org.eventb.theory.core.formula="x bn_Eq y">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="bn_remTrailingZeros(x) = bn_remTrailingZeros(y)"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.rewriteRule name="A" org.eventb.core.label="Commutivity" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.desc="Commutitive Sqap" org.eventb.theory.core.formula="x bn_Eq y">
<org.eventb.theory.core.rewriteRuleRHS name="'" org.eventb.core.label="rhs1" org.eventb.core.predicate="⊤" org.eventb.theory.core.formula="y bn_Eq x"/>
</org.eventb.theory.core.rewriteRule>
<org.eventb.theory.core.inferenceRule name="D" org.eventb.core.label="Same Bit Count" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.desc="Same bit count">
<org.eventb.theory.core.given name="'" org.eventb.core.predicate="x bn_Eq y" org.eventb.theory.core.hyp="true"/>
<org.eventb.theory.core.infer name="(" org.eventb.core.predicate="bn_countBits(x) = bn_countBits(y)"/>
</org.eventb.theory.core.inferenceRule>
</org.eventb.theory.core.proofRulesBlock>
<org.eventb.theory.core.importTheoryProject name="X" org.eventb.theory.core.importTheoryProject="/BOOL">
<org.eventb.theory.core.importTheory name="'" org.eventb.theory.core.importTheory="/BOOL/BOOL.dtf|org.eventb.theory.core.deployedTheoryRoot#BOOL"/>
</org.eventb.theory.core.importTheoryProject>
<org.eventb.theory.core.importTheoryProject name="Y" org.eventb.theory.core.importTheoryProject="/BinaryNumbers">
<org.eventb.theory.core.importTheory name="'" org.eventb.theory.core.importTheory="/BinaryNumbers/BitwiseOps.dtf|org.eventb.theory.core.deployedTheoryRoot#BitwiseOps"/>
<org.eventb.theory.core.importTheory name="(" org.eventb.theory.core.importTheory="/BinaryNumbers/BinaryNatural_T.dtf|org.eventb.theory.core.deployedTheoryRoot#BinaryNatural_T"/>
</org.eventb.theory.core.importTheoryProject>
<org.eventb.theory.core.importTheoryProject name="Z" org.eventb.theory.core.importTheoryProject="/ListTheory">
<org.eventb.theory.core.importTheory name="'" org.eventb.theory.core.importTheory="/ListTheory/_ListTheorems.dtf|org.eventb.theory.core.deployedTheoryRoot#_ListTheorems"/>
</org.eventb.theory.core.importTheoryProject>
</org.eventb.theory.core.theoryRoot>
