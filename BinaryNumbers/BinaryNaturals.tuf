<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.theoryRoot org.eventb.core.comment="My numbers are backwards." org.eventb.core.configuration="org.eventb.theory.core.thy">
<org.eventb.theory.core.newOperatorDefinition name="F" org.eventb.core.label="bnOne" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.directOperatorDefinition name="'" org.eventb.theory.core.formula="cons(TRUE, nil)"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="A" org.eventb.core.label="bn_isNil" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="List(BOOL)" org.eventb.core.identifier="a"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="nil" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="cons(xb, xs)" org.eventb.theory.core.formula="⊥"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="E" org.eventb.core.label="bn_increment" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="List(BOOL)" org.eventb.core.identifier="a"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="nil" org.eventb.theory.core.formula="bnOne"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB, as)" org.eventb.theory.core.formula="COND(aB = TRUE, cons(FALSE, bn_increment(as)), cons(TRUE, as))"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name=";" org.eventb.core.label="bn_add_int" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="List(BOOL)" org.eventb.core.identifier="x"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="List(BOOL)" org.eventb.core.identifier="y"/>
<org.eventb.theory.core.operatorArgument name="*" org.eventb.core.expression="BOOL" org.eventb.core.identifier="carry"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="nil" org.eventb.theory.core.formula="COND(carry = TRUE, bn_increment(y), y)"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB, xs)" org.eventb.theory.core.formula=" COND((xB = TRUE) ∧ (bn_LSB(y) = TRUE) ∧ (carry = TRUE), cons(TRUE, bn_add_int(xs, bn_shiftLeft1(y), TRUE)),&#10;COND((xB = FALSE) ∧ (bn_LSB(y) = FALSE) ∧ (carry = FALSE), cons(FALSE, bn_add_int(xs, bn_shiftLeft1(y), FALSE)),&#10;COND(((xB xOR bn_LSB(y)) xOR carry) = TRUE, cons(TRUE, bn_add_int(xs, bn_shiftLeft1(y), FALSE)),&#10; cons(FALSE, bn_add_int(xs, bn_shiftLeft1(y), TRUE)))))"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.newOperatorDefinition name="=" org.eventb.core.label="bn_Add" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="INFIX">
<org.eventb.theory.core.directOperatorDefinition name="'" org.eventb.theory.core.formula="bn_add_int(x, y, FALSE)"/>
<org.eventb.theory.core.operatorArgument name="(" org.eventb.core.expression="List(BOOL)" org.eventb.core.identifier="x"/>
<org.eventb.theory.core.operatorArgument name=")" org.eventb.core.expression="List(BOOL)" org.eventb.core.identifier="y"/>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.theorem name="D" org.eventb.core.label="bn_AddZero" org.eventb.core.predicate="∀x·bn_add_int(x, nil, FALSE) = x"/>
<org.eventb.theory.core.theorem name="C" org.eventb.core.label="bn_appendList" org.eventb.core.predicate="∀x· bn_concatonate(x, nil) = x"/>
<org.eventb.theory.core.theorem name="I" org.eventb.core.label="bn_carryToIncrementBase" org.eventb.core.predicate="∀x·bn_add_int(x, nil, TRUE) = bn_increment(x)"/>
<org.eventb.theory.core.theorem name="X" org.eventb.core.label="bn_carryToIncrementBase2" org.eventb.core.predicate="∀x·bn_add_int(nil, x, TRUE) = bn_increment(x)"/>
<org.eventb.theory.core.theorem name="Q" org.eventb.core.label="bn_incrementReduction" org.eventb.core.predicate="∀x, y· bn_increment(x) bn_Eq bn_increment(y) ⇔ x bn_Eq y"/>
<org.eventb.theory.core.theorem name="P" org.eventb.core.label="bn_CarryToIncrement x + y" org.eventb.core.predicate="∀x, y·bn_add_int(x, y, TRUE) bn_Eq bn_increment(bn_add_int(x, y, FALSE))"/>
<org.eventb.theory.core.theorem name="M" org.eventb.core.label="bn_isomorphic Corrally" org.eventb.core.predicate="∀x·bn_toNat(cons(FALSE, x)) = bn_toNat(x) nTimes two "/>
<org.eventb.theory.core.theorem name="N" org.eventb.core.label="bn_isomorphic Corrally2" org.eventb.core.predicate="∀x·bn_toNat(cons(TRUE, x)) = (bn_toNat(x) nTimes two) nAdd one "/>
<org.eventb.theory.core.theorem name="O" org.eventb.core.label="bn_isomorphic Corrally3" org.eventb.core.predicate="∀x· bn_toNat(bn_increment(x)) = one nAdd bn_toNat(x)"/>
<org.eventb.theory.core.theorem name="L" org.eventb.core.label="bn_isomorphicToNats" org.eventb.core.predicate="∀x, y·bn_toNat(bn_add_int(x, y, FALSE)) = bn_toNat(x) nAdd bn_toNat(y)"/>
<org.eventb.theory.core.newOperatorDefinition name="J" org.eventb.core.label="bn_toNat" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.notationType="PREFIX">
<org.eventb.theory.core.operatorArgument name="'" org.eventb.core.expression="List(BOOL)" org.eventb.core.identifier="a"/>
<org.eventb.theory.core.recursiveOperatorDefinition name="(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.recursiveDefinitionCase name="'" org.eventb.core.expression="nil" org.eventb.theory.core.formula="zero"/>
<org.eventb.theory.core.recursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB, xs)" org.eventb.theory.core.formula="COND(xB = TRUE, one, zero) nAdd (suc(suc(zero)) nTimes bn_toNat(xs))"/>
</org.eventb.theory.core.recursiveOperatorDefinition>
</org.eventb.theory.core.newOperatorDefinition>
<org.eventb.theory.core.importTheoryProject name="K" org.eventb.theory.core.importTheoryProject="/Maths">
<org.eventb.theory.core.importTheory name="'" org.eventb.theory.core.importTheory="/Maths/NaturalsMultiply.dtf|org.eventb.theory.core.deployedTheoryRoot#NaturalsMultiply"/>
</org.eventb.theory.core.importTheoryProject>
<org.eventb.theory.core.importTheoryProject name="W" org.eventb.theory.core.importTheoryProject="/BOOL">
<org.eventb.theory.core.importTheory name="'" org.eventb.theory.core.importTheory="/BOOL/BOOL.dtf|org.eventb.theory.core.deployedTheoryRoot#BOOL"/>
</org.eventb.theory.core.importTheoryProject>
<org.eventb.theory.core.importTheoryProject name="\" org.eventb.theory.core.importTheoryProject="/BinaryNumbers">
<org.eventb.theory.core.importTheory name="'" org.eventb.theory.core.importTheory="/BinaryNumbers/BitwiseOps.dtf|org.eventb.theory.core.deployedTheoryRoot#BitwiseOps"/>
<org.eventb.theory.core.importTheory name="(" org.eventb.theory.core.importTheory="/BinaryNumbers/BinaryEquality.dtf|org.eventb.theory.core.deployedTheoryRoot#BinaryEquality"/>
</org.eventb.theory.core.importTheoryProject>
</org.eventb.theory.core.theoryRoot>
