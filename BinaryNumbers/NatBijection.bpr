<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.prFile version="1">
<org.eventb.core.prProof name="bijection/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="x,p_prev" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="isIsomorphic" org.eventb.core.label="isIsomorphic" org.eventb.core.predicate="m∈Monoid(T)∧n∈Monoid(U)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="(∀x⦂T,y⦂T·∃f⦂ℙ(T×U)·f∈T ⤖ U∧x ↦ y∈dom(mOp(m))∧mOp(m)∈T × T ⇸ T∧mOp(m)(x ↦ y)∈dom(f)∧f∈T ⇸ U∧x∈dom(f)∧f∈T ⇸ U∧y∈dom(f)∧f∈T ⇸ U∧f(x) ↦ f(y)∈dom(mOp(n))∧mOp(n)∈U × U ⇸ U∧f(mOp(m)(x ↦ y))=mOp(n)(f(x) ↦ f(y)))∨(∃x⦂T,y⦂T·∀f⦂ℙ(T×U)·¬f∈T ⤖ U∨(x ↦ y∈dom(mOp(m))∧mOp(m)∈T × T ⇸ T∧mOp(m)(x ↦ y)∈dom(f)∧f∈T ⇸ U∧x∈dom(f)∧f∈T ⇸ U∧y∈dom(f)∧f∈T ⇸ U∧f(x) ↦ f(y)∈dom(mOp(n))∧mOp(n)∈U × U ⇸ U∧¬f(mOp(m)(x ↦ y))=mOp(n)(f(x) ↦ f(y))))">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="U×ℙ(U×U×U)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="∀x⦂T,y⦂T·∃f⦂ℙ(T×U)·f∈T ⤖ U∧f(mOp(m)(x ↦ y))=mOp(n)(f(x) ↦ f(y))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧((∀x⦂T·x∈T⇒x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ ident)=x⇒ident ↦ x∈dom(op)))∧(∀x⦂T·x∈T⇒op(x ↦ ident)=x∧op(ident ↦ x)=x))" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,one ⦂ Nat,zero ⦂ Nat) nAdd (suc(suc(zero ⦂ Nat)) nTimes bn_toNat(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=zero" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toBin expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toBin case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p7,p8">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=suc(p_prev)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p7">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toBin expansion on goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toBin(p_prev))" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p12">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p11"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(bn_increment(bn_toBin(p_prev)))=suc(bn_toNat(bn_toBin(p_prev)))" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p8"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_toNat(bn_increment(x))=suc(bn_toNat(x))"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toBin case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂Nat·bn_toNat(bn_toBin(x))=x"/>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_toNat(bn_toBin(x))=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_toNat(bn_toBin(zero ⦂ Nat))=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_toNat(nil ⦂ List(BOOL))=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="x=suc(p_prev)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="bn_toNat(bn_increment(bn_toBin(p_prev)))=suc(p_prev)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="bn_toNat(bn_toBin(p_prev))=p_prev">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="bn_toNat(bn_toBin(suc(p_prev)))=suc(p_prev)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_toNat(bn_increment(bn_toBin(p_prev)))=suc(bn_toNat(bn_toBin(p_prev)))">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="(zero ⦂ Nat)=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_toNat(bn_increment(x))=suc(bn_toNat(x))"/>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="suc(bn_toNat(bn_toBin(p_prev)))=suc(p_prev)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="bn_toBin(p_prev)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="bijection/WD-THM"/>
<org.eventb.core.prProof name="thm1/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_decrement" org.eventb.core.label="bn_decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,cons(FALSE,xT),COND(bn_isZero(xT),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(xT))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧((∀x⦂T·x∈T⇒x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ ident)=x⇒ident ↦ x∈dom(op)))∧(∀x⦂T·x∈T⇒op(x ↦ ident)=x∧op(ident ↦ x)=x))" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="isIsomorphic" org.eventb.core.label="isIsomorphic" org.eventb.core.predicate="m∈Monoid(T)∧n∈Monoid(U)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="(∀x⦂T,y⦂T·∃f⦂ℙ(T×U)·f∈T ⤖ U∧x ↦ y∈dom(mOp(m))∧mOp(m)∈T × T ⇸ T∧mOp(m)(x ↦ y)∈dom(f)∧f∈T ⇸ U∧x∈dom(f)∧f∈T ⇸ U∧y∈dom(f)∧f∈T ⇸ U∧f(x) ↦ f(y)∈dom(mOp(n))∧mOp(n)∈U × U ⇸ U∧f(mOp(m)(x ↦ y))=mOp(n)(f(x) ↦ f(y)))∨(∃x⦂T,y⦂T·∀f⦂ℙ(T×U)·¬f∈T ⤖ U∨(x ↦ y∈dom(mOp(m))∧mOp(m)∈T × T ⇸ T∧mOp(m)(x ↦ y)∈dom(f)∧f∈T ⇸ U∧x∈dom(f)∧f∈T ⇸ U∧y∈dom(f)∧f∈T ⇸ U∧f(x) ↦ f(y)∈dom(mOp(n))∧mOp(n)∈U × U ⇸ U∧¬f(mOp(m)(x ↦ y))=mOp(n)(f(x) ↦ f(y))))">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="U×ℙ(U×U×U)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="∀x⦂T,y⦂T·∃f⦂ℙ(T×U)·f∈T ⤖ U∧f(mOp(m)(x ↦ y))=mOp(n)(f(x) ↦ f(y))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_toNat(cons(TRUE,x))=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(x))"/>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_toNat(cons(TRUE,x))=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="increment to suc/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_internal" org.eventb.core.label="nAdd_internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd_internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_int_P" org.eventb.core.label="nAdd_int_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd_internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_hasSetBit" org.eventb.core.label="bn_hasSetBit" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=TRUE∨bn_hasSetBit(aT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isNormal" org.eventb.core.label="bn_isNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(as=(nil ⦂ List(BOOL))∧aB=TRUE)∨(as≠(nil ⦂ List(BOOL))∧bn_isNormal(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="bn_countBits(a)=bn_countBits(b)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_decrement" org.eventb.core.label="bn_decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,cons(FALSE,xT),COND(bn_isZero(xT),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(xT))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Add" org.eventb.core.label="bn_Add" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_nat_T" org.eventb.core.label="bn_nat_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL)·(x∈List(BOOL)∧bn_isNormal(x))∨¬x∈List(BOOL)∨¬bn_isNormal(x)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Or" org.eventb.core.label="bn_Or" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And" org.eventb.core.label="bn_And" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And_P" org.eventb.core.label="bn_And_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL)×List(BOOL)×List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL),y⦂List(BOOL)·(x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))))∨¬x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∨¬y∈(bn_nat_T ⦂ ℙ(List(BOOL)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat2" org.eventb.core.label="bn_toNat2" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_One expansion on goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 0 = 0  (auto rewrite)" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on goal" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroRight"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesZero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNatural_T"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNatural_T.bn_One"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p14,p15">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p17">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p19">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p15" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p25">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucIntoAdditionLeft on goal" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on goal" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (suc(suc(zero))=suc(suc(zero)) nTimes suc(zero))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p28">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="suc(zero) = one on goal" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 1 = x  (auto rewrite)" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesOne"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="suc(zero) = one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p28">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with suc(suc(zero))=suc(suc(zero)) nTimes suc(zero)" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p28">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p31">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on goal" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * y + x * z = x * (y + z) on goal" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on goal" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * y = x * z =&gt; y = z on goal" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="p4,p35">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p35"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p35"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on goal" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p37" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prGoal="p37" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p14"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p4,p38">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4,p38"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p38" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p39"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p39"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TDivideThrough"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Factorization"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p28"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucIntoAddition"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p40">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p40" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p41"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="p41">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p43">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p15" org.eventb.core.prInfHyps="p42"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p43" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p44" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p44" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p45">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p45" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p46" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p46" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p47">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p47" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p48" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p48" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p49">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on goal" org.eventb.core.prGoal="p49" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p50" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on goal" org.eventb.core.prGoal="p50" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p51" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prGoal="p51" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p52" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p52" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p17"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_toNat(bn_One ⦂ List(BOOL))=suc(bn_toNat(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="suc(suc(zero ⦂ Nat)) nTimes bn_toNat(bn_increment(p_tail))=suc(suc(zero ⦂ Nat)) nTimes (suc(zero ⦂ Nat) nAdd bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="bn_toNat(COND(FALSE=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)))=suc((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="bn_toNat(bn_increment(p_tail))=suc(bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="(one ⦂ Nat) nAdd (zero ⦂ Nat)=suc(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="COND(TRUE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL))),(two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))=suc(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="bn_toNat(cons(FALSE,bn_increment(p_tail)))=suc(bn_toNat(cons(TRUE,p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="suc(suc(zero ⦂ Nat))=suc(suc(zero ⦂ Nat))"/>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(bn_increment(p_tail))=(suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat)) nAdd (suc(suc(zero ⦂ Nat)) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_toNat(bn_increment(nil ⦂ List(BOOL)))=suc(bn_toNat(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="bn_toNat(cons(TRUE,nil ⦂ List(BOOL)))=suc(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="bn_toNat(bn_increment(p_tail))=suc((zero ⦂ Nat) nAdd bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="suc(zero ⦂ Nat)=suc(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="bn_toNat(bn_increment(cons(FALSE,p_tail)))=suc(bn_toNat(cons(FALSE,p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_toNat(bn_increment(x))=suc(bn_toNat(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes (zero ⦂ Nat))=suc(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=suc((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="COND(TRUE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=suc((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))=suc(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="suc(suc(zero ⦂ Nat))=suc(suc(zero ⦂ Nat)) nTimes (one ⦂ Nat)"/>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="bn_toNat(cons(FALSE,bn_increment(p_tail)))=suc(COND(TRUE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="suc(zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=suc((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="suc(suc(zero ⦂ Nat))=suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_increment(p_tail))),(two ⦂ Nat) nTimes bn_toNat(bn_increment(p_tail)))=suc((one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="bn_toNat(bn_increment(cons(FALSE,p_tail)))=suc((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="¬suc(suc(zero ⦂ Nat))≠(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="suc((two ⦂ Nat) nTimes bn_toNat(p_tail))=suc((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="bn_toNat(bn_increment(cons(TRUE,p_tail)))=suc(bn_toNat(cons(TRUE,p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(bn_increment(p_tail))=suc(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(bn_increment(p_tail))=suc((one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="suc((zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)))=suc((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(bn_increment(p_tail))=suc(suc(zero ⦂ Nat)) nTimes (suc(zero ⦂ Nat) nAdd bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="bn_toNat(bn_increment(p_tail))=suc(zero ⦂ Nat) nAdd bn_toNat(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="suc(suc(zero ⦂ Nat))≠(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="bn_toNat(bn_increment(cons(p_head,p_tail)))=suc(bn_toNat(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="bn_toNat(COND(TRUE=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)))=suc(bn_toNat(cons(TRUE,p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="bn_toNat(cons(FALSE,bn_increment(p_tail)))=suc((one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_toNat(bn_increment(x))=suc(bn_toNat(x))"/>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="(one ⦂ Nat)=suc(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="bn_toNat(bn_increment(cons(FALSE,p_tail)))=suc(COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_toNat(cons(TRUE,nil ⦂ List(BOOL)))=suc(bn_toNat(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="bn_toNat(cons(TRUE,p_tail))=suc((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(bn_increment(p_tail))=(suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(bn_increment(p_tail))=suc(suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="x=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.cut"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="bijection1/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="x,p_prev" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_internal" org.eventb.core.label="nAdd_internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd_internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_int_P" org.eventb.core.label="nAdd_int_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd_internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_hasSetBit" org.eventb.core.label="bn_hasSetBit" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=TRUE∨bn_hasSetBit(aT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isNormal" org.eventb.core.label="bn_isNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(as=(nil ⦂ List(BOOL))∧aB=TRUE)∨(as≠(nil ⦂ List(BOOL))∧bn_isNormal(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="bn_countBits(a)=bn_countBits(b)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_decrement" org.eventb.core.label="bn_decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,cons(FALSE,xT),COND(bn_isZero(xT),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(xT))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Add" org.eventb.core.label="bn_Add" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_nat_T" org.eventb.core.label="bn_nat_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL)·(x∈List(BOOL)∧bn_isNormal(x))∨¬x∈List(BOOL)∨¬bn_isNormal(x)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Or" org.eventb.core.label="bn_Or" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And" org.eventb.core.label="bn_And" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),bn_remTrailingZeros(cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And_P" org.eventb.core.label="bn_And_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL)×List(BOOL)×List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL),y⦂List(BOOL)·(x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))))∨¬x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∨¬y∈(bn_nat_T ⦂ ℙ(List(BOOL)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat2" org.eventb.core.label="bn_toNat2" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=zero" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toBin expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toBin case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p7,p8">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=suc(p_prev)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p8">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toBin expansion on goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toBin(p_prev))" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p12">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p11"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(bn_increment(bn_toBin(p_prev)))=suc(bn_toNat(bn_toBin(p_prev)))" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p7"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_toNat(bn_increment(x))=suc(bn_toNat(x))"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toBin case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="suc(bn_toNat(bn_toBin(p_prev)))=suc(p_prev)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_toNat(bn_increment(x))=suc(bn_toNat(x))"/>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_toNat(bn_toBin(x))=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="(zero ⦂ Nat)=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_toNat(bn_increment(bn_toBin(p_prev)))=suc(bn_toNat(bn_toBin(p_prev)))">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="x=suc(p_prev)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂Nat·bn_toNat(bn_toBin(x))=x"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="bn_toNat(bn_toBin(suc(p_prev)))=suc(p_prev)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_toNat(nil ⦂ List(BOOL))=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="bn_toNat(bn_toBin(p_prev))=p_prev">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="bn_toNat(bn_increment(bn_toBin(p_prev)))=suc(p_prev)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_toNat(bn_toBin(zero ⦂ Nat))=(zero ⦂ Nat)"/>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="bn_toBin(p_prev)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="bijection2/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,a,b,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_internal" org.eventb.core.label="nAdd_internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd_internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_int_P" org.eventb.core.label="nAdd_int_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd_internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_hasSetBit" org.eventb.core.label="bn_hasSetBit" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=TRUE∨bn_hasSetBit(aT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isNormal" org.eventb.core.label="bn_isNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(as=(nil ⦂ List(BOOL))∧aB=TRUE)∨(as≠(nil ⦂ List(BOOL))∧bn_isNormal(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="bn_countBits(a)=bn_countBits(b)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_decrement" org.eventb.core.label="bn_decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,cons(FALSE,xT),COND(bn_isZero(xT),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(xT))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Add" org.eventb.core.label="bn_Add" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_nat_T" org.eventb.core.label="bn_nat_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL)·(x∈List(BOOL)∧bn_isNormal(x))∨¬x∈List(BOOL)∨¬bn_isNormal(x)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Or" org.eventb.core.label="bn_Or" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And" org.eventb.core.label="bn_And" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),bn_remTrailingZeros(cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And_P" org.eventb.core.label="bn_And_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL)×List(BOOL)×List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL),y⦂List(BOOL)·(x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))))∨¬x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∨¬y∈(bn_nat_T ⦂ ℙ(List(BOOL)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat2" org.eventb.core.label="bn_toNat2" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (∃a,b·x=a bn_Add b)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p6">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p6">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p7"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ goal (inst nil,nil)" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p11,p12">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ hyp (∃a,b·p_tail=a bn_Add b)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p12" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p13">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prHypAction>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p14"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail=a bn_Add b" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p13">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p18">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p16"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p14" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p11,p14"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ goal (inst cons(p_head,a),cons(FALSE,b))" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p19">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p25">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=FALSE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p28">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p28">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p29">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p28">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="p28"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p30">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p30">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p31">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p32">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p30" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p32"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p32"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p28"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.2.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.2.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e1,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ hyp (∃a,b·x=a bn_Add b)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p5" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p33">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prHypAction>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p33"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=a bn_Add b" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p33">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p35">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p34"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p36">
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst a,b)" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p37">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p36"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(a bn_Add b)=bn_toNat(a) nAdd bn_toNat(b)" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="p37">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p38">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p39">
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toBin(bn_toNat(a) nAdd bn_toNat(b)),a bn_Add b)" org.eventb.core.prHyps="p39">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p40">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p39"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p41">
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toBin(bn_toNat(a) nAdd bn_toNat(b)),a bn_Add b)" org.eventb.core.prHyps="p41">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p42">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p41"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (bn_toBin(bn_toNat(a) nAdd bn_toNat(b)) bn_Eq a bn_Add b⇔bn_toBin(bn_toNat(a) nAdd bn_toNat(b))=a bn_Add b)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p43">
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ hyp mp (bn_isNormal(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))∧bn_isNormal(a bn_Add b)⇒(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)) bn_Eq a bn_Add b⇔bn_toBin(bn_toNat(a) nAdd bn_toNat(b))=a bn_Add b))" org.eventb.core.prHyps="p42">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p44">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p42"/>
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p44" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p45">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p46">
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toNat(a) nAdd bn_toNat(b))" org.eventb.core.prHyps="p46">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p45">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p46"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p45" org.eventb.core.prHyps="p45"/>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isNormal(bn_toBin(x))"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p34">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p34"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p43">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p42"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with bn_toBin(bn_toNat(a) nAdd bn_toNat(b)) bn_Eq a bn_Add b⇔bn_toBin(bn_toNat(a) nAdd bn_toNat(b))=a bn_Add b" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p40" org.eventb.core.prInfHyps="p47"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p40"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv RL with bn_toBin(bn_toNat(a) nAdd bn_toNat(b)) bn_Eq a bn_Add b⇔bn_toBin(bn_toNat(a) nAdd bn_toNat(b))=a bn_Add b" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p47"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p40"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p43" org.eventb.core.prHyps="p43"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p43">
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with bn_toBin(bn_toNat(a) nAdd bn_toNat(b)) bn_Eq a bn_Add b⇔bn_toBin(bn_toNat(a) nAdd bn_toNat(b))=a bn_Add b" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p40" org.eventb.core.prInfHyps="p47"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p42" org.eventb.core.prInfHyps="p48"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p40,p42"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with bn_toBin(bn_toNat(a) nAdd bn_toNat(b))=a bn_Add b⇔bn_toNat(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))=bn_toNat(a bn_Add b)" org.eventb.core.prGoal="p38" org.eventb.core.prHyps="p47">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p50">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p48" org.eventb.core.prInfHyps="p49"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p43,p48"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p40"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p50" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p50">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p40" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p51"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p42" org.eventb.core.prHyps="p34,p43" org.eventb.core.prInfHyps="p52"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p47" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p53"/>
<org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p48" org.eventb.core.prHyps="p34" org.eventb.core.prInfHyps="p54"/>
<org.eventb.core.prHypAction name="REWRITE4" org.eventb.core.prHidden="p49" org.eventb.core.prHyps="p34" org.eventb.core.prInfHyps="p55"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p51" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p56"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p52"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p53" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p57"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p54"/>
<org.eventb.core.prHypAction name="HIDE4" org.eventb.core.prHyps="p55"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p43" org.eventb.core.prHyps="p56,p57" org.eventb.core.prInfHyps="p58"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p58"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p59">
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toNat(a) nAdd bn_toNat(b))" org.eventb.core.prHyps="p59">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p60">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p59"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))=bn_toNat(a) nAdd bn_toNat(b)" org.eventb.core.prGoal="p50" org.eventb.core.prHyps="p60">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p61">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p61" org.eventb.core.prHyps="p37"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_toNat(bn_toBin(x))=x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p43"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e4,e5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·bn_isNormal(x)∧bn_isNormal(y)⇒(x bn_Eq y⇔x=y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e4,e5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x bn_Eq y⇔bn_toNat(x)=bn_toNat(y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e6,e7"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·bn_toNat(x bn_Add y)=bn_toNat(x) nAdd bn_toNat(y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_toNat(x bn_Add y)=bn_toNat(x) nAdd bn_toNat(y)"/>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="bn_isNormal(cons(p_head,a bn_Add b))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isNormal(x)⇒bn_toBin(bn_toNat(x))=x"/>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="cons(p_head,a bn_Add b)=COND(p_head=FALSE∧FALSE=FALSE,cons(FALSE,a bn_Add bn_shiftLeft1(cons(FALSE,b))),cons(TRUE,a bn_Add bn_shiftLeft1(cons(FALSE,b))))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="bn_toBin(bn_toNat(a) nAdd bn_toNat(b))=a bn_Add b⇔⊥">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="bn_isNormal(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))∧⊤⇒(⊥⇔⊥)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="¬bn_toBin(bn_toNat(a) nAdd bn_toNat(b)) bn_Eq a bn_Add b">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p60" org.eventb.core.predicate="bn_toNat(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))=bn_toNat(a) nAdd bn_toNat(b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="bn_isNormal(a bn_Add b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="cons(p_head,a bn_Add b)=COND(⊤,cons(FALSE,a bn_Add b),cons(TRUE,a bn_Add b))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="cons(p_head,a bn_Add b)=COND(p_head=TRUE∧FALSE=TRUE,cons(FALSE,bn_increment(a bn_Add bn_shiftLeft1(cons(FALSE,b)))),COND(p_head=FALSE∧bn_LSB(cons(FALSE,b))=FALSE,cons(FALSE,a bn_Add bn_shiftLeft1(cons(FALSE,b))),cons(TRUE,a bn_Add bn_shiftLeft1(cons(FALSE,b)))))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="cons(p_head,a bn_Add b)=COND(⊥,cons(FALSE,a bn_Add b),cons(TRUE,a bn_Add b))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="bn_isNormal(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))∧bn_isNormal(a bn_Add b)⇒(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)) bn_Eq a bn_Add b⇔bn_toBin(bn_toNat(a) nAdd bn_toNat(b))=a bn_Add b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL)) bn_Add (nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="bn_isNormal(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))∧bn_isNormal(a bn_Add b)⇒(bn_toBin(bn_toNat(a) nAdd bn_toNat(b))=a bn_Add b⇔bn_toBin(bn_toNat(a) nAdd bn_toNat(b))=a bn_Add b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="∃a⦂List(BOOL),b⦂List(BOOL)·x=a bn_Add b">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="bn_toBin(bn_toNat(a) nAdd bn_toNat(b)) bn_Eq a bn_Add b⇔bn_toBin(bn_toNat(a) nAdd bn_toNat(b))=a bn_Add b">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="x=a bn_Add b">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="bn_toBin(bn_toNat(a bn_Add b))=a bn_Add b">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="∀x⦂Nat·bn_isNormal(bn_toBin(x))"/>
<org.eventb.core.prPred name="p59" org.eventb.core.predicate="∀x⦂Nat·bn_toNat(bn_toBin(x))=x"/>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="bn_isNormal(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isNormal(x)∧bn_isNormal(y)⇒(x bn_Eq y⇔x=y)"/>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="bn_toBin(bn_toNat(a) nAdd bn_toNat(b))=a bn_Add b⇔bn_toNat(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))=bn_toNat(a bn_Add b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="bn_toBin(bn_toNat(a) nAdd bn_toNat(b)) bn_Eq a bn_Add b⇔bn_toNat(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))=bn_toNat(a bn_Add b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="x=cons(p_head,a bn_Add b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="bn_toNat(a bn_Add b)=bn_toNat(a) nAdd bn_toNat(b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="cons(p_head,a bn_Add b)=COND(p_head=FALSE,cons(FALSE,a bn_Add b),cons(TRUE,a bn_Add bn_shiftLeft1(cons(FALSE,b))))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="bn_isNormal(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))∧⊤⇒⊤">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_isNormal(x)⇒bn_toBin(bn_toNat(x))=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="¬p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p61" org.eventb.core.predicate="bn_toNat(a) nAdd bn_toNat(b)=bn_toNat(a bn_Add b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_toBin(bn_toNat(x))=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="bn_isNormal(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="bn_isNormal(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="cons(p_head,a bn_Add b)=COND(p_head=FALSE∧bn_LSB(cons(FALSE,b))=FALSE,cons(FALSE,a bn_Add bn_shiftLeft1(cons(FALSE,b))),cons(TRUE,a bn_Add bn_shiftLeft1(cons(FALSE,b))))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p58" org.eventb.core.predicate="⊥⇔⊥"/>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="p_tail=a bn_Add b">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="cons(p_head,a bn_Add b)=cons(p_head,a) bn_Add cons(FALSE,b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="cons(p_head,a bn_Add b)=COND(p_head=TRUE∧bn_LSB(cons(FALSE,b))=TRUE,cons(FALSE,bn_increment(a bn_Add bn_shiftLeft1(cons(FALSE,b)))),COND(¬p_head=TRUE∧¬bn_LSB(cons(FALSE,b))=TRUE,cons(FALSE,a bn_Add bn_shiftLeft1(cons(FALSE,b))),cons(TRUE,a bn_Add bn_shiftLeft1(cons(FALSE,b)))))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="∃a⦂List(BOOL),b⦂List(BOOL)·p_tail=a bn_Add b">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="bn_toNat(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))=bn_toNat(a bn_Add b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x bn_Eq y⇔bn_toNat(x)=bn_toNat(y)"/>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="bn_isNormal(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="cons(p_head,a bn_Add b)=COND(p_head=FALSE,cons(FALSE,a bn_Add bn_shiftLeft1(cons(FALSE,b))),cons(TRUE,a bn_Add bn_shiftLeft1(cons(FALSE,b))))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="bn_toBin(bn_toNat(a) nAdd bn_toNat(b))=a bn_Add b">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="∃a0⦂List(BOOL),b0⦂List(BOOL)·cons(p_head,a bn_Add b)=a0 bn_Add b0">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="∃a⦂List(BOOL),b⦂List(BOOL)·cons(p_head,p_tail)=a bn_Add b">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="∃a⦂List(BOOL),b⦂List(BOOL)·(nil ⦂ List(BOOL))=a bn_Add b"/>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="bn_isNormal(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))∧⊤⇒(bn_toBin(bn_toNat(a) nAdd bn_toNat(b))=a bn_Add b⇔bn_toBin(bn_toNat(a) nAdd bn_toNat(b))=a bn_Add b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="cons(p_head,a bn_Add b)=COND(p_head=FALSE,cons(FALSE,a bn_Add b),cons(TRUE,a bn_Add b))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="cons(p_head,a bn_Add b)=COND(p_head=TRUE∧bn_LSB(cons(FALSE,b))=TRUE,cons(FALSE,bn_increment(a bn_Add bn_shiftLeft1(cons(FALSE,b)))),COND(p_head=FALSE∧bn_LSB(cons(FALSE,b))=FALSE,cons(FALSE,a bn_Add bn_shiftLeft1(cons(FALSE,b))),cons(TRUE,a bn_Add bn_shiftLeft1(cons(FALSE,b)))))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="bn_toBin(bn_toNat(a) nAdd bn_toNat(b)) bn_Eq a bn_Add b⇔⊥">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="bn_isNormal(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))∧bn_isNormal(a bn_Add b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="¬bn_toBin(bn_toNat(a) nAdd bn_toNat(b))=a bn_Add b">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="bn_isNormal(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))∧bn_isNormal(a bn_Add b)⇒(bn_toNat(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))=bn_toNat(a bn_Add b)⇔bn_toNat(bn_toBin(bn_toNat(a) nAdd bn_toNat(b)))=bn_toNat(a bn_Add b))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="nil ⦂ List(BOOL)"/>
<org.eventb.core.prExpr name="e5" org.eventb.core.expression="a bn_Add b">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e6" org.eventb.core.expression="a">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e7" org.eventb.core.expression="b">
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="bn_toBin(bn_toNat(a) nAdd bn_toNat(b))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="cons(p_head,a)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="cons(FALSE,b)">
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="bn_toNat(a) nAdd bn_toNat(b)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="b" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.cut"/>
<org.eventb.core.prReas name="r15" org.eventb.core.prRID="org.eventb.core.seqprover.impE:2"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r17" org.eventb.core.prRID="org.eventb.core.seqprover.eqvLR"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.exF"/>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.exI"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r14" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r18" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRL"/>
<org.eventb.core.prReas name="r16" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="suc to incremnet/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_internal" org.eventb.core.label="nAdd_internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd_internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_int_P" org.eventb.core.label="nAdd_int_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd_internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_hasSetBit" org.eventb.core.label="bn_hasSetBit" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=TRUE∨bn_hasSetBit(aT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isNormal" org.eventb.core.label="bn_isNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(as=(nil ⦂ List(BOOL))∧aB=TRUE)∨(as≠(nil ⦂ List(BOOL))∧bn_isNormal(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="bn_countBits(a)=bn_countBits(b)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_decrement" org.eventb.core.label="bn_decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,cons(FALSE,xT),COND(bn_isZero(xT),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(xT))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Add" org.eventb.core.label="bn_Add" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_nat_T" org.eventb.core.label="bn_nat_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL)·(x∈List(BOOL)∧bn_isNormal(x))∨¬x∈List(BOOL)∨¬bn_isNormal(x)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Or" org.eventb.core.label="bn_Or" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And" org.eventb.core.label="bn_And" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),bn_remTrailingZeros(cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And_P" org.eventb.core.label="bn_And_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL)×List(BOOL)×List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL),y⦂List(BOOL)·(x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))))∨¬x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∨¬y∈(bn_nat_T ⦂ ℙ(List(BOOL)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat2" org.eventb.core.label="bn_toNat2" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toBin expansion on goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x = x  (auto rewrite)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="x bn_Eq x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toBin case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂Nat·bn_toBin(suc(x)) bn_Eq bn_increment(bn_toBin(x))"/>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_toBin(suc(x)) bn_Eq bn_increment(bn_toBin(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_increment(bn_toBin(x)) bn_Eq bn_increment(bn_toBin(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="increment to suc/WD-THM"/>
<org.eventb.core.prProof name="bijection1/WD-THM"/>
<org.eventb.core.prProof name="bijection2/WD-THM"/>
<org.eventb.core.prProof name="alternate toNat/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_internal" org.eventb.core.label="nAdd_internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd_internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_int_P" org.eventb.core.label="nAdd_int_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd_internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_hasSetBit" org.eventb.core.label="bn_hasSetBit" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=TRUE∨bn_hasSetBit(aT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isNormal" org.eventb.core.label="bn_isNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(as=(nil ⦂ List(BOOL))∧aB=TRUE)∨(as≠(nil ⦂ List(BOOL))∧bn_isNormal(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="bn_countBits(a)=bn_countBits(b)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_decrement" org.eventb.core.label="bn_decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,cons(FALSE,xT),COND(bn_isZero(xT),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(xT))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Add" org.eventb.core.label="bn_Add" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_nat_T" org.eventb.core.label="bn_nat_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL)·(x∈List(BOOL)∧bn_isNormal(x))∨¬x∈List(BOOL)∨¬bn_isNormal(x)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Or" org.eventb.core.label="bn_Or" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And" org.eventb.core.label="bn_And" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),bn_remTrailingZeros(cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And_P" org.eventb.core.label="bn_And_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL)×List(BOOL)×List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL),y⦂List(BOOL)·(x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))))∨¬x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∨¬y∈(bn_nat_T ⦂ ℙ(List(BOOL)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat2" org.eventb.core.label="bn_toNat2" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_decrement expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p11">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on goal" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on goal" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_decrement case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p15,p16">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p16">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_decrement expansion on goal" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p19">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on goal" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on goal" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_decrement case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_toNat(cons(TRUE,nil ⦂ List(BOOL)))=suc(bn_toNat(COND(TRUE=TRUE,cons(FALSE,nil ⦂ List(BOOL)),COND(⊤,nil ⦂ List(BOOL),cons(TRUE,bn_decrement(nil ⦂ List(BOOL)))))))"/>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="suc((zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL))))=suc((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="bn_toNat(cons(TRUE,cons(p_head,p_tail)))=suc(bn_toNat(bn_decrement(cons(TRUE,cons(p_head,p_tail)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_toNat(cons(TRUE,nil ⦂ List(BOOL)))=suc(bn_toNat(COND(TRUE=TRUE,cons(FALSE,nil ⦂ List(BOOL)),COND(bn_isZero(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(nil ⦂ List(BOOL)))))))"/>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_toNat(cons(TRUE,x))=suc(bn_toNat(bn_decrement(cons(TRUE,x))))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="bn_toNat(cons(TRUE,cons(p_head,p_tail)))=suc(bn_toNat(cons(FALSE,cons(p_head,p_tail))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="bn_toNat(cons(TRUE,cons(p_head,p_tail)))=suc((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="suc((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail)))=suc((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="bn_toNat(cons(TRUE,cons(p_head,p_tail)))=suc(bn_toNat(COND(TRUE=TRUE,cons(FALSE,cons(p_head,p_tail)),COND(bn_isZero(cons(p_head,p_tail)),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(cons(p_head,p_tail)))))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="suc(zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))=suc((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_toNat(cons(TRUE,nil ⦂ List(BOOL)))=suc(bn_toNat(bn_decrement(cons(TRUE,nil ⦂ List(BOOL)))))"/>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="bn_toNat(cons(TRUE,p_tail))=suc(bn_toNat(bn_decrement(cons(TRUE,p_tail))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="bn_toNat(cons(TRUE,nil ⦂ List(BOOL)))=suc(bn_toNat(cons(FALSE,nil ⦂ List(BOOL))))"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="bn_toNat(cons(TRUE,nil ⦂ List(BOOL)))=suc((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))=suc((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail)))=suc((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="bn_toNat(cons(TRUE,nil ⦂ List(BOOL)))=suc(COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL))),(two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL))))"/>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="suc((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))=suc((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="suc(zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail)))=suc((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="bn_toNat(cons(TRUE,cons(p_head,p_tail)))=suc(COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))),(two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="COND(TRUE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL))),(two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))=suc((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_toNat(cons(TRUE,x))=suc(bn_toNat(bn_decrement(cons(TRUE,x))))"/>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="COND(TRUE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))),(two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail)))=suc((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="suc((zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))))=suc((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="toNat(zero) = zero/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_internal" org.eventb.core.label="nAdd_internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd_internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_int_P" org.eventb.core.label="nAdd_int_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd_internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_hasSetBit" org.eventb.core.label="bn_hasSetBit" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=TRUE∨bn_hasSetBit(aT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isNormal" org.eventb.core.label="bn_isNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(as=(nil ⦂ List(BOOL))∧aB=TRUE)∨(as≠(nil ⦂ List(BOOL))∧bn_isNormal(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="bn_countBits(a)=bn_countBits(b)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_decrement" org.eventb.core.label="bn_decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,cons(FALSE,xT),COND(bn_isZero(xT),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(xT))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Add" org.eventb.core.label="bn_Add" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_nat_T" org.eventb.core.label="bn_nat_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL)·(x∈List(BOOL)∧bn_isNormal(x))∨¬x∈List(BOOL)∨¬bn_isNormal(x)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Or" org.eventb.core.label="bn_Or" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And" org.eventb.core.label="bn_And" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And_P" org.eventb.core.label="bn_And_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL)×List(BOOL)×List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL),y⦂List(BOOL)·(x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))))∨¬x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∨¬y∈(bn_nat_T ⦂ ℙ(List(BOOL)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat2" org.eventb.core.label="bn_toNat2" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p10,p11">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on bn_isZero(cons(p_head,p_tail))" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p14" org.eventb.core.prInfHyps="p15,p16"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p18">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p11"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p20">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(p_tail)=zero" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 0 = 0  (auto rewrite)" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesZero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p22">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p7"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p16,p11">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p13"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p23">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="p23">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p26">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p24"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p13" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p11,p13"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="isZero(cons(TRUE, x)) is False  (auto rewrite)" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(cons(TRUE,p_tail))=zero" org.eventb.core.prHyps="p25">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p28,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p25"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p28"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p28" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p29"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on one nAdd (two nTimes bn_toNat(p_tail))=zero" org.eventb.core.prHyps="p29">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p30,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p29"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p30"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on suc(zero) nAdd (two nTimes bn_toNat(p_tail))=zero" org.eventb.core.prHyps="p30">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p31,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p30"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p31"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p32"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p31"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p32" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p27"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE, x) ≠ zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p33">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p33" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p13" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p11,p13"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="p16">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p36">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p23"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="(zero ⦂ Nat)=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_isZero(x)⇔bn_toNat(x)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="bn_isZero(x)⇒bn_toNat(x)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="suc(zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="bn_toNat(cons(TRUE,p_tail))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="FALSE=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="bn_toNat(nil ⦂ List(BOOL))=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="FALSE=FALSE∧⊤"/>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="bn_toNat(cons(FALSE,p_tail))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="(two ⦂ Nat) nTimes (zero ⦂ Nat)=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="bn_toNat(p_tail)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="p_head=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="bn_toNat(x)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="bn_toNat(cons(p_head,p_tail))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isZero(x)⇔bn_toNat(x)=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="bn_isZero(cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="bn_isZero(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="bn_toNat(x)=(zero ⦂ Nat)⇒bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="COND(TRUE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="suc((zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="x=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="suc((two ⦂ Nat) nTimes bn_toNat(p_tail))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRewrites"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="alternate toNat2/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,x" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_internal" org.eventb.core.label="nAdd_internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd_internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_int_P" org.eventb.core.label="nAdd_int_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd_internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_hasSetBit" org.eventb.core.label="bn_hasSetBit" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=TRUE∨bn_hasSetBit(aT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isNormal" org.eventb.core.label="bn_isNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(as=(nil ⦂ List(BOOL))∧aB=TRUE)∨(as≠(nil ⦂ List(BOOL))∧bn_isNormal(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="bn_countBits(a)=bn_countBits(b)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_decrement" org.eventb.core.label="bn_decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,cons(FALSE,xT),COND(bn_isZero(xT),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(xT))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Add" org.eventb.core.label="bn_Add" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_nat_T" org.eventb.core.label="bn_nat_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL)·(x∈List(BOOL)∧bn_isNormal(x))∨¬x∈List(BOOL)∨¬bn_isNormal(x)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Or" org.eventb.core.label="bn_Or" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And" org.eventb.core.label="bn_And" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And_P" org.eventb.core.label="bn_And_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL)×List(BOOL)×List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL),y⦂List(BOOL)·(x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))))∨¬x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∨¬y∈(bn_nat_T ⦂ ℙ(List(BOOL)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat2" org.eventb.core.label="bn_toNat2" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p9" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p10"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p11,p12">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p13"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on ¬bn_isZero(cons(p_head,p_tail))" org.eventb.core.prHyps="p13">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p17,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in ¬(p_head=FALSE∧bn_isZero(p_tail))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p18"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p18" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p19"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on goal" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucIntoAdditionLeft on goal" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (suc(suc(zero))=suc(suc(zero)) nTimes suc(zero))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p24">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="suc(zero) = one on goal" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 1 = x  (auto rewrite)" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesOne"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="suc(zero) = one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p24">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with suc(suc(zero))=suc(suc(zero)) nTimes suc(zero)" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p27">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on goal" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * y + x * z = x * (y + z) on goal" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on goal" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * y = x * z =&gt; y = z on goal" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p8,p31">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p31"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p31"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p33">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p19" org.eventb.core.prHyps="p33" org.eventb.core.prInfHyps="p34"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p34"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p33">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p36">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p35"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p11"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p37" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p37" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p38">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on goal" org.eventb.core.prGoal="p38" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p39" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Subtract $1 from Both sides on goal" org.eventb.core.prGoal="p39" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_decrement expansion on goal" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p41" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p41" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p42">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p43" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p43" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_decrement case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="x nAdd y = x nAdd z"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p44">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p19" org.eventb.core.prHyps="p44" org.eventb.core.prInfHyps="p45"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p44" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p46"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p45" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p47"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p46">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p49">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p48"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p11"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p49" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p50" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p50" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p51">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_decrement expansion on goal" org.eventb.core.prGoal="p51" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p52" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p52" org.eventb.core.prHyps="p47">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p53">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p53" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p54">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p54" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p55" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p55" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p56">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="AssociativeLeft on goal" org.eventb.core.prGoal="p56" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p57" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on goal" org.eventb.core.prGoal="p57" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p58" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prGoal="p58" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p59" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on goal" org.eventb.core.prGoal="p59" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p60" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with suc(suc(zero))=suc(suc(zero)) nTimes suc(zero)" org.eventb.core.prGoal="p60" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p61">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on goal" org.eventb.core.prGoal="p61" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p62" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * y + x * z = x * (y + z) on goal" org.eventb.core.prGoal="p62" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p63" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on goal" org.eventb.core.prGoal="p63" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p64" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * y = x * z =&gt; y = z on goal" org.eventb.core.prGoal="p64" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p65" org.eventb.core.prHyps="p8,p31">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p31"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p31"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(cons(FALSE,p_tail))=suc(bn_toNat(cons(TRUE,bn_decrement(p_tail))))" org.eventb.core.prHyps="p12">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p66,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p66"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p66" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p67"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on two nTimes bn_toNat(p_tail)=suc(bn_toNat(cons(TRUE,bn_decrement(p_tail))))" org.eventb.core.prHyps="p67">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p68,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p67"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p68"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p68" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p69"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on two nTimes bn_toNat(p_tail)=suc(one nAdd (two nTimes bn_toNat(bn_decrement(p_tail))))" org.eventb.core.prHyps="p69">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p70,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p69"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p70"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucIntoAdditionLeft on two nTimes bn_toNat(p_tail)=suc(suc(zero) nAdd (two nTimes bn_toNat(bn_decrement(p_tail))))" org.eventb.core.prHyps="p70">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p60,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p70"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p60"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on two nTimes bn_toNat(p_tail)=suc(suc(zero)) nAdd (two nTimes bn_toNat(bn_decrement(p_tail)))" org.eventb.core.prHyps="p60">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p71,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p60"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p71"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with suc(suc(zero))=suc(suc(zero)) nTimes suc(zero)" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p71" org.eventb.core.prInfHyps="p72"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p71"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on suc(suc(zero)) nTimes suc(zero) nTimes bn_toNat(p_tail)=(suc(suc(zero)) nTimes suc(zero)) nAdd (two nTimes bn_toNat(bn_decrement(p_tail)))" org.eventb.core.prHyps="p72">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p73">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p72"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p73"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * y + x * z = x * (y + z) on suc(suc(zero)) nTimes suc(zero) nTimes bn_toNat(p_tail)=(suc(suc(zero)) nTimes suc(zero)) nAdd (suc(suc(zero)) nTimes bn_toNat(bn_decrement(p_tail)))" org.eventb.core.prHyps="p73">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p74">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p73"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p74"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="suc(zero) = one on suc(suc(zero)) nTimes suc(zero) nTimes bn_toNat(p_tail)=suc(suc(zero)) nTimes (suc(zero) nAdd bn_toNat(bn_decrement(p_tail)))" org.eventb.core.prHyps="p74">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p75,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p74"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p75"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Bracket Left on suc(suc(zero)) nTimes one nTimes bn_toNat(p_tail)=suc(suc(zero)) nTimes (suc(zero) nAdd bn_toNat(bn_decrement(p_tail)))" org.eventb.core.prHyps="p75">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p76">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p75"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p76"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 1 = x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p76" org.eventb.core.prInfHyps="p64"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p76"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * y = x * z =&gt; y = z on suc(suc(zero)) nTimes bn_toNat(p_tail)=suc(suc(zero)) nTimes (suc(zero) nAdd bn_toNat(bn_decrement(p_tail)))" org.eventb.core.prHyps="p64">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p31,p65">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p31"/>
<org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p64"/>
<org.eventb.core.prHypAction name="SELECT3" org.eventb.core.prHyps="p65"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p65" org.eventb.core.prHyps="p65"/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p8,p77">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8,p77"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p77" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p9"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p9" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p10"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TDivideThrough"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesOne"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TAssocLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="suc(zero) = one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Factorization"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucIntoAddition"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p64" org.eventb.core.prHyps="p8,p77">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8,p77"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p77" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p9"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p9" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p10"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TDivideThrough"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Factorization"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="AssociativeRight"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_decrement case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p33"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="p8,p77">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8,p77"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p77" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p10"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TDivideThrough"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Factorization"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p24"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucIntoAddition"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p78">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p78" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p7"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_decrement expansion on bn_toNat(cons(FALSE,nil))=suc(bn_toNat(cons(TRUE,bn_decrement(nil))))" org.eventb.core.prHyps="p7">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p79,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p79"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(cons(FALSE,nil))=suc(bn_toNat(cons(TRUE,nil)))" org.eventb.core.prHyps="p79">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p80,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p79"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p80"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p80" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p81"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on bn_toNat(cons(FALSE,nil))=suc(one nAdd (two nTimes bn_toNat(nil)))" org.eventb.core.prHyps="p81">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p82,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p81"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p82"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucIntoAdditionLeft on bn_toNat(cons(FALSE,nil))=suc(suc(zero) nAdd (two nTimes bn_toNat(nil)))" org.eventb.core.prHyps="p82">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p83">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p82"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p83"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(cons(FALSE,nil))=suc(suc(zero)) nAdd (two nTimes bn_toNat(nil))" org.eventb.core.prHyps="p83">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p84">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p83"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p84"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p84" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p85"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on two nTimes bn_toNat(nil)=suc(suc(zero)) nAdd (two nTimes bn_toNat(nil))" org.eventb.core.prHyps="p85">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p86">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p85"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p86"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 0 = 0  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p86" org.eventb.core.prInfHyps="p87"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p86"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on zero=suc(suc(zero)) nAdd (two nTimes bn_toNat(nil))" org.eventb.core.prHyps="p87">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p88">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p87"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p88"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 0 = 0  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p88" org.eventb.core.prInfHyps="p89"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p88"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p89" org.eventb.core.prInfHyps="p90"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p89"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p90" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p10"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroRight"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesZero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesZero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucIntoAddition"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_decrement case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p11,p47">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p14"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(cons(FALSE,cons(p_head,p_tail)))=suc(bn_toNat(cons(TRUE,bn_decrement(cons(p_head,p_tail)))))" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p91,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p91"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p91" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p92"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucIntoAdditionLeft on bn_toNat(cons(FALSE,cons(p_head,p_tail)))=suc(one nAdd (two nTimes bn_toNat(bn_decrement(cons(p_head,p_tail)))))" org.eventb.core.prHyps="p92">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p93,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p92"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p93"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on bn_toNat(cons(FALSE,cons(p_head,p_tail)))=suc(one) nAdd (two nTimes bn_toNat(bn_decrement(cons(p_head,p_tail))))" org.eventb.core.prHyps="p93">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p94,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p93"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p94"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (suc(suc(zero))=suc(suc(zero)) nTimes suc(zero))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p24">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="suc(zero) = one on goal" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 1 = x  (auto rewrite)" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesOne"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="suc(zero) = one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p24">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with suc(suc(zero))=suc(suc(zero)) nTimes suc(zero)" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p94" org.eventb.core.prInfHyps="p95"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p94"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(cons(FALSE,cons(p_head,p_tail)))=(suc(suc(zero)) nTimes suc(zero)) nAdd (two nTimes bn_toNat(bn_decrement(cons(p_head,p_tail))))" org.eventb.core.prHyps="p95">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p96">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p95"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p96"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p96" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on two nTimes bn_toNat(cons(p_head,p_tail))=(suc(suc(zero)) nTimes suc(zero)) nAdd (two nTimes bn_toNat(bn_decrement(cons(p_head,p_tail))))" org.eventb.core.prHyps="p27">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p97">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p27"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p97"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on suc(suc(zero)) nTimes bn_toNat(cons(p_head,p_tail))=(suc(suc(zero)) nTimes suc(zero)) nAdd (two nTimes bn_toNat(bn_decrement(cons(p_head,p_tail))))" org.eventb.core.prHyps="p97">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p98,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p97"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p98"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * y + x * z = x * (y + z) on suc(suc(zero)) nTimes bn_toNat(cons(p_head,p_tail))=(suc(suc(zero)) nTimes suc(zero)) nAdd (suc(suc(zero)) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail))))" org.eventb.core.prHyps="p98">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p30,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p98"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p30"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * y = x * z =&gt; y = z on suc(suc(zero)) nTimes bn_toNat(cons(p_head,p_tail))=suc(suc(zero)) nTimes (suc(zero) nAdd bn_toNat(bn_decrement(cons(p_head,p_tail))))" org.eventb.core.prHyps="p30">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p32,p8,p31">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p31"/>
<org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p30"/>
<org.eventb.core.prHypAction name="SELECT3" org.eventb.core.prHyps="p32"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p31"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(cons(p_head,p_tail))=suc(zero) nAdd bn_toNat(bn_decrement(cons(p_head,p_tail)))" org.eventb.core.prHyps="p32">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p99">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p32"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p99"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p33">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p99" org.eventb.core.prHyps="p33" org.eventb.core.prInfHyps="p100"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p100" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p101"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p33">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p102">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p35"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p101" org.eventb.core.prInfHyps="p38"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p11,p101"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="isZero(cons(TRUE, x)) is False  (auto rewrite)" org.eventb.core.prGoal="p102" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p103" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p103" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE, x) ≠ zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p44">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p99" org.eventb.core.prHyps="p44" org.eventb.core.prInfHyps="p104"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p44" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p46"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p104" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p105"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p46">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p106">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p48"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p105" org.eventb.core.prInfHyps="p51"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p11,p105"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_decrement expansion on two nTimes bn_toNat(p_tail)=suc(zero) nAdd bn_toNat(bn_decrement(cons(FALSE,p_tail)))" org.eventb.core.prHyps="p51">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p52,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p51"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p52"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p52" org.eventb.core.prHyps="p47" org.eventb.core.prInfHyps="p53"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p53" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p54"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on two nTimes bn_toNat(p_tail)=suc(zero) nAdd bn_toNat(cons(TRUE,bn_decrement(p_tail)))" org.eventb.core.prHyps="p54">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p55,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p54"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p55"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p55" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p56"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="AssociativeLeft on two nTimes bn_toNat(p_tail)=suc(zero) nAdd one nAdd (two nTimes bn_toNat(bn_decrement(p_tail)))" org.eventb.core.prHyps="p56">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p57,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p56"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p57"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p57" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p56"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p106" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p107" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p107" org.eventb.core.prHyps="p47">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p108">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p108" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="AssociativeRight"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_decrement case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p33"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p8,p77">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8,p77"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p77" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p10"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TDivideThrough"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Factorization"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p24"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucIntoAddition"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p95" org.eventb.core.predicate="bn_toNat(cons(FALSE,cons(p_head,p_tail)))=(suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p79" org.eventb.core.predicate="bn_toNat(cons(FALSE,nil ⦂ List(BOOL)))=suc(bn_toNat(cons(TRUE,nil ⦂ List(BOOL))))"/>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="¬bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_toNat(cons(FALSE,p_tail))=suc(bn_toNat(cons(TRUE,bn_decrement(p_tail))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p71" org.eventb.core.predicate="suc(suc(zero ⦂ Nat)) nTimes bn_toNat(p_tail)=suc(suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="¬bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p78" org.eventb.core.predicate="bn_toNat(cons(FALSE,x))=suc(bn_toNat(cons(TRUE,bn_decrement(x))))⇒¬bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p63" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=suc(suc(zero ⦂ Nat)) nTimes (suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="suc(suc(zero ⦂ Nat))=suc(suc(zero ⦂ Nat))"/>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))=suc(suc(zero ⦂ Nat)) nTimes (suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(cons(p_head,p_tail))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(cons(FALSE,p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p68" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=suc(COND(TRUE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(p_tail))),(two ⦂ Nat) nTimes bn_toNat(bn_decrement(p_tail))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="¬(p_head=FALSE∧bn_isZero(p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p60" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=suc(suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p89" org.eventb.core.predicate="(zero ⦂ Nat)=suc(suc(zero ⦂ Nat)) nAdd (zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))=suc(suc(zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="bn_toNat(cons(p_head,p_tail))=suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=(suc(zero ⦂ Nat) nAdd (one ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p64" org.eventb.core.predicate="suc(suc(zero ⦂ Nat)) nTimes bn_toNat(p_tail)=suc(suc(zero ⦂ Nat)) nTimes (suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="suc(suc(zero ⦂ Nat))=suc(suc(zero ⦂ Nat)) nTimes (one ⦂ Nat)"/>
<org.eventb.core.prPred name="p97" org.eventb.core.predicate="suc(suc(zero ⦂ Nat)) nTimes bn_toNat(cons(p_head,p_tail))=(suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="¬⊤"/>
<org.eventb.core.prPred name="p91" org.eventb.core.predicate="bn_toNat(cons(FALSE,cons(p_head,p_tail)))=suc(COND(TRUE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail)))),(two ⦂ Nat) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p104" org.eventb.core.predicate="COND(⊥,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p67" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=suc(bn_toNat(cons(TRUE,bn_decrement(p_tail))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="p_head=TRUE∨¬bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p103" org.eventb.core.predicate="¬⊥"/>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=suc(zero ⦂ Nat) nAdd (one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="suc(suc(zero ⦂ Nat))≠(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p105" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p99" org.eventb.core.predicate="COND(p_head=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="⊤∨¬bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p98" org.eventb.core.predicate="suc(suc(zero ⦂ Nat)) nTimes bn_toNat(cons(p_head,p_tail))=(suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat)) nAdd (suc(suc(zero ⦂ Nat)) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="¬p_head=FALSE∨¬bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p83" org.eventb.core.predicate="bn_toNat(cons(FALSE,nil ⦂ List(BOOL)))=suc(suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="suc(suc(zero ⦂ Nat)) nTimes bn_toNat(cons(p_head,p_tail))=suc(suc(zero ⦂ Nat)) nTimes (suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(cons(p_head,p_tail))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p93" org.eventb.core.predicate="bn_toNat(cons(FALSE,cons(p_head,p_tail)))=suc(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p76" org.eventb.core.predicate="(suc(suc(zero ⦂ Nat)) nTimes (one ⦂ Nat)) nTimes bn_toNat(p_tail)=suc(suc(zero ⦂ Nat)) nTimes (suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p75" org.eventb.core.predicate="suc(suc(zero ⦂ Nat)) nTimes (one ⦂ Nat) nTimes bn_toNat(p_tail)=suc(suc(zero ⦂ Nat)) nTimes (suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p66" org.eventb.core.predicate="COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=suc(bn_toNat(cons(TRUE,bn_decrement(p_tail))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p94" org.eventb.core.predicate="bn_toNat(cons(FALSE,cons(p_head,p_tail)))=suc(suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="suc(zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(cons(TRUE,p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(bn_decrement(cons(TRUE,p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p92" org.eventb.core.predicate="bn_toNat(cons(FALSE,cons(p_head,p_tail)))=suc((one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))=suc(bn_toNat(cons(TRUE,bn_decrement(cons(p_head,p_tail)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="x=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="⊥∨¬bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL)·¬bn_isZero(x)⇔bn_toNat(cons(FALSE,x))=suc(bn_toNat(cons(TRUE,bn_decrement(x))))"/>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="¬bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))),(two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail)))=suc(bn_toNat(cons(TRUE,bn_decrement(cons(p_head,p_tail)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=suc(zero ⦂ Nat) nAdd bn_toNat(cons(TRUE,bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=suc(zero ⦂ Nat) nAdd bn_toNat(COND(FALSE=TRUE,cons(FALSE,p_tail),COND(⊥,nil ⦂ List(BOOL),cons(TRUE,bn_decrement(p_tail)))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p107" org.eventb.core.predicate="¬(FALSE=FALSE∧bn_isZero(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))=suc(COND(TRUE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail)))),(two ⦂ Nat) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="bn_toNat(cons(FALSE,p_tail))=suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(cons(FALSE,p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=suc(zero ⦂ Nat) nAdd COND(TRUE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(p_tail))),(two ⦂ Nat) nTimes bn_toNat(bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p96" org.eventb.core.predicate="COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))),(two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail)))=(suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p72" org.eventb.core.predicate="suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)=(suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(COND(TRUE=TRUE,cons(FALSE,p_tail),COND(bn_isZero(p_tail),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(p_tail)))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=suc(zero ⦂ Nat) nAdd bn_toNat(COND(FALSE=TRUE,cons(FALSE,p_tail),COND(bn_isZero(p_tail),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(p_tail)))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p61" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=(suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p84" org.eventb.core.predicate="COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL))),(two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))=suc(suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p65" org.eventb.core.predicate="bn_toNat(p_tail)=suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="¬bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p82" org.eventb.core.predicate="bn_toNat(cons(FALSE,nil ⦂ List(BOOL)))=suc(suc(zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL))))"/>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p88" org.eventb.core.predicate="(zero ⦂ Nat)=suc(suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes (zero ⦂ Nat))"/>
<org.eventb.core.prPred name="p100" org.eventb.core.predicate="COND(⊤,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p58" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=suc((zero ⦂ Nat) nAdd (one ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="suc(suc(zero ⦂ Nat))=suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="bn_toNat(cons(TRUE,p_tail))=suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(cons(TRUE,p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="bn_toNat(cons(FALSE,x))=suc(bn_toNat(cons(TRUE,bn_decrement(x))))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))=(suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat)) nAdd (suc(suc(zero ⦂ Nat)) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="bn_toNat(cons(FALSE,nil ⦂ List(BOOL)))=suc(bn_toNat(cons(TRUE,bn_decrement(nil ⦂ List(BOOL)))))"/>
<org.eventb.core.prPred name="p62" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=(suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat)) nAdd (suc(suc(zero ⦂ Nat)) nTimes bn_toNat(bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p101" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p70" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=suc(suc(zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(p_tail))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p77" org.eventb.core.predicate="¬suc(suc(zero ⦂ Nat))≠(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p86" org.eventb.core.predicate="(two ⦂ Nat) nTimes (zero ⦂ Nat)=suc(suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p73" org.eventb.core.predicate="suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)=(suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat)) nAdd (suc(suc(zero ⦂ Nat)) nTimes bn_toNat(bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p59" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=suc(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p85" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL))=suc(suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))=(suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p80" org.eventb.core.predicate="bn_toNat(cons(FALSE,nil ⦂ List(BOOL)))=suc(COND(TRUE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL))),(two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL))))"/>
<org.eventb.core.prPred name="p81" org.eventb.core.predicate="bn_toNat(cons(FALSE,nil ⦂ List(BOOL)))=suc((one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL))))"/>
<org.eventb.core.prPred name="p102" org.eventb.core.predicate="¬bn_isZero(cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p108" org.eventb.core.predicate="¬(FALSE=FALSE∧⊥)"/>
<org.eventb.core.prPred name="p87" org.eventb.core.predicate="(zero ⦂ Nat)=suc(suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))=suc(suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p106" org.eventb.core.predicate="¬bn_isZero(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="¬bn_isZero(x)⇔bn_toNat(cons(FALSE,x))=suc(bn_toNat(cons(TRUE,bn_decrement(x))))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="¬bn_isZero(x)⇒bn_toNat(cons(FALSE,x))=suc(bn_toNat(cons(TRUE,bn_decrement(x))))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(cons(FALSE,p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p69" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=suc((one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(p_tail))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))=suc((one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(bn_decrement(cons(p_head,p_tail)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p90" org.eventb.core.predicate="(zero ⦂ Nat)=suc(suc(zero ⦂ Nat))"/>
<org.eventb.core.prPred name="p74" org.eventb.core.predicate="suc(suc(zero ⦂ Nat)) nTimes suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)=suc(suc(zero ⦂ Nat)) nTimes (suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="bn_toNat(cons(FALSE,cons(p_head,p_tail)))=suc(bn_toNat(cons(TRUE,bn_decrement(cons(p_head,p_tail)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="COND(TRUE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(cons(TRUE,p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=suc(zero ⦂ Nat) nAdd bn_toNat(bn_decrement(cons(TRUE,p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRewrites"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.rn"/>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r14" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.cut"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="Addition Homomorphism/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,p_head,y0,x0,x,y,p_prev" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_internal" org.eventb.core.label="nAdd_internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd_internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_int_P" org.eventb.core.label="nAdd_int_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd_internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_hasSetBit" org.eventb.core.label="bn_hasSetBit" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=TRUE∨bn_hasSetBit(aT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isNormal" org.eventb.core.label="bn_isNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(as=(nil ⦂ List(BOOL))∧aB=TRUE)∨(as≠(nil ⦂ List(BOOL))∧bn_isNormal(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="bn_countBits(a)=bn_countBits(b)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_decrement" org.eventb.core.label="bn_decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,cons(FALSE,xT),COND(bn_isZero(xT),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(xT))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Add" org.eventb.core.label="bn_Add" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_nat_T" org.eventb.core.label="bn_nat_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL)·(x∈List(BOOL)∧bn_isNormal(x))∨¬x∈List(BOOL)∨¬bn_isNormal(x)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Or" org.eventb.core.label="bn_Or" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And" org.eventb.core.label="bn_And" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),bn_remTrailingZeros(cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And_P" org.eventb.core.label="bn_And_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL)×List(BOOL)×List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL),y⦂List(BOOL)·(x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))))∨¬x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∨¬y∈(bn_nat_T ⦂ ℙ(List(BOOL)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat2" org.eventb.core.label="bn_toNat2" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=zero" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toBin expansion on goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x = x  (auto rewrite)" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="x bn_Eq x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toBin case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p8,p9">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=suc(p_prev)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p8">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toBin expansion on goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on goal" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toBin expansion on goal" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (∀x,y·bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x0,y0)" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15">
<org.eventb.core.prIdent name="x0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p16">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x0=nil" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p16">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_One expansion on goal" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (y0=nil)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p23">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y0=nil" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p23">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p26">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_One expansion on goal" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x = x  (auto rewrite)" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="x bn_Eq x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNatural_T"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNatural_T.bn_One"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p31">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_LSB(y0)=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p32">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p32">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p33">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="p23">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p23" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p36"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p36"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="p37,p38">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y0=cons(p_head,p_tail)" org.eventb.core.prGoal="p35" org.eventb.core.prHyps="p37">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p41">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p39"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p32" org.eventb.core.prInfHyps="p40"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p31,p32"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p39"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p41" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on bn_LSB(cons(p_head,p_tail))=TRUE" org.eventb.core.prHyps="p40">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4,p43">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p40"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p43"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p45">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p37" org.eventb.core.prInfHyps="p44"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p37"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p45" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p46" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p46" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p47">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x = x  (auto rewrite)" org.eventb.core.prGoal="p47" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="x bn_Eq x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p48">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p48">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p49">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p49" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p51">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p48" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p50"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p51" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p52" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in goal" org.eventb.core.prGoal="p52" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p52" org.eventb.core.prHyps="p23">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p23" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p36"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p36"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p52" org.eventb.core.prHyps="p37">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y0=cons(p_head,p_tail)" org.eventb.core.prGoal="p52" org.eventb.core.prHyps="p37">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p54">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p39"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p50" org.eventb.core.prInfHyps="p53"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p31,p50"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p39"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p54" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p55" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p55" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p56" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on bn_LSB(cons(p_head,p_tail))=FALSE" org.eventb.core.prHyps="p53">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4,p57">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p53"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p57"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p56" org.eventb.core.prHyps="p57">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p59">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p37" org.eventb.core.prInfHyps="p58"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p37"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p59" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p60">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x = x  (auto rewrite)" org.eventb.core.prGoal="p60" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="x bn_Eq x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p32"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p23"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNatural_T"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNatural_T.bn_One"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p61,p62">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x0=cons(p_head,p_tail)" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p61">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p63">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p63" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p64" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p64" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p65">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (y0=nil)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p23">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y0=nil" org.eventb.core.prGoal="p65" org.eventb.core.prHyps="p23">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p67">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p62" org.eventb.core.prInfHyps="p66"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p62"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p67" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p68" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p68" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p69">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p69" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p70" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p70" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p71">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p71" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p72" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p73">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_increment(cons(p_head,p_tail)))" org.eventb.core.prHyps="p73">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p74">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p73"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_increment(cons(p_head,p_tail)) bn_Add nil=bn_increment(cons(p_head,p_tail))" org.eventb.core.prGoal="p72" org.eventb.core.prHyps="p74">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p75">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Remove Increments  (auto rewrite)" org.eventb.core.prGoal="p75" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p76" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p76" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p77" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p73"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail)" org.eventb.core.prHyps="p73">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p78">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p73"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail bn_Add nil=p_tail" org.eventb.core.prGoal="p77" org.eventb.core.prHyps="p78">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p80">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p66" org.eventb.core.prInfHyps="p79"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p66"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (COND(p_head=FALSE,cons(FALSE,p_tail),cons(TRUE,p_tail))=cons(p_head,p_tail))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p81">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=FALSE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p57">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p81" org.eventb.core.prHyps="p57">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p82">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p82" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p83">
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p83" org.eventb.core.prHyps="p57"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p84">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p81" org.eventb.core.prHyps="p84">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p85">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p85" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p86">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p84" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p43"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p86" org.eventb.core.prHyps="p43"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p57"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p81">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with COND(p_head=FALSE,cons(FALSE,p_tail),cons(TRUE,p_tail))=cons(p_head,p_tail)" org.eventb.core.prGoal="p80" org.eventb.core.prHyps="p81">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p87">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x = x  (auto rewrite)" org.eventb.core.prGoal="p87" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="x bn_Eq x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p81"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="incrReduction"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Add nil=x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.2.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.2.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p31">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p65" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p88" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p43">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p88" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p89">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p89" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p90">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p90" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p92">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p61" org.eventb.core.prInfHyps="p91"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p61"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p92" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p93">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p93" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p94" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p94" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p95">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_LSB(y0)=FALSE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p50">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p95" org.eventb.core.prHyps="p50">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p96">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p96" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p97">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_LSB(y0)=FALSE" org.eventb.core.prGoal="p97" org.eventb.core.prHyps="p50">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p98">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p98" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p99">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p99" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p100" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p100" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p101">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Strip Cons on goal" org.eventb.core.prGoal="p101" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p102" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p102" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p103">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p14">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail,bn_shiftLeft1(y0))" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p103">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p103" org.eventb.core.prHyps="p103"/>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Strip Cons"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p104">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p95" org.eventb.core.prHyps="p104">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p105">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p105" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p106">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p104" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p32"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p106" org.eventb.core.prHyps="p32">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p107">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p107" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p108">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p108" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p109" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p109" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p110">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Strip Cons on goal" org.eventb.core.prGoal="p110" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p111" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p111" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p103">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p14">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail,bn_shiftLeft1(y0))" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p103">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p103" org.eventb.core.prHyps="p103"/>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Strip Cons"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p50"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p112">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p88" org.eventb.core.prHyps="p112">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p113">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p113" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p114">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p112" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p57"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p114" org.eventb.core.prHyps="p57">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p115">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p115" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p116">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prHyps="p57">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p61" org.eventb.core.prInfHyps="p117"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p61"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p116" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p118" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p118" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p119">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_LSB(y0)=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p32">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p119" org.eventb.core.prHyps="p32">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p120">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p120" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p121">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_LSB(y0)=TRUE" org.eventb.core.prGoal="p121" org.eventb.core.prHyps="p32">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p122">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p122" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p123">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p123" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p124" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p124" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p125">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x = x  (auto rewrite)" org.eventb.core.prGoal="p125" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="x bn_Eq x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p48">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p119" org.eventb.core.prHyps="p48">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p126">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p126" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p127">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p48" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p50"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p127" org.eventb.core.prHyps="p50">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p128">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p128" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p129">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p129" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p130" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p130" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p131">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x = x  (auto rewrite)" org.eventb.core.prGoal="p131" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="x bn_Eq x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p32"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p43"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p23"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p14">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p14">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Commutitive Sqap on goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p132" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Commutitive Sqap on bn_toBin(p_prev nAdd y) bn_Eq bn_toBin(p_prev) bn_Add bn_toBin(y)" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4,p133">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p133"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p134">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toBin(p_prev) bn_Add bn_toBin(y),bn_toBin(p_prev nAdd y))" org.eventb.core.prHyps="p134">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p135">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p134"/>
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv RL with bn_increment(bn_toBin(p_prev) bn_Add bn_toBin(y)) bn_Eq bn_increment(bn_toBin(p_prev nAdd y))⇔bn_toBin(p_prev) bn_Add bn_toBin(y) bn_Eq bn_toBin(p_prev nAdd y)" org.eventb.core.prHyps="p135">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p136"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p133"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toBin(p_prev),bn_toBin(y))" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p137">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p138">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_increment(bn_toBin(p_prev)) bn_Add bn_toBin(y),bn_increment(bn_toBin(p_prev) bn_Add bn_toBin(y)),bn_increment(bn_toBin(p_prev nAdd y)))" org.eventb.core.prHyps="p138">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p139">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p138"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Remove Increments  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p134" org.eventb.core.prInfHyps="p140"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p134"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p135" org.eventb.core.prInfHyps="p141"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p135"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p139" org.eventb.core.prInfHyps="p142"/>
<org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p139"/>
<org.eventb.core.prHypAction name="SELECT6" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p132" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p132">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p141" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p143"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p142" org.eventb.core.prHyps="p137,p133" org.eventb.core.prInfHyps="p144"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p140"/>
<org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p143"/>
<org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p144" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p36"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p36"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="incrReduction"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e4,e5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y,z·x bn_Eq y∧y bn_Eq z⇒x bn_Eq z"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e6,e7"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e8,e9"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·bn_increment(x) bn_Eq bn_increment(y)⇔x bn_Eq y"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Commutivity"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Commutivity"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p14"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toBin case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toBin case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p74" org.eventb.core.predicate="bn_increment(cons(p_head,p_tail)) bn_Add (nil ⦂ List(BOOL))=bn_increment(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail)) bn_Eq bn_increment(cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Eq COND(p_head=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p89" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)) bn_Add y0 bn_Eq bn_increment(COND(⊤∧bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),COND(p_head=FALSE∧bn_LSB(y0)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_toBin(y) bn_Eq (nil ⦂ List(BOOL)) bn_Add bn_toBin(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p71" org.eventb.core.predicate="bn_increment(cons(p_head,p_tail)) bn_Add (nil ⦂ List(BOOL)) bn_Eq bn_increment(COND(p_head=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p108" org.eventb.core.predicate="cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0)) bn_Eq bn_increment(cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="bn_increment(nil ⦂ List(BOOL)) bn_Add y0 bn_Eq bn_increment((nil ⦂ List(BOOL)) bn_Add y0)">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment((nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y0))),cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y0))) bn_Eq bn_increment(y0)">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_toBin(x nAdd y) bn_Eq bn_toBin(x) bn_Add bn_toBin(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p113" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)) bn_Add y0 bn_Eq bn_increment(COND(⊥∧bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),COND(p_head=FALSE∧bn_LSB(y0)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p141" org.eventb.core.predicate="bn_toBin(p_prev) bn_Add bn_toBin(y) bn_Eq bn_toBin(p_prev nAdd y)⇔bn_toBin(p_prev) bn_Add bn_toBin(y) bn_Eq bn_toBin(p_prev nAdd y)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p70" org.eventb.core.predicate="bn_increment(cons(p_head,p_tail)) bn_Add (nil ⦂ List(BOOL)) bn_Eq bn_increment(COND(p_head=FALSE∧FALSE=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p119" org.eventb.core.predicate="COND(bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))) bn_Eq bn_increment(COND(bn_LSB(y0)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p95" org.eventb.core.predicate="COND(bn_LSB(y0)=FALSE,cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0)),cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0))) bn_Eq bn_increment(COND(bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p100" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0)) bn_Eq COND(TRUE=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p129" org.eventb.core.predicate="cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)) bn_Eq bn_increment(cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p138" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL),z⦂List(BOOL)·x bn_Eq y∧y bn_Eq z⇒x bn_Eq z"/>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·bn_toBin(x nAdd y) bn_Eq bn_toBin(x) bn_Add bn_toBin(y)"/>
<org.eventb.core.prPred name="p143" org.eventb.core.predicate="⊤⇔⊤"/>
<org.eventb.core.prPred name="p61" org.eventb.core.predicate="x0=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p62" org.eventb.core.predicate="bn_increment(p_tail) bn_Add y0 bn_Eq bn_increment(p_tail bn_Add y0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p99" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0)) bn_Eq bn_increment(cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p142" org.eventb.core.predicate="bn_increment(bn_toBin(p_prev)) bn_Add bn_toBin(y) bn_Eq bn_increment(bn_toBin(p_prev) bn_Add bn_toBin(y))∧bn_toBin(p_prev) bn_Add bn_toBin(y) bn_Eq bn_toBin(p_prev nAdd y)⇒bn_increment(bn_toBin(p_prev)) bn_Add bn_toBin(y) bn_Eq bn_increment(bn_toBin(p_prev nAdd y))">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p128" org.eventb.core.predicate="cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)) bn_Eq bn_increment(COND(⊤,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p109" org.eventb.core.predicate="cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0)) bn_Eq COND(FALSE=TRUE,cons(FALSE,bn_increment(bn_increment(p_tail bn_Add bn_shiftLeft1(y0)))),cons(TRUE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p73" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Add (nil ⦂ List(BOOL))=x"/>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="COND(TRUE=TRUE∧bn_LSB(y0)=TRUE,cons(FALSE,bn_increment((nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y0))),COND(¬TRUE=TRUE∧¬bn_LSB(y0)=TRUE,cons(FALSE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y0)),cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y0)))) bn_Eq bn_increment(y0)">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p63" org.eventb.core.predicate="bn_increment(cons(p_head,p_tail)) bn_Add y0 bn_Eq bn_increment(cons(p_head,p_tail) bn_Add y0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="COND(FALSE=TRUE,cons(FALSE,bn_increment((nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))) bn_Eq bn_increment(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p65" org.eventb.core.predicate="bn_increment(cons(p_head,p_tail)) bn_Add y0 bn_Eq bn_increment(COND(p_head=TRUE∧bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),COND(p_head=FALSE∧bn_LSB(y0)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="cons(TRUE,nil ⦂ List(BOOL)) bn_Eq cons(TRUE,nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail)) bn_Eq COND(TRUE=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p64" org.eventb.core.predicate="bn_increment(cons(p_head,p_tail)) bn_Add y0 bn_Eq bn_increment(COND(p_head=TRUE∧bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),COND(¬p_head=TRUE∧¬bn_LSB(y0)=TRUE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p67" org.eventb.core.predicate="bn_increment(cons(p_head,p_tail)) bn_Add (nil ⦂ List(BOOL)) bn_Eq bn_increment(COND(p_head=TRUE∧bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),COND(p_head=FALSE∧bn_LSB(nil ⦂ List(BOOL))=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="cons(TRUE,bn_shiftLeft1(y0)) bn_Eq bn_increment(y0)">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="(bn_One ⦂ List(BOOL)) bn_Add y0 bn_Eq bn_increment((nil ⦂ List(BOOL)) bn_Add y0)">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="bn_LSB(y0)=TRUE">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p134" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_increment(x) bn_Eq bn_increment(y)⇔x bn_Eq y"/>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="cons(FALSE,bn_increment(bn_shiftLeft1(p_tail))) bn_Eq bn_increment(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_toBin((zero ⦂ Nat) nAdd y) bn_Eq bn_toBin(zero ⦂ Nat) bn_Add bn_toBin(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="COND(bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,bn_increment((nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))) bn_Eq bn_increment(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p133" org.eventb.core.predicate="bn_toBin(p_prev) bn_Add bn_toBin(y) bn_Eq bn_toBin(p_prev nAdd y)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="bn_toBin(suc(p_prev) nAdd y) bn_Eq bn_increment(bn_toBin(p_prev)) bn_Add bn_toBin(y)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p111" org.eventb.core.predicate="TRUE=TRUE∧bn_increment(p_tail) bn_Add bn_shiftLeft1(y0) bn_Eq bn_increment(p_tail bn_Add bn_shiftLeft1(y0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p75" org.eventb.core.predicate="bn_increment(cons(p_head,p_tail)) bn_Eq bn_increment(COND(p_head=FALSE,cons(FALSE,p_tail bn_Add (nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p84" org.eventb.core.predicate="¬p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="bn_LSB(cons(p_head,p_tail))=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="bn_toBin(suc(p_prev) nAdd y) bn_Eq bn_toBin(suc(p_prev)) bn_Add bn_toBin(y)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p130" org.eventb.core.predicate="cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)) bn_Eq COND(FALSE=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p126" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))) bn_Eq bn_increment(COND(bn_LSB(y0)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment((nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y0))),cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y0))) bn_Eq bn_increment(y0)">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p144" org.eventb.core.predicate="⊤∧⊤⇒⊥"/>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="bn_LSB(y0)=FALSE">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="COND(bn_LSB(y0)=TRUE,cons(FALSE,bn_increment((nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y0))),cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y0))) bn_Eq bn_increment(y0)">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p127" org.eventb.core.predicate="cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)) bn_Eq bn_increment(COND(bn_LSB(y0)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="bn_LSB(cons(p_head,p_tail))=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p82" org.eventb.core.predicate="COND(⊤,cons(FALSE,p_tail),cons(TRUE,p_tail))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p79" org.eventb.core.predicate="bn_increment(p_tail) bn_Add (nil ⦂ List(BOOL)) bn_Eq bn_increment(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p132" org.eventb.core.predicate="bn_increment(bn_toBin(p_prev)) bn_Add bn_toBin(y) bn_Eq bn_increment(bn_toBin(p_prev nAdd y))">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="cons(TRUE,nil ⦂ List(BOOL)) bn_Add y0 bn_Eq bn_increment(y0)">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p87" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="bn_increment(bn_toBin(p_prev nAdd y)) bn_Eq bn_increment(bn_toBin(p_prev)) bn_Add bn_toBin(y)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="bn_toBin(y) bn_Eq bn_toBin(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p66" org.eventb.core.predicate="bn_increment(p_tail) bn_Add (nil ⦂ List(BOOL)) bn_Eq bn_increment(p_tail bn_Add (nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="x=suc(p_prev)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y0)) bn_Eq bn_increment(y0)">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p78" org.eventb.core.predicate="p_tail bn_Add (nil ⦂ List(BOOL))=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="cons(TRUE,nil ⦂ List(BOOL)) bn_Eq bn_increment(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p106" org.eventb.core.predicate="cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0)) bn_Eq bn_increment(COND(bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p120" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))) bn_Eq bn_increment(COND(bn_LSB(y0)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p85" org.eventb.core.predicate="COND(⊥,cons(FALSE,p_tail),cons(TRUE,p_tail))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_toBin(y) bn_Eq bn_toBin(zero ⦂ Nat) bn_Add bn_toBin(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="bn_toBin(p_prev nAdd y) bn_Eq bn_toBin(p_prev) bn_Add bn_toBin(y)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p68" org.eventb.core.predicate="bn_increment(cons(p_head,p_tail)) bn_Add (nil ⦂ List(BOOL)) bn_Eq bn_increment(COND(p_head=TRUE∧FALSE=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),COND(p_head=FALSE∧bn_LSB(nil ⦂ List(BOOL))=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p124" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))) bn_Eq COND(TRUE=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_toBin(suc(p_prev nAdd y)) bn_Eq bn_increment(bn_toBin(p_prev)) bn_Add bn_toBin(y)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p116" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Add y0 bn_Eq bn_increment(COND(bn_LSB(y0)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p135" org.eventb.core.predicate="bn_increment(bn_toBin(p_prev) bn_Add bn_toBin(y)) bn_Eq bn_increment(bn_toBin(p_prev nAdd y))⇔bn_toBin(p_prev) bn_Add bn_toBin(y) bn_Eq bn_toBin(p_prev nAdd y)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p123" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))) bn_Eq bn_increment(cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="cons(FALSE,bn_increment(bn_shiftLeft1(y0))) bn_Eq bn_increment(y0)">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p93" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail)) bn_Add y0 bn_Eq bn_increment(COND(bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p98" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0)) bn_Eq bn_increment(COND(FALSE=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p105" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0)),cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0))) bn_Eq bn_increment(COND(bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p110" org.eventb.core.predicate="cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0)) bn_Eq cons(TRUE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="¬bn_LSB(y0)=TRUE">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="y0=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p104" org.eventb.core.predicate="¬bn_LSB(y0)=FALSE">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="bn_increment(x0) bn_Add y0 bn_Eq bn_increment(x0 bn_Add y0)">
<org.eventb.core.prIdent name="x0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Eq bn_increment(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="¬y0=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p140" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x bn_Eq y⇔x bn_Eq y"/>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="cons(TRUE,nil ⦂ List(BOOL)) bn_Add y0 bn_Eq bn_increment((nil ⦂ List(BOOL)) bn_Add y0)">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p101" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0)) bn_Eq cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="cons(FALSE,bn_increment(bn_shiftLeft1(cons(p_head,p_tail)))) bn_Eq bn_increment(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p69" org.eventb.core.predicate="bn_increment(cons(p_head,p_tail)) bn_Add (nil ⦂ List(BOOL)) bn_Eq bn_increment(COND(p_head=FALSE∧bn_LSB(nil ⦂ List(BOOL))=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p97" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0)) bn_Eq bn_increment(COND(bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p92" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail)) bn_Add y0 bn_Eq bn_increment(COND(bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),COND(TRUE=FALSE∧bn_LSB(y0)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p112" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p91" org.eventb.core.predicate="x0=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p88" org.eventb.core.predicate="COND(p_head=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)) bn_Add y0 bn_Eq bn_increment(COND(p_head=TRUE∧bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),COND(p_head=FALSE∧bn_LSB(y0)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="cons(TRUE,bn_shiftLeft1(cons(p_head,p_tail))) bn_Eq bn_increment(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p76" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq COND(p_head=FALSE,cons(FALSE,p_tail bn_Add (nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p136" org.eventb.core.predicate="bn_increment(bn_toBin(p_prev) bn_Add bn_toBin(y)) bn_Eq bn_increment(bn_toBin(p_prev nAdd y))">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="y0=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p131" org.eventb.core.predicate="cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)) bn_Eq cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p122" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))) bn_Eq bn_increment(COND(TRUE=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p81" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,p_tail),cons(TRUE,p_tail))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y)"/>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="cons(TRUE,nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p72" org.eventb.core.predicate="bn_increment(cons(p_head,p_tail)) bn_Add (nil ⦂ List(BOOL)) bn_Eq bn_increment(COND(p_head=FALSE,cons(FALSE,p_tail bn_Add (nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p115" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Add y0 bn_Eq bn_increment(COND(⊤∧bn_LSB(y0)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p139" org.eventb.core.predicate="bn_increment(bn_toBin(p_prev)) bn_Add bn_toBin(y) bn_Eq bn_increment(bn_toBin(p_prev) bn_Add bn_toBin(y))∧bn_increment(bn_toBin(p_prev) bn_Add bn_toBin(y)) bn_Eq bn_increment(bn_toBin(p_prev nAdd y))⇒bn_increment(bn_toBin(p_prev)) bn_Add bn_toBin(y) bn_Eq bn_increment(bn_toBin(p_prev nAdd y))">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p121" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))) bn_Eq bn_increment(COND(bn_LSB(y0)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail)) bn_Eq cons(FALSE,bn_increment(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="y0=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p60" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Eq cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="x0=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p77" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq COND(p_head=FALSE,cons(FALSE,p_tail bn_Add (nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add (nil ⦂ List(BOOL))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p114" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Add y0 bn_Eq bn_increment(COND(p_head=FALSE∧bn_LSB(y0)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p102" org.eventb.core.predicate="FALSE=FALSE∧bn_increment(p_tail) bn_Add bn_shiftLeft1(y0) bn_Eq bn_increment(p_tail bn_Add bn_shiftLeft1(y0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p83" org.eventb.core.predicate="FALSE=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p96" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0)),cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0))) bn_Eq bn_increment(COND(bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p107" org.eventb.core.predicate="cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0)) bn_Eq bn_increment(COND(⊤,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p94" org.eventb.core.predicate="COND(FALSE=TRUE∧bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(bn_increment(p_tail) bn_Add bn_shiftLeft1(y0))),COND(¬FALSE=TRUE∧¬bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0)),cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(y0)))) bn_Eq bn_increment(COND(bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p103" org.eventb.core.predicate="bn_increment(p_tail) bn_Add bn_shiftLeft1(y0) bn_Eq bn_increment(p_tail bn_Add bn_shiftLeft1(y0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p117" org.eventb.core.predicate="x0=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p80" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq COND(p_head=FALSE,cons(FALSE,p_tail),cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail)) bn_Eq bn_increment(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p125" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))) bn_Eq cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="cons(TRUE,(nil ⦂ List(BOOL)) bn_Add (nil ⦂ List(BOOL))) bn_Eq bn_increment(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p137" org.eventb.core.predicate="bn_increment(bn_toBin(p_prev)) bn_Add bn_toBin(y) bn_Eq bn_increment(bn_toBin(p_prev) bn_Add bn_toBin(y))">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p90" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail)) bn_Add y0 bn_Eq bn_increment(COND(bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),COND(p_head=FALSE∧bn_LSB(y0)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)))))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p58" org.eventb.core.predicate="y0=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="¬cons(p_head,p_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p118" org.eventb.core.predicate="COND(TRUE=TRUE∧bn_LSB(y0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(y0))),COND(¬TRUE=TRUE∧¬bn_LSB(y0)=TRUE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0)))) bn_Eq bn_increment(COND(bn_LSB(y0)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(y0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(y0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p86" org.eventb.core.predicate="TRUE=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="cons(FALSE,bn_increment((nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y0))) bn_Eq bn_increment(y0)">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))) bn_Eq bn_increment(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p59" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Eq COND(FALSE=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="bn_increment(bn_toBin(p_prev)) bn_Add bn_toBin(y)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e9" org.eventb.core.expression="bn_toBin(p_prev nAdd y)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e8" org.eventb.core.expression="bn_toBin(p_prev) bn_Add bn_toBin(y)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="bn_increment(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e5" org.eventb.core.expression="bn_increment(bn_toBin(p_prev nAdd y))">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e7" org.eventb.core.expression="bn_toBin(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="bn_shiftLeft1(y0)">
<org.eventb.core.prIdent name="y0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e6" org.eventb.core.expression="bn_toBin(p_prev)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="bn_increment(bn_toBin(p_prev) bn_Add bn_toBin(y))">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.cut"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r16" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRL"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r15" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.dtDistinctCase"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r14" org.eventb.core.prRID="org.eventb.core.seqprover.mngHyp"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="testing/S-THM"/>
<org.eventb.core.prProof name="timesMonoid2/S-THM"/>
<org.eventb.core.prProof name="toBin is normal/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="a,x,p_prev" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_internal" org.eventb.core.label="nAdd_internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd_internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_int_P" org.eventb.core.label="nAdd_int_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd_internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_hasSetBit" org.eventb.core.label="bn_hasSetBit" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=TRUE∨bn_hasSetBit(aT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isNormal" org.eventb.core.label="bn_isNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(as=(nil ⦂ List(BOOL))∧aB=TRUE)∨(as≠(nil ⦂ List(BOOL))∧bn_isNormal(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="bn_countBits(a)=bn_countBits(b)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_decrement" org.eventb.core.label="bn_decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,cons(FALSE,xT),COND(bn_isZero(xT),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(xT))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Add" org.eventb.core.label="bn_Add" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_nat_T" org.eventb.core.label="bn_nat_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL)·(x∈List(BOOL)∧bn_isNormal(x))∨¬x∈List(BOOL)∨¬bn_isNormal(x)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Or" org.eventb.core.label="bn_Or" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And" org.eventb.core.label="bn_And" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),bn_remTrailingZeros(cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And_P" org.eventb.core.label="bn_And_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL)×List(BOOL)×List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL),y⦂List(BOOL)·(x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))))∨¬x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∨¬y∈(bn_nat_T ⦂ ℙ(List(BOOL)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat2" org.eventb.core.label="bn_toNat2" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=zero" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toBin expansion on goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isNormal expansion on goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNatural_T"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNatural_T.bn_isNormal case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toBin case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p6,p7">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=suc(p_prev)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p7">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toBin expansion on goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (∃a·a=bn_toBin(p_prev))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="One Point Rule in goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p10">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ hyp (∃a·a=bn_toBin(p_prev))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p10" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p11">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prHypAction>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p11"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with a=bn_toBin(p_prev)" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with a=bn_toBin(p_prev)" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p14">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toBin(p_prev))" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p15">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p15" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p16"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p16" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p17"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isNormal(x)⇒bn_isNormal(bn_increment(x))"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p10"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toBin case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="bn_isNormal(bn_toBin(suc(p_prev)))">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_isNormal(bn_toBin(zero ⦂ Nat))"/>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="∃a⦂List(BOOL)·a=bn_toBin(p_prev)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="a=bn_toBin(p_prev)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="bn_isNormal(bn_increment(bn_toBin(p_prev)))">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isNormal(x)⇒bn_isNormal(bn_increment(x))"/>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_isNormal(bn_toBin(p_prev))">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="x=suc(p_prev)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂Nat·bn_isNormal(bn_toBin(x))"/>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="⊤⇒⊥"/>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_isNormal(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="bn_isNormal(bn_toBin(p_prev))⇒bn_isNormal(bn_increment(bn_toBin(p_prev)))">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_isNormal(bn_toBin(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_isNormal(a)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="bn_isNormal(bn_increment(a))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="bn_toBin(p_prev)">
<org.eventb.core.prIdent name="p_prev" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.onePointRule:2"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.exF"/>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.cut"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.he:1"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="increment outside addition/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,a,p_tail1,p_head,p_tail0,x,y,xB,xT,p_head1,p_head0" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_internal" org.eventb.core.label="nAdd_internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd_internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_int_P" org.eventb.core.label="nAdd_int_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd_internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_hasSetBit" org.eventb.core.label="bn_hasSetBit" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=TRUE∨bn_hasSetBit(aT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isNormal" org.eventb.core.label="bn_isNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(as=(nil ⦂ List(BOOL))∧aB=TRUE)∨(as≠(nil ⦂ List(BOOL))∧bn_isNormal(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="bn_countBits(a)=bn_countBits(b)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_decrement" org.eventb.core.label="bn_decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,cons(FALSE,xT),COND(bn_isZero(xT),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(xT))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Add" org.eventb.core.label="bn_Add" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_nat_T" org.eventb.core.label="bn_nat_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL)·(x∈List(BOOL)∧bn_isNormal(x))∨¬x∈List(BOOL)∨¬bn_isNormal(x)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Or" org.eventb.core.label="bn_Or" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And" org.eventb.core.label="bn_And" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And_P" org.eventb.core.label="bn_And_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL)×List(BOOL)×List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL),y⦂List(BOOL)·(x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))))∨¬x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∨¬y∈(bn_nat_T ⦂ ℙ(List(BOOL)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat2" org.eventb.core.label="bn_toNat2" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (∃a·x bn_Add y=a)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="One Point Rule in goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p3">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ hyp (∃a·x bn_Add y=a)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p3" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p4">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prHypAction>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x bn_Add y=a" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p4">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p6">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with x bn_Add y=a" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p7"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x bn_Add y=nil" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p7">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p8"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p8" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p14">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_increment(x))" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p15">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p16">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_increment(x) bn_Add nil,bn_increment(x),bn_One)" org.eventb.core.prHyps="p16">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p17">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (bn_increment(x) bn_Eq bn_One⇔bn_increment(x) bn_Add nil bn_Eq bn_One)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p18">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p18">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="p15" org.eventb.core.prInfHyps="p19"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p19" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p18">
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with bn_increment(x) bn_Eq bn_One⇔bn_increment(x) bn_Add nil bn_Eq bn_One" org.eventb.core.prHyps="p18">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p17" org.eventb.core.prInfHyps="p21"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p21"/>
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv RL with bn_increment(x) bn_Eq bn_One⇔bn_increment(x) bn_Add nil bn_Eq bn_One" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p18">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p23">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="p15,p18" org.eventb.core.prInfHyps="p24"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p18" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p21" org.eventb.core.prHyps="p15" org.eventb.core.prInfHyps="p26"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p25" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p26"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p23">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p31">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p12" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p15" org.eventb.core.prInfHyps="p29"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p30"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p27,p12,p15"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x = x  (auto rewrite)" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="x bn_Eq x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p33,p34">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p17" org.eventb.core.prHyps="p15,p18" org.eventb.core.prInfHyps="p24"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p18" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p21" org.eventb.core.prHyps="p15" org.eventb.core.prInfHyps="p26"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p25" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p26"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p33">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p38">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p12" org.eventb.core.prInfHyps="p35"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p15" org.eventb.core.prInfHyps="p36"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p27" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p27,p12,p15"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(p_head,p_tail))" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p39">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on cons(p_head,p_tail) bn_Add nil=nil" org.eventb.core.prHyps="p35">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p40">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p35"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p40"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p41" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p42"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_isZero(cons(p_head,p_tail)))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p43">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p42" org.eventb.core.prHyps="p43" org.eventb.core.prInfHyps="p44"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p44"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p45">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(p_head,p_tail))" org.eventb.core.prHyps="p45">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p46">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p45"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p38" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p38">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p46" org.eventb.core.prHyps="p43" org.eventb.core.prInfHyps="p19"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p19" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isZero(x)⇒bn_increment(x) bn_Eq bn_One"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p47">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p42" org.eventb.core.prHyps="p47" org.eventb.core.prInfHyps="p48"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p48" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p49"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p50" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p40" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p49"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on COND(p_head=TRUE∧bn_LSB(nil)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(nil))),COND(p_head=FALSE∧bn_LSB(nil)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil))))=nil" org.eventb.core.prHyps="p49">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p51,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p49"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p51"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p51" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p52"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on COND(p_head=FALSE∧bn_LSB(nil)=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil)))=nil" org.eventb.core.prHyps="p52">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p53">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p52"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p53"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p53" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p54"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on COND(p_head=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil)))=nil" org.eventb.core.prHyps="p54">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p55">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p54"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p55"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on COND(p_head=FALSE,cons(FALSE,p_tail bn_Add nil),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil)))=nil" org.eventb.core.prHyps="p55">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p56">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p55"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p56"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p57">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_increment(cons(p_head,p_tail)))" org.eventb.core.prHyps="p57">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p58">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p57"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_increment(cons(p_head,p_tail)) bn_Add nil=bn_increment(cons(p_head,p_tail))" org.eventb.core.prHyps="p58">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p36" org.eventb.core.prInfHyps="p59"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p37" org.eventb.core.prInfHyps="p60"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p37,p36"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x = x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p59"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p38" org.eventb.core.prHyps="p60">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p20">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p58,p39"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p57"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail)" org.eventb.core.prHyps="p57">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p61">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p57"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p45">
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=FALSE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p62">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p56" org.eventb.core.prHyps="p62" org.eventb.core.prInfHyps="p63"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p63" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p64">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p56" org.eventb.core.prHyps="p64" org.eventb.core.prInfHyps="p65"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p64" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p66"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p65" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p62"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isZero(x)⇒bn_increment(x) bn_Eq bn_One"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="x bn_Eq x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Add nil=x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p43"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Add nil bn_Eq x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p18"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e4,e5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y,z·x bn_Eq y⇒(y bn_Eq z⇔x bn_Eq z)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e4"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Add nil bn_Eq x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p67,p68">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head,p_tail)" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p67">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p70">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p7" org.eventb.core.prInfHyps="p69"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p71">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst x,cons(p_head,p_tail))" org.eventb.core.prHyps="p71">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p72">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p71"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p72" org.eventb.core.prHyps="p69" org.eventb.core.prInfHyps="p73"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p73" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e6,e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x=nil∧y=nil⇔x bn_Add y=nil"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p74,p75">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with x bn_Add y=a" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p74" org.eventb.core.prInfHyps="p76"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p74"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p77,p16">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_increment(x) bn_Add y,bn_increment(p_tail),bn_increment(x bn_Add y))" org.eventb.core.prHyps="p16">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p78">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p16"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Remove Increments  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p78" org.eventb.core.prInfHyps="p79"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p78"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (p_tail bn_Eq x bn_Add y⇔bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p80">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p80" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p80">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p79" org.eventb.core.prHyps="p75" org.eventb.core.prInfHyps="p19"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p19" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p80">
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv RL with p_tail bn_Eq x bn_Add y⇔bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p80">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p82">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p79" org.eventb.core.prInfHyps="p81"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p79"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p80,p77,p81"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p82" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p82">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p79" org.eventb.core.prHyps="p80,p75" org.eventb.core.prInfHyps="p24"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p80" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p83"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p81" org.eventb.core.prHyps="p75" org.eventb.core.prInfHyps="p84"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p83" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p85"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p84"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x bn_Add y=cons(p_head,p_tail)" org.eventb.core.prGoal="p82" org.eventb.core.prHyps="p76">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p87">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p86"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p86" org.eventb.core.prHyps="p74" org.eventb.core.prInfHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p87" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p87" org.eventb.core.prHyps="p88">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail=nil" org.eventb.core.prGoal="p87" org.eventb.core.prHyps="p88">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p90">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p75" org.eventb.core.prInfHyps="p9"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p76" org.eventb.core.prInfHyps="p89"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p75,p76"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on bn_increment(x) bn_Add y bn_Eq bn_increment(nil)" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p10,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil Eq =&gt; isZero(x) on goal" org.eventb.core.prGoal="p90" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p91" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (bn_isZero(x)∧bn_isZero(y))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p92">
<org.eventb.core.prRule name="r19" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p92" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p93">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p93" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p93" org.eventb.core.prHyps="p23">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p93" org.eventb.core.prHyps="p23">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p96">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p89" org.eventb.core.prInfHyps="p94"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p95"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p89,p10"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prGoal="p96" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p93" org.eventb.core.prHyps="p97,p98">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p93" org.eventb.core.prHyps="p97">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p101">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p89" org.eventb.core.prInfHyps="p99"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p100"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p89,p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on bn_increment(cons(p_head0,p_tail0)) bn_Add y bn_Eq bn_One" org.eventb.core.prHyps="p100">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p102">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p100"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p102"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p103">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p102" org.eventb.core.prHyps="p103" org.eventb.core.prInfHyps="p104"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p104" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p105"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p101" org.eventb.core.prHyps="p103">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p108">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p97" org.eventb.core.prInfHyps="p106"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p99" org.eventb.core.prInfHyps="p107"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p97,p99"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="isZero(cons(TRUE, x)) is False  (auto rewrite)" org.eventb.core.prGoal="p108" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_One expansion on cons(FALSE,bn_increment(p_tail0)) bn_Add y bn_Eq bn_One" org.eventb.core.prHyps="p105">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p109,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p105"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p109"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on cons(TRUE,p_tail0) bn_Add y=cons(p_head,nil)" org.eventb.core.prHyps="p107">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p110,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p107"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p110"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p111" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p112"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on cons(FALSE,bn_increment(p_tail0)) bn_Add y bn_Eq cons(TRUE,nil)" org.eventb.core.prHyps="p109">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p113,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p109"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p113"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p114" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p115"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (y=nil)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p112" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p116"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p115" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p117"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p116" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p118,p119"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p117" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p120"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p110" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p121"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p113" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p122"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p121" org.eventb.core.prInfHyps="p123"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p122" org.eventb.core.prInfHyps="p124"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p121,p122"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on COND(bn_LSB(nil)=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(nil))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(nil)))=cons(p_head,nil)" org.eventb.core.prHyps="p123">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p125">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p123"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p125"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p125" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p119,p126"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on COND(bn_LSB(nil)=FALSE,cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(nil)),cons(TRUE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(nil))) bn_Eq cons(TRUE,nil)" org.eventb.core.prHyps="p124">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p127">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p124"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p127"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p127" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p128"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(nil)) bn_Eq cons(TRUE,nil)" org.eventb.core.prHyps="p128">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p129">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p128"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p129"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p57">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Strip Cons on cons(FALSE,bn_increment(p_tail0) bn_Add nil) bn_Eq cons(TRUE,nil)" org.eventb.core.prHyps="p129">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p130">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p129"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p130"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p130" org.eventb.core.prInfHyps="p131,p132"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p130"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p131" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Strip Cons"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Add nil=x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p133">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p112" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p134"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p115" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p135"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p134" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p121"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p135" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p122"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_LSB(y)=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p136">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p121" org.eventb.core.prHyps="p136" org.eventb.core.prInfHyps="p137"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p137" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p138,p139"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_LSB(y)=TRUE" org.eventb.core.prHyps="p136">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p122" org.eventb.core.prInfHyps="p140"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p122"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p140" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p141"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p142">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p143">
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="increment not Zero  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p142" org.eventb.core.prInfHyps="p144"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p142"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p144"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_increment(p_tail0 bn_Add bn_shiftLeft1(y)),nil)" org.eventb.core.prHyps="p143">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p145">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p143"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p145" org.eventb.core.prHyps="p138" org.eventb.core.prInfHyps="p146"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p146" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p147"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p110" org.eventb.core.prHyps="p136" org.eventb.core.prInfHyps="p148"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p113" org.eventb.core.prHyps="p136" org.eventb.core.prInfHyps="p149"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p148" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p138,p139"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p149" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p141"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p145" org.eventb.core.prHyps="p138" org.eventb.core.prInfHyps="p146"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p146" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p147"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Strip Cons on cons(TRUE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)) bn_Eq cons(TRUE,nil)" org.eventb.core.prHyps="p141">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p150">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p141"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p150"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p150" org.eventb.core.prInfHyps="p151,p152"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p150"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p151"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Eq nil =&gt; isZero(x) on bn_increment(p_tail0 bn_Add bn_shiftLeft1(y)) bn_Eq nil" org.eventb.core.prHyps="p147">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p153">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p147"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p153"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="increment not Zero  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p153" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p153"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="incrNotZero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Eq nil ⇒ isZero(x)"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Strip Cons"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e7,e8"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="incrNotZero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x=y⇒x bn_Eq y"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·¬bn_isZero(bn_increment(x))"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p154">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p121" org.eventb.core.prHyps="p154" org.eventb.core.prInfHyps="p155"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p154" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p156"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p155" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p157,p119"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p122" org.eventb.core.prHyps="p156" org.eventb.core.prInfHyps="p158"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p158" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p159"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p110" org.eventb.core.prHyps="p154" org.eventb.core.prInfHyps="p160"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p113" org.eventb.core.prHyps="p154" org.eventb.core.prInfHyps="p161"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p160" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p157,p119"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p161" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p159"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Strip Cons on cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)) bn_Eq cons(TRUE,nil)" org.eventb.core.prHyps="p159">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p162,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p159"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p162"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p162" org.eventb.core.prInfHyps="p131,p152"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p162"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p131" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Strip Cons"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p136"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p11"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNatural_T"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNatural_T.bn_One"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE, x) ≠ zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p163">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p102" org.eventb.core.prHyps="p163" org.eventb.core.prInfHyps="p164"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p163" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p165"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p164" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p166"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p101" org.eventb.core.prHyps="p165">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p169">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p97" org.eventb.core.prInfHyps="p167"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p99" org.eventb.core.prInfHyps="p168"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p97,p99"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on cons(FALSE,p_tail0) bn_Add y=cons(p_head,nil)" org.eventb.core.prHyps="p168">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p170,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p168"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p170"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p171" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p172"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on cons(TRUE,p_tail0) bn_Add y bn_Eq bn_One" org.eventb.core.prHyps="p166">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p173,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p166"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p173"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p174" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p175"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (y=nil)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p172" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p176"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p175" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p177"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p176" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p118,p139"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p177" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p178"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p170" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p179"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p173" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p180"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p179" org.eventb.core.prInfHyps="p181"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p180" org.eventb.core.prInfHyps="p182"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p180,p179"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on COND(bn_LSB(nil)=FALSE,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(nil)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(nil)))=cons(p_head,nil)" org.eventb.core.prHyps="p181">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p183,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p181"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p183"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p183" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p139,p126"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p169" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p184" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p184" org.eventb.core.prHyps="p98">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p185">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p185" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p133">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p172" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p186"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p175" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p187"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p186" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p179"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p187" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p180"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_LSB(y)=FALSE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p156">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p179" org.eventb.core.prHyps="p156" org.eventb.core.prInfHyps="p188"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p188" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p157,p139"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p71">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail0,bn_shiftLeft1(y))" org.eventb.core.prHyps="p71">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p189">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p71"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p189" org.eventb.core.prHyps="p157" org.eventb.core.prInfHyps="p190"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p190" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p118,p191"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p170" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p179"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p173" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p180"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p179" org.eventb.core.prHyps="p156" org.eventb.core.prInfHyps="p188"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p188" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p157,p139"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p189" org.eventb.core.prHyps="p157" org.eventb.core.prInfHyps="p190"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p190" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p118,p191"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail0=nil" org.eventb.core.prGoal="p169" org.eventb.core.prHyps="p118">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p195">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p98" org.eventb.core.prInfHyps="p96"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p167" org.eventb.core.prInfHyps="p192"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p180" org.eventb.core.prInfHyps="p193"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p157" org.eventb.core.prInfHyps="p194"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p180,p98,p167,p157"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p96"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p195" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p196" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prGoal="p196" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p185" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p185" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e9,e10"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x=nil∧y=nil⇔x bn_Add y=nil"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p197">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p179" org.eventb.core.prHyps="p197" org.eventb.core.prInfHyps="p198"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p197" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p136"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p198" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p157,p119"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p180" org.eventb.core.prHyps="p136" org.eventb.core.prInfHyps="p199"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p199" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p200"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p71">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail0,bn_shiftLeft1(y))" org.eventb.core.prHyps="p71">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p189">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p71"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p189" org.eventb.core.prHyps="p157" org.eventb.core.prInfHyps="p190"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p190" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p118,p191"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p170" org.eventb.core.prHyps="p136" org.eventb.core.prInfHyps="p201"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p173" org.eventb.core.prHyps="p136" org.eventb.core.prInfHyps="p202"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p201" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p157,p119"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p202" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p200"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p189" org.eventb.core.prHyps="p157" org.eventb.core.prInfHyps="p190"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p190" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p118,p191"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail0=nil" org.eventb.core.prGoal="p169" org.eventb.core.prHyps="p118">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p195">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p98" org.eventb.core.prInfHyps="p96"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p167" org.eventb.core.prInfHyps="p192"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p157" org.eventb.core.prInfHyps="p194"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p200" org.eventb.core.prInfHyps="p203"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p98,p167,p200,p157"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p96"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p195" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p196" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prGoal="p196" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p185" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p185" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e9,e10"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x=nil∧y=nil⇔x bn_Add y=nil"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p156"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p11"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p103"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p204">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p204" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p204" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p204" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p96">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p89" org.eventb.core.prInfHyps="p205"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p13"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p89,p10"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prGoal="p96" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p204" org.eventb.core.prHyps="p206,p98">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p204" org.eventb.core.prHyps="p206">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p101">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p89" org.eventb.core.prInfHyps="p207"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p208"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p89,p10"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p209">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p209" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p210"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst x,p_head0,p_tail0)" org.eventb.core.prHyps="p210">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p211">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p210"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x bn_Add cons(p_head0,p_tail0)=COND(p_head0=TRUE∧bn_LSB(x)=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(x) bn_Add p_tail0)),COND(p_head0=FALSE∧bn_LSB(x)=FALSE,cons(FALSE,bn_shiftLeft1(x) bn_Add p_tail0),cons(TRUE,bn_shiftLeft1(x) bn_Add p_tail0)))" org.eventb.core.prHyps="p211">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p207" org.eventb.core.prInfHyps="p212"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p207"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE∧bn_LSB(x)=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p213">
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p213" org.eventb.core.prInfHyps="p103,p214"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p213"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p211" org.eventb.core.prHyps="p213" org.eventb.core.prInfHyps="p215"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p212" org.eventb.core.prHyps="p213" org.eventb.core.prInfHyps="p216"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p215" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p217"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p216" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p139,p218"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p101" org.eventb.core.prHyps="p103">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p108">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p206" org.eventb.core.prInfHyps="p219"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p208" org.eventb.core.prInfHyps="p220"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p217" org.eventb.core.prInfHyps="p221"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p208,p217,p206"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="isZero(cons(TRUE, x)) is False  (auto rewrite)" org.eventb.core.prGoal="p108" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p143">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_increment(bn_shiftLeft1(x) bn_Add p_tail0),nil)" org.eventb.core.prHyps="p143">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p222">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p143"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p222" org.eventb.core.prHyps="p218" org.eventb.core.prInfHyps="p223"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p223" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p224"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Eq nil =&gt; isZero(x) on bn_increment(bn_shiftLeft1(x) bn_Add p_tail0) bn_Eq nil" org.eventb.core.prHyps="p224">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p225">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p224"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p225"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="increment not Zero  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p225" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p225"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="incrNotZero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Eq nil ⇒ isZero(x)"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e11,e8"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x=y⇒x bn_Eq y"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE, x) ≠ zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p226">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p211" org.eventb.core.prHyps="p226" org.eventb.core.prInfHyps="p227"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p212" org.eventb.core.prHyps="p226" org.eventb.core.prInfHyps="p228"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p227" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p229"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p228" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p230"/>
<org.eventb.core.prRule name="r20" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in ¬(p_head0=TRUE∧bn_LSB(x)=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p226" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p231"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p231"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p231" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p232"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=FALSE∧bn_LSB(x)=FALSE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p233">
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p233" org.eventb.core.prInfHyps="p165,p234"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p233"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p229" org.eventb.core.prHyps="p233" org.eventb.core.prInfHyps="p235"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p230" org.eventb.core.prHyps="p233" org.eventb.core.prInfHyps="p236"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p232" org.eventb.core.prHyps="p165,p234" org.eventb.core.prInfHyps="p237"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p235" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p238"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p236" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p139,p239"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p237"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p101" org.eventb.core.prHyps="p165">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p169">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p206" org.eventb.core.prInfHyps="p240"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p208" org.eventb.core.prInfHyps="p241"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p238" org.eventb.core.prInfHyps="p242"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p208,p206,p238"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p71">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_shiftLeft1(x),p_tail0)" org.eventb.core.prHyps="p71">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p243">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p71"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p243" org.eventb.core.prHyps="p239" org.eventb.core.prInfHyps="p244"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p244" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p118,p245"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail0=nil" org.eventb.core.prGoal="p169" org.eventb.core.prHyps="p118">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p195">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p98" org.eventb.core.prInfHyps="p96"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p239" org.eventb.core.prInfHyps="p246"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p240" org.eventb.core.prInfHyps="p247"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p241" org.eventb.core.prInfHyps="p248"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p242" org.eventb.core.prInfHyps="p249"/>
<org.eventb.core.prHypAction name="DESELECT5" org.eventb.core.prHyps="p240,p242,p98,p239,p241"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p96"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p195" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p196" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prGoal="p196" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p185" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p185" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e12,e9"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x=nil∧y=nil⇔x bn_Add y=nil"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p250">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p229" org.eventb.core.prHyps="p250" org.eventb.core.prInfHyps="p251"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p230" org.eventb.core.prHyps="p250" org.eventb.core.prInfHyps="p252"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p251" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p253"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p252" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p239,p119"/>
<org.eventb.core.prRule name="r20" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in ¬(p_head0=FALSE∧bn_LSB(x)=FALSE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p250" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p254"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p254"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p254" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p255"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p71">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_shiftLeft1(x),p_tail0)" org.eventb.core.prHyps="p71">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p243">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p71"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p243" org.eventb.core.prHyps="p239" org.eventb.core.prInfHyps="p244"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p244" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p118,p245"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail0=nil" org.eventb.core.prGoal="p101" org.eventb.core.prHyps="p118">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p259">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p206" org.eventb.core.prInfHyps="p256"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p98" org.eventb.core.prInfHyps="p96"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p208" org.eventb.core.prInfHyps="p257"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p253" org.eventb.core.prInfHyps="p258"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p239" org.eventb.core.prInfHyps="p246"/>
<org.eventb.core.prHypAction name="DESELECT5" org.eventb.core.prHyps="p98,p208,p239,p206,p253"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p96"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p210"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_increment(x),p_head0,nil)" org.eventb.core.prHyps="p210">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p260">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p210"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="incrementFlipsLSB  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p260" org.eventb.core.prInfHyps="p261"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p260"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_increment(x) bn_Add cons(p_head0,nil)=COND(p_head0=TRUE∧NOT(bn_LSB(x))=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(bn_increment(x)) bn_Add nil)),COND(p_head0=FALSE∧NOT(bn_LSB(x))=FALSE,cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add nil),cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add nil)))" org.eventb.core.prHyps="p261">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p257" org.eventb.core.prInfHyps="p262"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p257"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE∧NOT(bn_LSB(x))=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p263">
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p263" org.eventb.core.prInfHyps="p103,p264"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p263"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p255" org.eventb.core.prHyps="p103" org.eventb.core.prInfHyps="p265"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p261" org.eventb.core.prHyps="p263" org.eventb.core.prInfHyps="p266"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p262" org.eventb.core.prHyps="p263" org.eventb.core.prInfHyps="p267"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p265"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p266" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p268"/>
<org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p267" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p269"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p259" org.eventb.core.prHyps="p103">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p274">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p232" org.eventb.core.prInfHyps="p270"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p256" org.eventb.core.prInfHyps="p271"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p258" org.eventb.core.prInfHyps="p272"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p268" org.eventb.core.prInfHyps="p273"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p258,p232,p268,p256"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="isZero(cons(TRUE, x)) is False  (auto rewrite)" org.eventb.core.prGoal="p274" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p270" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p234"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p232" org.eventb.core.prHyps="p234" org.eventb.core.prInfHyps="p275"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p275"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_One expansion on cons(FALSE,bn_increment(bn_shiftLeft1(bn_increment(x)) bn_Add nil)) bn_Eq bn_One" org.eventb.core.prHyps="p269">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p276">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p269"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p276"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Strip Cons on cons(FALSE,bn_increment(bn_shiftLeft1(bn_increment(x)) bn_Add nil)) bn_Eq cons(TRUE,nil)" org.eventb.core.prHyps="p276">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p277,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p276"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p277"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p277" org.eventb.core.prInfHyps="p131,p278"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p277"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p131" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Strip Cons"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNatural_T"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNatural_T.bn_One"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE, x) ≠ zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p279">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p261" org.eventb.core.prHyps="p279" org.eventb.core.prInfHyps="p280"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p262" org.eventb.core.prHyps="p279" org.eventb.core.prInfHyps="p281"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p280" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p282"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p281" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p283"/>
<org.eventb.core.prRule name="r20" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in ¬(p_head0=TRUE∧NOT(bn_LSB(x))=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p279" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p284"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p284"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p284" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p285"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=FALSE∧NOT(bn_LSB(x))=FALSE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p286">
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p286" org.eventb.core.prInfHyps="p165,p287"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p286"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p232" org.eventb.core.prHyps="p165" org.eventb.core.prInfHyps="p288"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p282" org.eventb.core.prHyps="p286" org.eventb.core.prInfHyps="p289"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p283" org.eventb.core.prHyps="p286" org.eventb.core.prInfHyps="p290"/>
<org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p285" org.eventb.core.prHyps="p165,p287" org.eventb.core.prInfHyps="p237"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p288"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p289" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p291"/>
<org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p290" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p292"/>
<org.eventb.core.prHypAction name="HIDE4" org.eventb.core.prHyps="p237"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p259" org.eventb.core.prHyps="p165">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p195">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p255" org.eventb.core.prInfHyps="p293"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p256" org.eventb.core.prInfHyps="p247"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p258" org.eventb.core.prInfHyps="p294"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p291" org.eventb.core.prInfHyps="p295"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p258,p255,p291,p256"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p293" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p214"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p255" org.eventb.core.prHyps="p214" org.eventb.core.prInfHyps="p296"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p296"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_One expansion on cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add nil) bn_Eq bn_One" org.eventb.core.prHyps="p292">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p297">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p292"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p297"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Strip Cons on cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add nil) bn_Eq cons(TRUE,nil)" org.eventb.core.prHyps="p297">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p298,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p297"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p298"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p298" org.eventb.core.prInfHyps="p131,p299"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p298"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p131" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Strip Cons"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNatural_T"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNatural_T.bn_One"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p300">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p282" org.eventb.core.prHyps="p300" org.eventb.core.prInfHyps="p301"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p283" org.eventb.core.prHyps="p300" org.eventb.core.prInfHyps="p302"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p301" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p303"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p302" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p304"/>
<org.eventb.core.prRule name="r20" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in ¬(p_head0=FALSE∧NOT(bn_LSB(x))=FALSE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p300" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p305"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p305"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p305" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p306"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_One expansion on cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add nil) bn_Eq bn_One" org.eventb.core.prHyps="p304">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p307,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p304"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p307"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Strip Cons on cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add nil) bn_Eq cons(TRUE,nil)" org.eventb.core.prHyps="p307">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p308,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p307"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p308"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p308" org.eventb.core.prInfHyps="p151,p299"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p308"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p151"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p103">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p255" org.eventb.core.prHyps="p103" org.eventb.core.prInfHyps="p265"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p306" org.eventb.core.prHyps="p103" org.eventb.core.prInfHyps="p309"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p265"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p309"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p259" org.eventb.core.prHyps="p103">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p274">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p232" org.eventb.core.prInfHyps="p270"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p256" org.eventb.core.prInfHyps="p271"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p258" org.eventb.core.prInfHyps="p272"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p285" org.eventb.core.prInfHyps="p310"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p303" org.eventb.core.prInfHyps="p311"/>
<org.eventb.core.prHypAction name="DESELECT5" org.eventb.core.prHyps="p258,p285,p232,p303,p256"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="isZero(cons(TRUE, x)) is False  (auto rewrite)" org.eventb.core.prGoal="p274" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p270" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p234"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p310" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p287"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p232" org.eventb.core.prHyps="p234" org.eventb.core.prInfHyps="p275"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p285" org.eventb.core.prHyps="p287" org.eventb.core.prInfHyps="p275"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p275"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_LSB(x)=FALSE" org.eventb.core.prHyps="p234">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p287" org.eventb.core.prInfHyps="p312"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p287"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="NOT(FALSE)  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p312" org.eventb.core.prInfHyps="p313"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p312"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p313" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NOT(FALSE)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE, x) ≠ zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p163">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p255" org.eventb.core.prHyps="p163" org.eventb.core.prInfHyps="p314"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p306" org.eventb.core.prHyps="p163" org.eventb.core.prInfHyps="p315"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p163" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p165"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p314" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p214"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p315" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p264"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p232" org.eventb.core.prHyps="p165" org.eventb.core.prInfHyps="p288"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p285" org.eventb.core.prHyps="p165" org.eventb.core.prInfHyps="p316"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p288"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p316"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p259" org.eventb.core.prHyps="p165">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p195">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p256" org.eventb.core.prInfHyps="p247"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p258" org.eventb.core.prInfHyps="p294"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p303" org.eventb.core.prInfHyps="p317"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p258,p303,p256"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p195" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p196" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prGoal="p196" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p185" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p185" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p103"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Strip Cons"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNatural_T"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNatural_T.bn_One"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p286"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p263"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="incrFlipsLSB"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e4,e13,e8"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e12,e9"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x=nil∧y=nil⇔x bn_Add y=nil"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p233"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p213"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e6,e13,e9"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,yB,yT·x bn_Add cons(yB,yT)=COND(yB=TRUE∧bn_LSB(x)=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(x) bn_Add yT)),COND(¬yB=TRUE∧¬bn_LSB(x)=TRUE,cons(FALSE,bn_shiftLeft1(x) bn_Add yT),cons(TRUE,bn_shiftLeft1(x) bn_Add yT)))"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p92">
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p92" org.eventb.core.prInfHyps="p93,p204"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p92"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (x=nil)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p23">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prHyps="p23">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p89" org.eventb.core.prInfHyps="p94"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p95"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p93" org.eventb.core.prInfHyps="p96"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p89,p10,p93"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p96"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on nil bn_Add y=cons(p_head,nil)" org.eventb.core.prHyps="p94">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p318,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p94"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p318"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head,nil)" org.eventb.core.prHyps="p318">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p204" org.eventb.core.prInfHyps="p91"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p95" org.eventb.core.prInfHyps="p319"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p204,p95"/>
<org.eventb.core.prRule name="r21" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p91" org.eventb.core.prHyps="p91"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p320">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (∃xB,xT·x=cons(xB,xT))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p321">
<org.eventb.core.prRule name="r22" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in goal" org.eventb.core.prGoal="p321" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p321" org.eventb.core.prHyps="p23">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p23" org.eventb.core.prHyps="p320" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p321" org.eventb.core.prHyps="p97">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p321" org.eventb.core.prHyps="p97">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p323">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p89" org.eventb.core.prInfHyps="p99"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p100"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p93" org.eventb.core.prInfHyps="p101"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p320" org.eventb.core.prInfHyps="p322"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p93,p89,p10,p320"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p323" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p324">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p322"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ goal (inst p_head0,p_tail0)" org.eventb.core.prGoal="p324" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p325">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p325" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e13,e9"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p321">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ hyp (∃xB,xT·x=cons(xB,xT))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p321" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p326">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prHypAction>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p326"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(xB,xT)" org.eventb.core.prHyps="p326">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p89" org.eventb.core.prInfHyps="p327"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p328"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p93" org.eventb.core.prInfHyps="p329"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p320" org.eventb.core.prInfHyps="p330"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p93,p89,p10,p320"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p330"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on bn_isZero(cons(xB,xT))" org.eventb.core.prHyps="p329">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p331">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p329"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p331"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p331" org.eventb.core.prInfHyps="p332,p333"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p331"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with xB=FALSE" org.eventb.core.prHyps="p332">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p326" org.eventb.core.prInfHyps="p334"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p327" org.eventb.core.prInfHyps="p335"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p328" org.eventb.core.prInfHyps="p336"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p326,p327,p328"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on cons(FALSE,xT) bn_Add y=cons(p_head,nil)" org.eventb.core.prHyps="p335">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p337,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p335"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p337"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p338" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p339"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (y=nil)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p339" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p340"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p340" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p139,p341"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p204" org.eventb.core.prInfHyps="p96"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p336" org.eventb.core.prInfHyps="p342"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p336,p204"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p96"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p337" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p343"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p343" org.eventb.core.prInfHyps="p344"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p343"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on COND(bn_LSB(nil)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(nil)),cons(TRUE,xT bn_Add bn_shiftLeft1(nil)))=cons(p_head,nil)" org.eventb.core.prHyps="p344">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p345">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p344"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p345"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on COND(bn_LSB(nil)=FALSE,cons(FALSE,xT bn_Add nil),cons(TRUE,xT bn_Add bn_shiftLeft1(nil)))=cons(p_head,nil)" org.eventb.core.prHyps="p345">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p346,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p345"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p346"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p346" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p139,p347"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with FALSE=p_head" org.eventb.core.prGoal="p91" org.eventb.core.prHyps="p139">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p195">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p195" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p196" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prGoal="p196" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p185" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p185" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p133">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p339" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p348"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p348" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p343"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p349">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst y)" org.eventb.core.prHyps="p349">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p350">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p349"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p350" org.eventb.core.prHyps="p204" org.eventb.core.prInfHyps="p351"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p351" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p156"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p343" org.eventb.core.prHyps="p156" org.eventb.core.prInfHyps="p352"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p352" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p353,p139"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p337" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p343"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p343" org.eventb.core.prHyps="p156" org.eventb.core.prInfHyps="p352"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p352" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p353,p139"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with FALSE=p_head" org.eventb.core.prGoal="p91" org.eventb.core.prHyps="p139">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p195">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p195" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p196" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prGoal="p196" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p185" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p185" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e14"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isZero(x)⇒bn_LSB(x)=FALSE"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p11"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p321"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p23"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p92"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil Eq ⇒ isZero(x)"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p87" org.eventb.core.prHyps="p354,p355">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p87" org.eventb.core.prHyps="p354">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p358">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p75" org.eventb.core.prInfHyps="p356"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p76" org.eventb.core.prInfHyps="p357"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p75,p76"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Strip Cons on goal" org.eventb.core.prGoal="p358" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p359" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r19" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∧ goal" org.eventb.core.prGoal="p359" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p360">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p361">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Commutitive Sqap on p_tail0 bn_Eq cons(p_head,p_tail0)" org.eventb.core.prHyps="p355">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p362,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p355"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p362"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail0,p_head)" org.eventb.core.prHyps="p361">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p363">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p361"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p363" org.eventb.core.prHyps="p362" org.eventb.core.prInfHyps="p364"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p364" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p62,p98"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p360" org.eventb.core.prHyps="p62">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p165">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p357" org.eventb.core.prInfHyps="p365"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p362" org.eventb.core.prInfHyps="p366"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p357,p362"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (x=nil)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p23">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prHyps="p23">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p356" org.eventb.core.prInfHyps="p367"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p365" org.eventb.core.prInfHyps="p368"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p365,p356"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on nil bn_Add y=cons(FALSE,cons(p_head0,p_tail0))" org.eventb.core.prHyps="p368">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p369">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p368"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p369"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(FALSE,cons(p_head0,p_tail0))" org.eventb.core.prHyps="p369">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p367" org.eventb.core.prInfHyps="p370"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p367"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on bn_increment(nil) bn_Add cons(FALSE,cons(p_head0,p_tail0)) bn_Eq bn_increment(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p370">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p371,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p370"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p371"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_One expansion on bn_One bn_Add cons(FALSE,cons(p_head0,p_tail0)) bn_Eq bn_increment(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p371">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p372,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p371"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p372"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on cons(TRUE,nil) bn_Add cons(FALSE,cons(p_head0,p_tail0)) bn_Eq bn_increment(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p372">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p373,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p372"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p373"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p374" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p375"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p373" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p375"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on COND(bn_LSB(cons(FALSE,cons(p_head0,p_tail0)))=TRUE,cons(FALSE,bn_increment(nil bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0))))),cons(TRUE,nil bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0))))) bn_Eq bn_increment(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p375">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p376,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p375"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p376"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p376" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p377"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on cons(TRUE,nil bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0)))) bn_Eq bn_increment(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p377">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p378">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p377"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p378"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p103">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p378" org.eventb.core.prHyps="p103" org.eventb.core.prInfHyps="p379"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p379" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p380"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="cons(TRUE ≠ cons(FALSE  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p380" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p380"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE ≠ cons(FALSE"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p163">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p378" org.eventb.core.prHyps="p163" org.eventb.core.prInfHyps="p381"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p163" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p165"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p381" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p382"/>
<org.eventb.core.prRule name="r21" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p165" org.eventb.core.prHyps="p165"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p103"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNatural_T"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNatural_T.bn_One"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p320">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (∃xB,xT·x=cons(xB,xT))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p321">
<org.eventb.core.prRule name="r22" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in goal" org.eventb.core.prGoal="p321" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p321" org.eventb.core.prHyps="p23">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p23" org.eventb.core.prHyps="p320" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p321" org.eventb.core.prHyps="p383">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head1,p_tail1)" org.eventb.core.prGoal="p321" org.eventb.core.prHyps="p383">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p387">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p356" org.eventb.core.prInfHyps="p384"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p365" org.eventb.core.prInfHyps="p385"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p320" org.eventb.core.prInfHyps="p386"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p365,p320,p356"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p387" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p388">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p386"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ goal (inst p_head1,p_tail1)" org.eventb.core.prGoal="p388" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p389">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p389" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e15,e16"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p321">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ hyp (∃xB,xT·x=cons(xB,xT))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p321" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p326">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prHypAction>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p326"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(xB,xT)" org.eventb.core.prHyps="p326">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p356" org.eventb.core.prInfHyps="p390"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p365" org.eventb.core.prInfHyps="p391"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p320" org.eventb.core.prInfHyps="p330"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p365,p320,p356"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p330"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on cons(xB,xT) bn_Add y=cons(FALSE,cons(p_head0,p_tail0))" org.eventb.core.prHyps="p391">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p392">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p391"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p392"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p393" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p394"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on bn_increment(cons(xB,xT)) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p390">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p395,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p390"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p395"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (xB=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p396">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p394" org.eventb.core.prHyps="p396" org.eventb.core.prInfHyps="p397"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p395" org.eventb.core.prHyps="p396" org.eventb.core.prInfHyps="p398"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p397" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p399"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p398" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p400"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with xB=TRUE" org.eventb.core.prHyps="p396">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p326" org.eventb.core.prInfHyps="p401"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p399" org.eventb.core.prInfHyps="p402"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p399,p326"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p402" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p403"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on cons(FALSE,bn_increment(xT)) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p400">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p404">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p400"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p404"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p103">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p404" org.eventb.core.prHyps="p103" org.eventb.core.prInfHyps="p405"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p405" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p406"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p165" org.eventb.core.prHyps="p103">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p313">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p354" org.eventb.core.prInfHyps="p407"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p403" org.eventb.core.prInfHyps="p408"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p354,p403"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p313" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p20">
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (y=nil)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p399" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p409"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p403" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p410"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p408" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p411"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p409" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p332,p412"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p410" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p411" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p392" org.eventb.core.prHyps="p396" org.eventb.core.prInfHyps="p413"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p413" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p414"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prHyps="p103">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p414" org.eventb.core.prInfHyps="p415"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p414"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p406" org.eventb.core.prInfHyps="p416"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p415" org.eventb.core.prInfHyps="p417"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p415,p406"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on COND(bn_LSB(nil)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(nil))),cons(TRUE,xT bn_Add bn_shiftLeft1(nil)))=cons(FALSE,cons(TRUE,p_tail0))" org.eventb.core.prHyps="p417">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p418,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p417"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p418"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p418" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p133">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p399" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p419"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p403" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p420"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p408" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p421"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p419" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p422"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p420" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p414"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p421" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p415"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with xB=TRUE" org.eventb.core.prHyps="p396">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p422" org.eventb.core.prInfHyps="p423"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p422"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p423" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p414"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_LSB(y)=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p136">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p422" org.eventb.core.prHyps="p136" org.eventb.core.prInfHyps="p424"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p414" org.eventb.core.prHyps="p136" org.eventb.core.prInfHyps="p425"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p415" org.eventb.core.prHyps="p136" org.eventb.core.prInfHyps="p426"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p424" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p427"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p425" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p427"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p426" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p428"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on cons(FALSE,bn_increment(xT)) bn_Add y bn_Eq cons(FALSE,bn_increment(p_tail0))" org.eventb.core.prHyps="p406">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p429,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p406"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p429"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p430" org.eventb.core.prHyps="p133,p136" org.eventb.core.prInfHyps="p431"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p431" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p432"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="cons(TRUE ≠ cons(FALSE  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p432" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p432"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p392" org.eventb.core.prHyps="p396,p136" org.eventb.core.prInfHyps="p433"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p429" org.eventb.core.prHyps="p136" org.eventb.core.prInfHyps="p434"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p433" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p427"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p434" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p432"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="cons(TRUE ≠ cons(FALSE  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p432" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p432"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE ≠ cons(FALSE"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE ≠ cons(FALSE"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p154">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p422" org.eventb.core.prHyps="p154" org.eventb.core.prInfHyps="p435"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p414" org.eventb.core.prHyps="p154" org.eventb.core.prInfHyps="p436"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p415" org.eventb.core.prHyps="p154" org.eventb.core.prInfHyps="p437"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p154" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p156"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p435" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p438"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p436" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="REWRITE3" org.eventb.core.prHidden="p437" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p392" org.eventb.core.prHyps="p154,p396" org.eventb.core.prInfHyps="p439"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p439" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p136"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p11"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p163">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p404" org.eventb.core.prHyps="p163" org.eventb.core.prInfHyps="p440"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p163" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p165"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p440" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p441"/>
<org.eventb.core.prRule name="r21" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p165" org.eventb.core.prHyps="p165"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p103"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p442">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p394" org.eventb.core.prHyps="p442" org.eventb.core.prInfHyps="p443"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p395" org.eventb.core.prHyps="p442" org.eventb.core.prInfHyps="p444"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p442" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p332"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p443" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p445"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p444" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p446"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p445" org.eventb.core.prHyps="p332" org.eventb.core.prInfHyps="p447"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p447" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p448"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with xB=FALSE" org.eventb.core.prHyps="p332">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p326" org.eventb.core.prInfHyps="p334"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p448" org.eventb.core.prInfHyps="p449"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p326,p448"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (y=nil)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p448" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p450"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p449" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p451"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p450" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p332,p412"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p451" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p412"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p446" org.eventb.core.prInfHyps="p452"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p446"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p392" org.eventb.core.prHyps="p442" org.eventb.core.prInfHyps="p453"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p453" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p454"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p454" org.eventb.core.prInfHyps="p455"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p454"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on COND(bn_LSB(nil)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(nil)),cons(TRUE,xT bn_Add bn_shiftLeft1(nil)))=cons(FALSE,cons(p_head0,p_tail0))" org.eventb.core.prHyps="p455">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p456,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p455"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p456"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p456" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p457"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p57">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(TRUE,xT))" org.eventb.core.prHyps="p57">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p458">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p57"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with cons(TRUE,xT) bn_Add nil=cons(TRUE,xT)" org.eventb.core.prHyps="p458">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p452" org.eventb.core.prInfHyps="p459"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p452"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p103">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p165" org.eventb.core.prHyps="p103">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p313">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p354" org.eventb.core.prInfHyps="p407"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p457" org.eventb.core.prInfHyps="p460"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p459" org.eventb.core.prInfHyps="p461"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p354,p459,p457"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p313" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p20">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on cons(TRUE,xT) bn_Eq bn_increment(cons(TRUE,p_tail0))" org.eventb.core.prHyps="p461">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p462">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p461"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p462"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p462" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p463"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="cons(TRUE ≠ cons(FALSE  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p463" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p463"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE ≠ cons(FALSE"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p163">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p163" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p165"/>
<org.eventb.core.prRule name="r21" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p165" org.eventb.core.prHyps="p165"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p103"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e17"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Add nil=x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p133">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p448" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p464"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p449" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p465"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p464" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p454"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p465" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p454"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_LSB(y)=FALSE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p156">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p454" org.eventb.core.prHyps="p156" org.eventb.core.prInfHyps="p466"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p466" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p467"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on cons(TRUE,xT) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p446">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p468">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p446"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p468"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p469" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p470"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p470" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p471"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_LSB(y)=FALSE" org.eventb.core.prHyps="p156">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p471" org.eventb.core.prInfHyps="p472"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p471"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p472" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p473"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p392" org.eventb.core.prHyps="p442" org.eventb.core.prInfHyps="p453"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p468" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p471"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p453" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p454"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p454" org.eventb.core.prHyps="p156" org.eventb.core.prInfHyps="p466"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p466" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p467"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_LSB(y)=FALSE" org.eventb.core.prHyps="p156">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p471" org.eventb.core.prInfHyps="p472"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p471"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p472" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p473"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p103">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p165" org.eventb.core.prHyps="p103">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p313">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p354" org.eventb.core.prInfHyps="p407"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p467" org.eventb.core.prInfHyps="p474"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p473" org.eventb.core.prInfHyps="p475"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p354,p473,p467"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p313" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p20">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on cons(TRUE,xT bn_Add bn_shiftLeft1(y)) bn_Eq bn_increment(cons(TRUE,p_tail0))" org.eventb.core.prHyps="p475">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p476,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p475"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p476"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p476" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p477"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="cons(TRUE ≠ cons(FALSE  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p477" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p477"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE ≠ cons(FALSE"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p163">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p163" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p165"/>
<org.eventb.core.prRule name="r21" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p165" org.eventb.core.prHyps="p165"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p103"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p197">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p454" org.eventb.core.prHyps="p197" org.eventb.core.prInfHyps="p478"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p197" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p136"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p478" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p392" org.eventb.core.prHyps="p442,p136" org.eventb.core.prInfHyps="p479"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p479" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p156"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p11"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p396"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p321"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p23"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e9,e18"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Commutivity"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,xB·cons(xB,x) bn_Eq x⇒xB=FALSE∧bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p480">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p361">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail0,p_head)" org.eventb.core.prHyps="p361">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p363">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p361"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Commutitive Sqap on p_tail0 bn_Eq cons(p_head,p_tail0)" org.eventb.core.prHyps="p355">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p362,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p355"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p362"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p363" org.eventb.core.prHyps="p362" org.eventb.core.prInfHyps="p364"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p364" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p62,p98"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prHyps="p62">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p357" org.eventb.core.prInfHyps="p365"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p362" org.eventb.core.prInfHyps="p366"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p357,p362"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (x=nil)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p23">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prHyps="p23">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p356" org.eventb.core.prInfHyps="p367"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p365" org.eventb.core.prInfHyps="p368"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p365,p356"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on bn_increment(nil) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p367">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p481,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p367"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p481"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on nil bn_Add y=cons(FALSE,cons(p_head0,p_tail0))" org.eventb.core.prHyps="p368">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p369">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p368"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p369"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(FALSE,cons(p_head0,p_tail0))" org.eventb.core.prHyps="p369">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p481" org.eventb.core.prInfHyps="p371"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p481"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_One expansion on bn_One bn_Add cons(FALSE,cons(p_head0,p_tail0)) bn_Eq bn_increment(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p371">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p372,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p371"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p372"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on cons(TRUE,nil) bn_Add cons(FALSE,cons(p_head0,p_tail0)) bn_Eq bn_increment(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p372">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p373,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p372"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p373"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p374" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p375"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p373" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p375"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p361">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p482">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail0,cons(p_head0,p_tail0))" org.eventb.core.prHyps="p482">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p483">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p482"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p480" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p480">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p483" org.eventb.core.prHyps="p98" org.eventb.core.prInfHyps="p484"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p484" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p485"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on COND(bn_LSB(cons(FALSE,cons(p_head0,p_tail0)))=TRUE,cons(FALSE,bn_increment(nil bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0))))),cons(TRUE,nil bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0))))) bn_Eq bn_increment(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p375">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p376,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p375"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p376"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p376" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p377"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p103">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p480" org.eventb.core.prHyps="p103">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p489">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p354" org.eventb.core.prInfHyps="p407"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p369" org.eventb.core.prInfHyps="p486"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p485" org.eventb.core.prInfHyps="p487"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p377" org.eventb.core.prInfHyps="p488"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p354,p369,p485,p377"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="isZero(cons(TRUE, x)) is False  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p487" org.eventb.core.prInfHyps="p490"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p487"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p490"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on cons(TRUE,nil bn_Add bn_shiftLeft1(cons(FALSE,cons(TRUE,p_tail0)))) bn_Eq bn_increment(cons(TRUE,p_tail0))" org.eventb.core.prHyps="p488">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p491,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p488"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p491"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p491" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p492"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="cons(TRUE ≠ cons(FALSE  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p492" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p492"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE ≠ cons(FALSE"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE, x) ≠ zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p163">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p163" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p165"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p480" org.eventb.core.prHyps="p165">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p497">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p354" org.eventb.core.prInfHyps="p493"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p369" org.eventb.core.prInfHyps="p494"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p485" org.eventb.core.prInfHyps="p495"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p377" org.eventb.core.prInfHyps="p496"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p354,p369,p485,p377"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on ¬bn_isZero(cons(FALSE,p_tail0))" org.eventb.core.prHyps="p495">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p498">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p495"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p498"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p498" org.eventb.core.prHyps="p98" org.eventb.core.prInfHyps="p499"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p499" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p103"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e9,e19"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·bn_isZero(x)∧bn_isZero(y)⇒x bn_Eq y"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,xB·cons(xB,x) bn_Eq x⇒xB=FALSE∧bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNatural_T"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNatural_T.bn_One"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p320">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (∃xB,xT·cons(xB,xT)=x)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p500">
<org.eventb.core.prRule name="r22" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in goal" org.eventb.core.prGoal="p500" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p500" org.eventb.core.prHyps="p23">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p23" org.eventb.core.prHyps="p320" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p500" org.eventb.core.prHyps="p383">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head1,p_tail1)" org.eventb.core.prGoal="p500" org.eventb.core.prHyps="p383">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p501">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p356" org.eventb.core.prInfHyps="p384"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p365" org.eventb.core.prInfHyps="p385"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p320" org.eventb.core.prInfHyps="p386"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p365,p320,p356"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p501" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p502">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p386"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ goal (inst p_head1,p_tail1)" org.eventb.core.prGoal="p502" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p389">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p389" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e15,e16"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="2.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p500">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ hyp (∃xB,xT·cons(xB,xT)=x)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p500" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p503">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prHypAction>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p503"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with cons(xB,xT)=x" org.eventb.core.prHyps="p503">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p356" org.eventb.core.prInfHyps="p390"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p365" org.eventb.core.prInfHyps="p391"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p320" org.eventb.core.prInfHyps="p330"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p365,p320,p356"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p330"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on cons(xB,xT) bn_Add y=cons(FALSE,cons(p_head0,p_tail0))" org.eventb.core.prHyps="p391">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p392">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p391"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p392"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p393" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p394"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on bn_increment(cons(xB,xT)) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p390">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p395,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p390"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p395"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (xB=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p396">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p394" org.eventb.core.prHyps="p396" org.eventb.core.prInfHyps="p397"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p395" org.eventb.core.prHyps="p396" org.eventb.core.prInfHyps="p398"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p397" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p399"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p398" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p400"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with xB=TRUE" org.eventb.core.prHyps="p396">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p503" org.eventb.core.prInfHyps="p504"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p399" org.eventb.core.prInfHyps="p402"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p399,p503"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p402" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p403"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on cons(FALSE,bn_increment(xT)) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p400">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p505,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p400"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p505"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p506" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p507"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (y=nil)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p399" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p409"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p403" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p410"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p507" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p508"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p409" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p332,p412"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p410" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p508" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p509"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p392" org.eventb.core.prHyps="p396" org.eventb.core.prInfHyps="p413"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p505" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p510"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p413" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p414"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p510" org.eventb.core.prInfHyps="p511"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p414" org.eventb.core.prInfHyps="p512"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p414,p510"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on COND(bn_LSB(nil)=FALSE,cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(nil)),cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(nil))) bn_Eq bn_increment(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p511">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p513,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p511"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p513"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p513" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p514"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p103">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p480" org.eventb.core.prHyps="p103">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p489">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p354" org.eventb.core.prInfHyps="p407"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p512" org.eventb.core.prInfHyps="p417"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p514" org.eventb.core.prInfHyps="p515"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p354,p512,p514"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(nil)) bn_Eq bn_increment(cons(TRUE,p_tail0))" org.eventb.core.prHyps="p515">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p516">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p515"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p516"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p516" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p517"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on COND(bn_LSB(nil)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(nil))),cons(TRUE,xT bn_Add bn_shiftLeft1(nil)))=cons(FALSE,cons(TRUE,p_tail0))" org.eventb.core.prHyps="p417">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p418,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p417"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p418"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p418" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p163">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p163" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p165"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p480" org.eventb.core.prHyps="p165">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p497">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p354" org.eventb.core.prInfHyps="p493"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p512" org.eventb.core.prInfHyps="p518"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p514" org.eventb.core.prInfHyps="p519"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p354,p512,p514"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on COND(bn_LSB(nil)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(nil))),cons(TRUE,xT bn_Add bn_shiftLeft1(nil)))=cons(FALSE,cons(FALSE,p_tail0))" org.eventb.core.prHyps="p518">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p520">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p518"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p520"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p520" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p103"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p133">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p399" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p419"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p403" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p420"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p507" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p521"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p419" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p422"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p420" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p414"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p521" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p510"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with xB=TRUE" org.eventb.core.prHyps="p396">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p422" org.eventb.core.prInfHyps="p423"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p422"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p423" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p414"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_LSB(y)=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p136">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p422" org.eventb.core.prHyps="p136" org.eventb.core.prInfHyps="p424"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p414" org.eventb.core.prHyps="p136" org.eventb.core.prInfHyps="p425"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p424" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p427"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p425" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p427"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_LSB(y)=TRUE" org.eventb.core.prHyps="p136">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p510" org.eventb.core.prInfHyps="p522"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p510"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p522" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p523"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p392" org.eventb.core.prHyps="p396,p136" org.eventb.core.prInfHyps="p433"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p505" org.eventb.core.prHyps="p136" org.eventb.core.prInfHyps="p524"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p433" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p427"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p524" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p523"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p103">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p480" org.eventb.core.prHyps="p103">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p489">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p354" org.eventb.core.prInfHyps="p407"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p427" org.eventb.core.prInfHyps="p428"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p523" org.eventb.core.prInfHyps="p525"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p354,p427,p523"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y)) bn_Eq bn_increment(cons(TRUE,p_tail0))" org.eventb.core.prHyps="p525">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p526">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p525"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p526"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p526" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p432"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="cons(TRUE ≠ cons(FALSE  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p432" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p432"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE ≠ cons(FALSE"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p163">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p163" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p165"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p480" org.eventb.core.prHyps="p165">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p497">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p354" org.eventb.core.prInfHyps="p493"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p427" org.eventb.core.prInfHyps="p527"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p523" org.eventb.core.prInfHyps="p528"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p354,p427,p523"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p482">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail0,cons(FALSE,p_tail0))" org.eventb.core.prHyps="p482">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p529">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p482"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p497" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p497">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p529" org.eventb.core.prHyps="p98" org.eventb.core.prInfHyps="p530"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p530" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p495"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on ¬bn_isZero(cons(FALSE,p_tail0))" org.eventb.core.prHyps="p495">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p498">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p495"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p498"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p498" org.eventb.core.prHyps="p98" org.eventb.core.prInfHyps="p499"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p499" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e9,e20"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·bn_isZero(x)∧bn_isZero(y)⇒x bn_Eq y"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p103"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p154">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p422" org.eventb.core.prHyps="p154" org.eventb.core.prInfHyps="p435"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p414" org.eventb.core.prHyps="p154" org.eventb.core.prInfHyps="p436"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p154" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p156"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p435" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p438"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p436" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p392" org.eventb.core.prHyps="p154,p396" org.eventb.core.prInfHyps="p439"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p505" org.eventb.core.prHyps="p154" org.eventb.core.prInfHyps="p531"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p439" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p531" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p532"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p136"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p11"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p442">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p394" org.eventb.core.prHyps="p442" org.eventb.core.prInfHyps="p443"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p395" org.eventb.core.prHyps="p442" org.eventb.core.prInfHyps="p444"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p442" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p332"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p443" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p445"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p444" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p446"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p445" org.eventb.core.prHyps="p332" org.eventb.core.prInfHyps="p447"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p447" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p448"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with xB=FALSE" org.eventb.core.prHyps="p332">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p503" org.eventb.core.prInfHyps="p533"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p448" org.eventb.core.prInfHyps="p449"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p503,p448"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (y=nil)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p448" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p450"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p449" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p451"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p450" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p332,p412"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p451" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p412"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p446" org.eventb.core.prInfHyps="p452"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p446"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p392" org.eventb.core.prHyps="p442" org.eventb.core.prInfHyps="p453"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p453" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p454"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p454" org.eventb.core.prInfHyps="p455"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p454"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on COND(bn_LSB(nil)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(nil)),cons(TRUE,xT bn_Add bn_shiftLeft1(nil)))=cons(FALSE,cons(p_head0,p_tail0))" org.eventb.core.prHyps="p455">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p456,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p455"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p456"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p456" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p457"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p57">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(TRUE,xT))" org.eventb.core.prHyps="p57">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p458">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p57"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with cons(TRUE,xT) bn_Add nil=cons(TRUE,xT)" org.eventb.core.prHyps="p458">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p452" org.eventb.core.prInfHyps="p459"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p452"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p103">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p480" org.eventb.core.prHyps="p103">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p489">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p354" org.eventb.core.prInfHyps="p407"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p457" org.eventb.core.prInfHyps="p460"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p459" org.eventb.core.prInfHyps="p461"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p354,p459,p457"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on cons(TRUE,xT) bn_Eq bn_increment(cons(TRUE,p_tail0))" org.eventb.core.prHyps="p461">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p462">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p461"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p462"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p462" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p463"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="cons(TRUE ≠ cons(FALSE  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p463" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p463"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE ≠ cons(FALSE"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p163">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p163" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p165"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p480" org.eventb.core.prHyps="p165">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p497">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p354" org.eventb.core.prInfHyps="p493"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p457" org.eventb.core.prInfHyps="p534"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p459" org.eventb.core.prInfHyps="p535"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p354,p459,p457"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Commutitive Sqap on cons(FALSE,p_tail0) bn_Eq p_tail0" org.eventb.core.prHyps="p366">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p497">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p366"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p497"/>
<org.eventb.core.prRule name="r21" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p497" org.eventb.core.prHyps="p497"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Commutivity"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p103"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e17"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Add nil=x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p133">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p448" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p464"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p449" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p465"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p464" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p454"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p465" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p454"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_LSB(y)=FALSE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p156">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p454" org.eventb.core.prHyps="p156" org.eventb.core.prInfHyps="p466"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p466" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p467"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on cons(TRUE,xT) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p446">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p468">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p446"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p468"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p469" org.eventb.core.prHyps="p133" org.eventb.core.prInfHyps="p470"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p470" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p471"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_LSB(y)=FALSE" org.eventb.core.prHyps="p156">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p471" org.eventb.core.prInfHyps="p472"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p471"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p472" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p473"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p392" org.eventb.core.prHyps="p442" org.eventb.core.prInfHyps="p453"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p468" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p471"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p453" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p454"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p454" org.eventb.core.prHyps="p156" org.eventb.core.prInfHyps="p466"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p466" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p467"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Commutitive Sqap on cons(FALSE,p_tail0) bn_Eq p_tail0" org.eventb.core.prHyps="p366">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p497">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p366"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p497"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_LSB(y)=FALSE" org.eventb.core.prHyps="p156">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p471" org.eventb.core.prInfHyps="p472"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p471"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p472" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p473"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p103">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p480" org.eventb.core.prHyps="p103">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p489">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p354" org.eventb.core.prInfHyps="p407"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p467" org.eventb.core.prInfHyps="p474"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p473" org.eventb.core.prInfHyps="p475"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p354,p473,p467"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on cons(TRUE,xT bn_Add bn_shiftLeft1(y)) bn_Eq bn_increment(cons(TRUE,p_tail0))" org.eventb.core.prHyps="p475">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p476,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p475"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p476"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p476" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p477"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="cons(TRUE ≠ cons(FALSE  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p477" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p477"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE ≠ cons(FALSE"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p163">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p163" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p165"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p480" org.eventb.core.prHyps="p165">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p497">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p354" org.eventb.core.prInfHyps="p493"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p467" org.eventb.core.prInfHyps="p536"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p473" org.eventb.core.prInfHyps="p537"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p354,p473,p467"/>
<org.eventb.core.prRule name="r21" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p497" org.eventb.core.prHyps="p497"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p103"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Commutivity"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p197">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p454" org.eventb.core.prHyps="p197" org.eventb.core.prInfHyps="p478"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p197" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p136"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p478" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p392" org.eventb.core.prHyps="p442,p136" org.eventb.core.prInfHyps="p479"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p479" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p20"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p20"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p156"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p11"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p396"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p500"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p23"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Commutivity"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e9,e18"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,xB·cons(xB,x) bn_Eq x⇒xB=FALSE∧bn_isZero(x)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Strip Cons"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p80"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="incrReduction"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e21,e22,e23"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y,z·x bn_Eq y∧y bn_Eq z⇒x bn_Eq z"/>
<org.eventb.core.prString name=".string1" org.eventb.core.prSValue="∀x,y,z·x bn_Eq y⇒(y bn_Eq z⇔x bn_Eq z)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p3"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="(nil ⦂ List(BOOL))=a">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Add (nil ⦂ List(BOOL)) bn_Eq x"/>
<org.eventb.core.prPred name="p121" org.eventb.core.predicate="COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y)))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p167" org.eventb.core.predicate="x=cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p414" org.eventb.core.predicate="COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p408" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(TRUE,xT),COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p224" org.eventb.core.predicate="bn_increment(bn_shiftLeft1(x) bn_Add p_tail0) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p318" org.eventb.core.predicate="y=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p424" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(xB=FALSE∧bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="a=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p387" org.eventb.core.predicate="∃xB⦂BOOL,xT⦂List(BOOL)·cons(p_head1,p_tail1)=cons(xB,xT)">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p149" org.eventb.core.predicate="COND(FALSE=TRUE∧⊤,cons(FALSE,bn_increment(bn_increment(p_tail0) bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬⊤,cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p485" org.eventb.core.predicate="¬bn_isZero(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Add (nil ⦂ List(BOOL))=x"/>
<org.eventb.core.prPred name="p172" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(FALSE,p_tail0),COND(bn_LSB(y)=FALSE,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(y)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p427" org.eventb.core.predicate="bn_increment(xT bn_Add bn_shiftLeft1(y))=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p208" org.eventb.core.predicate="bn_increment(x) bn_Add cons(p_head0,p_tail0) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p344" org.eventb.core.predicate="COND(bn_LSB(nil ⦂ List(BOOL))=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="bn_increment(x) bn_Add (nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p93" org.eventb.core.predicate="bn_isZero(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p446" org.eventb.core.predicate="cons(TRUE,xT) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p142" org.eventb.core.predicate="∀x⦂List(BOOL)·¬bn_isZero(bn_increment(x))"/>
<org.eventb.core.prPred name="p143" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x=y⇒x bn_Eq y"/>
<org.eventb.core.prPred name="p502" org.eventb.core.predicate="∃xB⦂BOOL,xT⦂List(BOOL)·xB=p_head1∧xT=p_tail1">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="COND(p_head=TRUE∧bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),COND(p_head=FALSE∧bn_LSB(nil ⦂ List(BOOL))=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p63" org.eventb.core.predicate="COND(⊤,cons(FALSE,p_tail bn_Add (nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add (nil ⦂ List(BOOL))))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p473" org.eventb.core.predicate="cons(TRUE,xT bn_Add bn_shiftLeft1(y)) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p230" org.eventb.core.predicate="COND(p_head0=FALSE∧bn_LSB(x)=FALSE,cons(FALSE,bn_shiftLeft1(x) bn_Add p_tail0),cons(TRUE,bn_shiftLeft1(x) bn_Add p_tail0))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p489" org.eventb.core.predicate="p_tail0 bn_Eq cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p495" org.eventb.core.predicate="¬bn_isZero(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p515" org.eventb.core.predicate="cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))) bn_Eq bn_increment(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p176" org.eventb.core.predicate="COND(⊤,cons(FALSE,p_tail0),COND(bn_LSB(y)=FALSE,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(y)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p333" org.eventb.core.predicate="bn_isZero(xT)">
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p156" org.eventb.core.predicate="bn_LSB(y)=FALSE">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="¬bn_increment(nil ⦂ List(BOOL)) bn_Add (nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p215" org.eventb.core.predicate="x bn_Add cons(p_head0,p_tail0)=COND(⊤,cons(FALSE,bn_increment(bn_shiftLeft1(x) bn_Add p_tail0)),COND(p_head0=FALSE∧bn_LSB(x)=FALSE,cons(FALSE,bn_shiftLeft1(x) bn_Add p_tail0),cons(TRUE,bn_shiftLeft1(x) bn_Add p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p522" org.eventb.core.predicate="COND(TRUE=FALSE,cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p436" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p352" org.eventb.core.predicate="COND(⊤,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p520" org.eventb.core.predicate="COND(FALSE=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),cons(TRUE,xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=cons(FALSE,cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p452" org.eventb.core.predicate="cons(TRUE,xT) bn_Add (nil ⦂ List(BOOL)) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p111" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(TRUE,p_tail0),COND(TRUE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),COND(¬TRUE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(y)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y)))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p138" org.eventb.core.predicate="bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p335" org.eventb.core.predicate="cons(FALSE,xT) bn_Add y=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p326" org.eventb.core.predicate="x=cons(xB,xT)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p279" org.eventb.core.predicate="¬(p_head0=TRUE∧NOT(bn_LSB(x))=TRUE)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p147" org.eventb.core.predicate="bn_increment(p_tail0 bn_Add bn_shiftLeft1(y)) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p282" org.eventb.core.predicate="bn_increment(x) bn_Add cons(p_head0,nil ⦂ List(BOOL))=COND(p_head0=FALSE∧NOT(bn_LSB(x))=FALSE,cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))),cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p433" org.eventb.core.predicate="COND(⊤∧⊤,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(¬⊤∧¬⊤,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p89" org.eventb.core.predicate="x bn_Add y=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p151" org.eventb.core.predicate="TRUE=TRUE"/>
<org.eventb.core.prPred name="p450" org.eventb.core.predicate="COND(⊤,cons(xB,xT),COND(bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p264" org.eventb.core.predicate="NOT(bn_LSB(x))=TRUE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p317" org.eventb.core.predicate="bn_increment(x) bn_Add cons(FALSE,nil ⦂ List(BOOL))=cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p533" org.eventb.core.predicate="cons(FALSE,xT)=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p157" org.eventb.core.predicate="p_tail0 bn_Add bn_shiftLeft1(y)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p78" org.eventb.core.predicate="bn_increment(x) bn_Add y bn_Eq bn_increment(p_tail)⇒(bn_increment(p_tail) bn_Eq bn_increment(x bn_Add y)⇔bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p463" org.eventb.core.predicate="cons(TRUE,xT) bn_Eq cons(FALSE,bn_increment(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p211" org.eventb.core.predicate="x bn_Add cons(p_head0,p_tail0)=COND(p_head0=TRUE∧bn_LSB(x)=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(x) bn_Add p_tail0)),COND(p_head0=FALSE∧bn_LSB(x)=FALSE,cons(FALSE,bn_shiftLeft1(x) bn_Add p_tail0),cons(TRUE,bn_shiftLeft1(x) bn_Add p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="⊤⇒(bn_increment(x) bn_Add (nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL))⇔bn_increment(x) bn_Add (nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p175" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(TRUE,p_tail0),COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y)))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p385" org.eventb.core.predicate="cons(p_head1,p_tail1) bn_Add y=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p132" org.eventb.core.predicate="bn_increment(p_tail0) bn_Add (nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p475" org.eventb.core.predicate="cons(TRUE,xT bn_Add bn_shiftLeft1(y)) bn_Eq bn_increment(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p313" org.eventb.core.predicate="TRUE=FALSE"/>
<org.eventb.core.prPred name="p68" org.eventb.core.predicate="bn_increment(x) bn_Add p_tail bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p185" org.eventb.core.predicate="FALSE=FALSE∧⊤"/>
<org.eventb.core.prPred name="p184" org.eventb.core.predicate="FALSE=FALSE∧bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="bn_increment(cons(p_head,p_tail)) bn_Add (nil ⦂ List(BOOL)) bn_Eq bn_increment(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p135" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(p_tail0)),COND(bn_LSB(y)=FALSE,cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p124" org.eventb.core.predicate="COND(bn_LSB(nil ⦂ List(BOOL))=FALSE,cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p524" org.eventb.core.predicate="COND(FALSE=TRUE∧⊤,cons(FALSE,bn_increment(bn_increment(xT) bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬⊤,cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y)))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p466" org.eventb.core.predicate="COND(⊤,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p59" org.eventb.core.predicate="bn_increment(cons(p_head,p_tail)) bn_Eq bn_increment(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p521" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(xT)),COND(bn_LSB(y)=FALSE,cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y)))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p380" org.eventb.core.predicate="cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0)))) bn_Eq cons(FALSE,bn_increment(p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p195" org.eventb.core.predicate="bn_isZero(cons(FALSE,nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p302" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))),cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="COND(p_head=TRUE∧bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),COND(¬p_head=TRUE∧¬bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p125" org.eventb.core.predicate="COND(FALSE=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p311" org.eventb.core.predicate="bn_increment(x) bn_Add cons(TRUE,nil ⦂ List(BOOL))=cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p459" org.eventb.core.predicate="cons(TRUE,xT) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p400" org.eventb.core.predicate="cons(FALSE,bn_increment(xT)) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p239" org.eventb.core.predicate="bn_shiftLeft1(x) bn_Add p_tail0=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p390" org.eventb.core.predicate="bn_increment(cons(xB,xT)) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y)"/>
<org.eventb.core.prPred name="p144" org.eventb.core.predicate="∀x⦂List(BOOL)·¬⊥"/>
<org.eventb.core.prPred name="p435" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(xB=FALSE∧bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p354" org.eventb.core.predicate="p_tail=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p179" org.eventb.core.predicate="COND(bn_LSB(y)=FALSE,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(y)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y)))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p91" org.eventb.core.predicate="bn_isZero(cons(p_head,nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p514" org.eventb.core.predicate="cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p281" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))),COND(p_head0=FALSE∧NOT(bn_LSB(x))=FALSE,cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))),cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="x bn_Add (nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="cons(p_head,p_tail) bn_Add (nil ⦂ List(BOOL)) bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p507" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(FALSE,bn_increment(xT)),COND(bn_LSB(y)=FALSE,cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y)))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p150" org.eventb.core.predicate="TRUE=TRUE∧bn_increment(p_tail0) bn_Add bn_shiftLeft1(y) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p411" org.eventb.core.predicate="COND(⊤,cons(TRUE,xT),COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p499" org.eventb.core.predicate="¬(FALSE=FALSE∧⊤)"/>
<org.eventb.core.prPred name="p529" org.eventb.core.predicate="bn_isZero(p_tail0)∧bn_isZero(cons(FALSE,p_tail0))⇒p_tail0 bn_Eq cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p163" org.eventb.core.predicate="¬p_head0=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p287" org.eventb.core.predicate="NOT(bn_LSB(x))=FALSE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p417" org.eventb.core.predicate="COND(bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),cons(TRUE,xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=cons(FALSE,cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p458" org.eventb.core.predicate="cons(TRUE,xT) bn_Add (nil ⦂ List(BOOL))=cons(TRUE,xT)">
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p159" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p277" org.eventb.core.predicate="FALSE=TRUE∧bn_increment(bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p337" org.eventb.core.predicate="COND(FALSE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p357" org.eventb.core.predicate="x bn_Add y=cons(p_head,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p250" org.eventb.core.predicate="¬(p_head0=FALSE∧bn_LSB(x)=FALSE)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="bn_increment(x) bn_Add y bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p118" org.eventb.core.predicate="p_tail0=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="COND(p_head=FALSE∧bn_LSB(nil ⦂ List(BOOL))=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p113" org.eventb.core.predicate="COND(FALSE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(bn_increment(p_tail0) bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p196" org.eventb.core.predicate="FALSE=FALSE∧bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="bn_increment(p_tail) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p422" org.eventb.core.predicate="COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(xB=FALSE∧bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="¬bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p231" org.eventb.core.predicate="¬p_head0=TRUE∨¬bn_LSB(x)=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p259" org.eventb.core.predicate="bn_isZero(cons(p_head0,nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p334" org.eventb.core.predicate="x=cons(FALSE,xT)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p194" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p325" org.eventb.core.predicate="p_head0=p_head0∧p_tail0=p_tail0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p180" org.eventb.core.predicate="COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p527" org.eventb.core.predicate="bn_increment(xT bn_Add bn_shiftLeft1(y))=cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p532" org.eventb.core.predicate="cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(y)) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p284" org.eventb.core.predicate="¬p_head0=TRUE∨¬NOT(bn_LSB(x))=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p145" org.eventb.core.predicate="bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))=(nil ⦂ List(BOOL))⇒bn_increment(p_tail0 bn_Add bn_shiftLeft1(y)) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="(bn_One ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p303" org.eventb.core.predicate="bn_increment(x) bn_Add cons(p_head0,nil ⦂ List(BOOL))=cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p404" org.eventb.core.predicate="cons(FALSE,bn_increment(xT)) bn_Add y bn_Eq COND(p_head0=TRUE,cons(FALSE,bn_increment(p_tail0)),cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p493" org.eventb.core.predicate="p_tail=cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p378" org.eventb.core.predicate="cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0)))) bn_Eq COND(p_head0=TRUE,cons(FALSE,bn_increment(p_tail0)),cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p447" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(xB,xT),COND(⊤∧bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p464" org.eventb.core.predicate="COND(⊥,cons(xB,xT),COND(bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p72" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))∧cons(p_head,p_tail)=(nil ⦂ List(BOOL))⇔x bn_Add cons(p_head,p_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isZero(x)⇒bn_increment(x) bn_Eq (bn_One ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p153" org.eventb.core.predicate="bn_isZero(bn_increment(p_tail0 bn_Add bn_shiftLeft1(y)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p393" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(xB,xT),COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p461" org.eventb.core.predicate="cons(TRUE,xT) bn_Eq bn_increment(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p419" org.eventb.core.predicate="COND(⊥,cons(xB,xT),COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(xB=FALSE∧bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p392" org.eventb.core.predicate="COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p425" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p509" org.eventb.core.predicate="cons(FALSE,bn_increment(xT)) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p64" org.eventb.core.predicate="¬p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="x bn_Add y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="COND(bn_isZero(cons(p_head,p_tail)),nil ⦂ List(BOOL),COND(p_head=TRUE∧bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),COND(¬p_head=TRUE∧¬bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="COND(⊤,nil ⦂ List(BOOL),COND(p_head=TRUE∧bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),COND(p_head=FALSE∧bn_LSB(nil ⦂ List(BOOL))=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p283" org.eventb.core.predicate="COND(p_head0=FALSE∧NOT(bn_LSB(x))=FALSE,cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))),cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p140" org.eventb.core.predicate="COND(TRUE=FALSE,cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p470" org.eventb.core.predicate="COND(⊥,cons(TRUE,xT),COND(TRUE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(¬TRUE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p361" org.eventb.core.predicate="∀x⦂List(BOOL),xB⦂BOOL·cons(xB,x) bn_Eq x⇒xB=FALSE∧bn_isZero(x)"/>
<org.eventb.core.prPred name="p266" org.eventb.core.predicate="bn_increment(x) bn_Add cons(p_head0,nil ⦂ List(BOOL))=COND(⊤,cons(FALSE,bn_increment(bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))),COND(p_head0=FALSE∧NOT(bn_LSB(x))=FALSE,cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))),cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p278" org.eventb.core.predicate="bn_increment(bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p480" org.eventb.core.predicate="p_tail0 bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p443" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(xB,xT),COND(⊥∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(xB=FALSE∧bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p218" org.eventb.core.predicate="bn_increment(bn_shiftLeft1(x) bn_Add p_tail0)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p434" org.eventb.core.predicate="COND(FALSE=TRUE∧⊤,cons(FALSE,bn_increment(bn_increment(xT) bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬⊤,cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y)))) bn_Eq cons(FALSE,bn_increment(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p383" org.eventb.core.predicate="x=cons(p_head1,p_tail1)">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p343" org.eventb.core.predicate="COND(bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p536" org.eventb.core.predicate="xT bn_Add bn_shiftLeft1(y)=cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p377" org.eventb.core.predicate="cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0)))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p186" org.eventb.core.predicate="COND(⊥,cons(FALSE,p_tail0),COND(bn_LSB(y)=FALSE,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(y)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p290" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))),cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p323" org.eventb.core.predicate="∃xB⦂BOOL,xT⦂List(BOOL)·cons(p_head0,p_tail0)=cons(xB,xT)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p201" org.eventb.core.predicate="COND(FALSE=TRUE∧⊤,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬⊤,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(y)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p247" org.eventb.core.predicate="y=cons(FALSE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p388" org.eventb.core.predicate="∃xB⦂BOOL,xT⦂List(BOOL)·p_head1=xB∧p_tail1=xT">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p379" org.eventb.core.predicate="cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0)))) bn_Eq COND(⊤,cons(FALSE,bn_increment(p_tail0)),cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p240" org.eventb.core.predicate="y=cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p492" org.eventb.core.predicate="cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(TRUE,p_tail0)))) bn_Eq cons(FALSE,bn_increment(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p510" org.eventb.core.predicate="COND(bn_LSB(y)=FALSE,cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p70" org.eventb.core.predicate="bn_increment(x) bn_Add cons(p_head,p_tail) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p107" org.eventb.core.predicate="cons(TRUE,p_tail0) bn_Add y=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p384" org.eventb.core.predicate="bn_increment(cons(p_head1,p_tail1)) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p484" org.eventb.core.predicate="⊤∧bn_isZero(cons(p_head0,p_tail0))⇒⊥">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p158" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p255" org.eventb.core.predicate="p_head0=TRUE∨bn_LSB(x)=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p213" org.eventb.core.predicate="p_head0=TRUE∧bn_LSB(x)=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p351" org.eventb.core.predicate="⊤⇒bn_LSB(y)=FALSE">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p154" org.eventb.core.predicate="¬bn_LSB(y)=TRUE">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p214" org.eventb.core.predicate="bn_LSB(x)=TRUE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="COND(p_head=FALSE∧FALSE=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p462" org.eventb.core.predicate="cons(TRUE,xT) bn_Eq COND(TRUE=TRUE,cons(FALSE,bn_increment(p_tail0)),cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p275" org.eventb.core.predicate="p_head0=FALSE∨⊤">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p432" org.eventb.core.predicate="cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y)) bn_Eq cons(FALSE,bn_increment(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p173" org.eventb.core.predicate="COND(TRUE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),COND(¬TRUE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(y)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y)))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p234" org.eventb.core.predicate="bn_LSB(x)=FALSE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p373" org.eventb.core.predicate="COND(TRUE=TRUE∧bn_LSB(cons(FALSE,cons(p_head0,p_tail0)))=TRUE,cons(FALSE,bn_increment((nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0))))),COND(¬TRUE=TRUE∧¬bn_LSB(cons(FALSE,cons(p_head0,p_tail0)))=TRUE,cons(FALSE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0)))),cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0)))))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,p_tail bn_Add (nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add (nil ⦂ List(BOOL))))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p131" org.eventb.core.predicate="FALSE=TRUE"/>
<org.eventb.core.prPred name="p248" org.eventb.core.predicate="bn_increment(x) bn_Add cons(FALSE,nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p451" org.eventb.core.predicate="COND(⊤,cons(FALSE,xT),COND(bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p126" org.eventb.core.predicate="p_tail0 bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p170" org.eventb.core.predicate="COND(FALSE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(y)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p192" org.eventb.core.predicate="x=cons(FALSE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p261" org.eventb.core.predicate="bn_increment(x) bn_Add cons(p_head0,nil ⦂ List(BOOL))=COND(p_head0=TRUE∧NOT(bn_LSB(x))=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))),COND(p_head0=FALSE∧NOT(bn_LSB(x))=FALSE,cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))),cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p381" org.eventb.core.predicate="cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0)))) bn_Eq COND(⊥,cons(FALSE,bn_increment(p_tail0)),cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p246" org.eventb.core.predicate="bn_shiftLeft1(x) bn_Add (nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p525" org.eventb.core.predicate="cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y)) bn_Eq bn_increment(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p320" org.eventb.core.predicate="¬x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p168" org.eventb.core.predicate="cons(FALSE,p_tail0) bn_Add y=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p244" org.eventb.core.predicate="bn_shiftLeft1(x)=(nil ⦂ List(BOOL))∧p_tail0=(nil ⦂ List(BOOL))⇔⊤">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p355" org.eventb.core.predicate="p_tail0 bn_Eq cons(p_head,p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p375" org.eventb.core.predicate="COND(bn_LSB(cons(FALSE,cons(p_head0,p_tail0)))=TRUE,cons(FALSE,bn_increment((nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0))))),cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0))))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p294" org.eventb.core.predicate="x bn_Add cons(FALSE,nil ⦂ List(BOOL))=cons(TRUE,bn_shiftLeft1(x) bn_Add (nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="COND(⊥,nil ⦂ List(BOOL),COND(p_head=TRUE∧bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),COND(p_head=FALSE∧bn_LSB(nil ⦂ List(BOOL))=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p366" org.eventb.core.predicate="cons(FALSE,p_tail0) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p191" org.eventb.core.predicate="bn_shiftLeft1(y)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p141" org.eventb.core.predicate="cons(TRUE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p270" org.eventb.core.predicate="TRUE=FALSE∨bn_LSB(x)=FALSE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p345" org.eventb.core.predicate="COND(bn_LSB(nil ⦂ List(BOOL))=FALSE,cons(FALSE,xT bn_Add (nil ⦂ List(BOOL))),cons(TRUE,xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p127" org.eventb.core.predicate="COND(FALSE=FALSE,cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p104" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(p_tail0)),cons(TRUE,p_tail0)) bn_Add y bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p513" org.eventb.core.predicate="COND(FALSE=FALSE,cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p161" org.eventb.core.predicate="COND(FALSE=TRUE∧⊥,cons(FALSE,bn_increment(bn_increment(p_tail0) bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬⊥,cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p312" org.eventb.core.predicate="NOT(FALSE)=FALSE"/>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="COND(bn_isZero(cons(p_head,p_tail)),nil ⦂ List(BOOL),COND(p_head=TRUE∧bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),COND(p_head=FALSE∧bn_LSB(nil ⦂ List(BOOL))=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p307" org.eventb.core.predicate="cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p415" org.eventb.core.predicate="COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))=cons(FALSE,cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p232" org.eventb.core.predicate="p_head0=FALSE∨bn_LSB(x)=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p233" org.eventb.core.predicate="p_head0=FALSE∧bn_LSB(x)=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p523" org.eventb.core.predicate="cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y)) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p409" org.eventb.core.predicate="COND(⊤,cons(xB,xT),COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(xB=FALSE∧bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p348" org.eventb.core.predicate="COND(⊥,cons(FALSE,xT),COND(bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p360" org.eventb.core.predicate="p_head0=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p386" org.eventb.core.predicate="¬cons(p_head1,p_tail1)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p454" org.eventb.core.predicate="COND(bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p370" org.eventb.core.predicate="bn_increment(nil ⦂ List(BOOL)) bn_Add cons(FALSE,cons(p_head0,p_tail0)) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p288" org.eventb.core.predicate="⊤∨bn_LSB(x)=FALSE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p314" org.eventb.core.predicate="⊥∨bn_LSB(x)=TRUE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p346" org.eventb.core.predicate="COND(FALSE=FALSE,cons(FALSE,xT bn_Add (nil ⦂ List(BOOL))),cons(TRUE,xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p442" org.eventb.core.predicate="¬xB=TRUE">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p331" org.eventb.core.predicate="xB=FALSE∧bn_isZero(xT)">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p101" org.eventb.core.predicate="bn_isZero(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p369" org.eventb.core.predicate="y=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p262" org.eventb.core.predicate="COND(p_head0=TRUE∧NOT(bn_LSB(x))=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))),COND(p_head0=FALSE∧NOT(bn_LSB(x))=FALSE,cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))),cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p120" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail0)) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p58" org.eventb.core.predicate="bn_increment(cons(p_head,p_tail)) bn_Add (nil ⦂ List(BOOL))=bn_increment(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p217" org.eventb.core.predicate="x bn_Add cons(p_head0,p_tail0)=cons(FALSE,bn_increment(bn_shiftLeft1(x) bn_Add p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p102" org.eventb.core.predicate="COND(p_head0=TRUE,cons(FALSE,bn_increment(p_tail0)),cons(TRUE,p_tail0)) bn_Add y bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p90" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p497" org.eventb.core.predicate="p_tail0 bn_Eq cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p534" org.eventb.core.predicate="xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))=cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p342" org.eventb.core.predicate="bn_increment(cons(FALSE,xT)) bn_Add (nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p396" org.eventb.core.predicate="xB=TRUE">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p403" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(TRUE,xT),COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p94" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Add y=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p134" org.eventb.core.predicate="COND(⊥,cons(TRUE,p_tail0),COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p228" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(bn_shiftLeft1(x) bn_Add p_tail0)),COND(p_head0=FALSE∧bn_LSB(x)=FALSE,cons(FALSE,bn_shiftLeft1(x) bn_Add p_tail0),cons(TRUE,bn_shiftLeft1(x) bn_Add p_tail0)))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p200" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p444" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(xT)),cons(TRUE,xT)) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="COND(p_head=TRUE∧FALSE=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),COND(p_head=FALSE∧bn_LSB(nil ⦂ List(BOOL))=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p488" org.eventb.core.predicate="cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(TRUE,p_tail0)))) bn_Eq bn_increment(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p79" org.eventb.core.predicate="bn_increment(x) bn_Add y bn_Eq bn_increment(p_tail)⇒(p_tail bn_Eq x bn_Add y⇔bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p122" org.eventb.core.predicate="COND(bn_LSB(y)=FALSE,cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p431" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(xT)),COND(FALSE=TRUE∧⊤,cons(FALSE,bn_increment(bn_increment(xT) bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬⊤,cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y))))) bn_Eq cons(FALSE,bn_increment(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="⊤⇒⊤"/>
<org.eventb.core.prPred name="p467" org.eventb.core.predicate="xT bn_Add bn_shiftLeft1(y)=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p77" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL),z⦂List(BOOL)·x bn_Eq y∧y bn_Eq z⇒x bn_Eq z"/>
<org.eventb.core.prPred name="p129" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail0) bn_Add (nil ⦂ List(BOOL))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p437" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))=cons(FALSE,cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p98" org.eventb.core.predicate="bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p336" org.eventb.core.predicate="bn_increment(cons(FALSE,xT)) bn_Add y bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p225" org.eventb.core.predicate="bn_isZero(bn_increment(bn_shiftLeft1(x) bn_Add p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p471" org.eventb.core.predicate="COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),cons(TRUE,xT bn_Add bn_shiftLeft1(y))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="⊤⇒⊥"/>
<org.eventb.core.prPred name="p356" org.eventb.core.predicate="bn_increment(x) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="¬bn_increment(x) bn_Add (nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="⊥⇔bn_increment(x) bn_Add (nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p96" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p516" org.eventb.core.predicate="cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))) bn_Eq COND(TRUE=TRUE,cons(FALSE,bn_increment(p_tail0)),cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p339" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(FALSE,xT),COND(bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="∃a⦂List(BOOL)·x bn_Add y=a">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p503" org.eventb.core.predicate="cons(xB,xT)=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p84" org.eventb.core.predicate="⊤⇒(⊥⇔⊥)"/>
<org.eventb.core.prPred name="p92" org.eventb.core.predicate="bn_isZero(x)∧bn_isZero(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p332" org.eventb.core.predicate="xB=FALSE">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p222" org.eventb.core.predicate="bn_increment(bn_shiftLeft1(x) bn_Add p_tail0)=(nil ⦂ List(BOOL))⇒bn_increment(bn_shiftLeft1(x) bn_Add p_tail0) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p397" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(xB,xT),COND(⊤∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(xB=FALSE∧bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_increment(x) bn_Add y bn_Eq bn_increment(a)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p535" org.eventb.core.predicate="cons(TRUE,xT) bn_Eq bn_increment(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="bn_increment(x) bn_Add (nil ⦂ List(BOOL)) bn_Eq bn_increment(x)⇒(bn_increment(x) bn_Add (nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL))⇔bn_increment(x) bn_Add (nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p210" org.eventb.core.predicate="∀x⦂List(BOOL),yB⦂BOOL,yT⦂List(BOOL)·x bn_Add cons(yB,yT)=COND(yB=TRUE∧bn_LSB(x)=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(x) bn_Add yT)),COND(yB=FALSE∧bn_LSB(x)=FALSE,cons(FALSE,bn_shiftLeft1(x) bn_Add yT),cons(TRUE,bn_shiftLeft1(x) bn_Add yT)))"/>
<org.eventb.core.prPred name="p241" org.eventb.core.predicate="bn_increment(x) bn_Add cons(FALSE,p_tail0) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,p_tail bn_Add (nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p440" org.eventb.core.predicate="cons(FALSE,bn_increment(xT)) bn_Add y bn_Eq COND(⊥,cons(FALSE,bn_increment(p_tail0)),cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL),z⦂List(BOOL)·x bn_Eq y⇒(y bn_Eq z⇔x bn_Eq z)"/>
<org.eventb.core.prPred name="p189" org.eventb.core.predicate="p_tail0=(nil ⦂ List(BOOL))∧bn_shiftLeft1(y)=(nil ⦂ List(BOOL))⇔p_tail0 bn_Add bn_shiftLeft1(y)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p487" org.eventb.core.predicate="¬bn_isZero(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="¬bn_increment(cons(p_head,p_tail)) bn_Add (nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p74" org.eventb.core.predicate="a=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p394" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(xB,xT),COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(xB=FALSE∧bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p469" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(TRUE,xT),COND(TRUE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(¬TRUE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p420" org.eventb.core.predicate="COND(⊥,cons(TRUE,xT),COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p181" org.eventb.core.predicate="COND(bn_LSB(nil ⦂ List(BOOL))=FALSE,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p476" org.eventb.core.predicate="cons(TRUE,xT bn_Add bn_shiftLeft1(y)) bn_Eq COND(TRUE=TRUE,cons(FALSE,bn_increment(p_tail0)),cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p329" org.eventb.core.predicate="bn_isZero(cons(xB,xT))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p445" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(xB,xT),COND(xB=FALSE∧bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p251" org.eventb.core.predicate="x bn_Add cons(p_head0,p_tail0)=COND(⊥,cons(FALSE,bn_shiftLeft1(x) bn_Add p_tail0),cons(TRUE,bn_shiftLeft1(x) bn_Add p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p374" org.eventb.core.predicate="COND(cons(FALSE,cons(p_head0,p_tail0))=(nil ⦂ List(BOOL)),cons(TRUE,nil ⦂ List(BOOL)),COND(TRUE=TRUE∧bn_LSB(cons(FALSE,cons(p_head0,p_tail0)))=TRUE,cons(FALSE,bn_increment((nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0))))),COND(¬TRUE=TRUE∧¬bn_LSB(cons(FALSE,cons(p_head0,p_tail0)))=TRUE,cons(FALSE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0)))),cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0))))))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p269" org.eventb.core.predicate="cons(FALSE,bn_increment(bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p80" org.eventb.core.predicate="p_tail bn_Eq x bn_Add y⇔bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p226" org.eventb.core.predicate="¬(p_head0=TRUE∧bn_LSB(x)=TRUE)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p182" org.eventb.core.predicate="COND(bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p511" org.eventb.core.predicate="COND(bn_LSB(nil ⦂ List(BOOL))=FALSE,cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p472" org.eventb.core.predicate="COND(FALSE=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),cons(TRUE,xT bn_Add bn_shiftLeft1(y))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p160" org.eventb.core.predicate="COND(TRUE=TRUE∧⊥,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),COND(¬TRUE=TRUE∧¬⊥,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(y)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p371" org.eventb.core.predicate="(bn_One ⦂ List(BOOL)) bn_Add cons(FALSE,cons(p_head0,p_tail0)) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p481" org.eventb.core.predicate="(bn_One ⦂ List(BOOL)) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="bn_increment(x) bn_Add (nil ⦂ List(BOOL)) bn_Eq bn_increment(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="cons(p_head,p_tail) bn_Add (nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p187" org.eventb.core.predicate="COND(⊥,cons(TRUE,p_tail0),COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y)))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p363" org.eventb.core.predicate="cons(p_head,p_tail0) bn_Eq p_tail0⇒p_head=FALSE∧bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p376" org.eventb.core.predicate="COND(FALSE=TRUE,cons(FALSE,bn_increment((nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0))))),cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0))))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p413" org.eventb.core.predicate="COND(⊤∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(¬⊤∧¬bn_LSB(y)=TRUE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p309" org.eventb.core.predicate="⊤∨NOT(bn_LSB(x))=TRUE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p237" org.eventb.core.predicate="⊤∨⊤"/>
<org.eventb.core.prPred name="p406" org.eventb.core.predicate="cons(FALSE,bn_increment(xT)) bn_Add y bn_Eq cons(FALSE,bn_increment(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p330" org.eventb.core.predicate="¬cons(xB,xT)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p221" org.eventb.core.predicate="x bn_Add cons(TRUE,p_tail0)=cons(FALSE,bn_increment(bn_shiftLeft1(x) bn_Add p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p108" org.eventb.core.predicate="bn_isZero(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p410" org.eventb.core.predicate="COND(⊤,cons(TRUE,xT),COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p267" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))),COND(p_head0=FALSE∧NOT(bn_LSB(x))=FALSE,cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))),cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p465" org.eventb.core.predicate="COND(⊥,cons(FALSE,xT),COND(bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p501" org.eventb.core.predicate="∃xB⦂BOOL,xT⦂List(BOOL)·cons(xB,xT)=cons(p_head1,p_tail1)">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p416" org.eventb.core.predicate="cons(FALSE,bn_increment(xT)) bn_Add (nil ⦂ List(BOOL)) bn_Eq cons(FALSE,bn_increment(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p268" org.eventb.core.predicate="bn_increment(x) bn_Add cons(p_head0,nil ⦂ List(BOOL))=cons(FALSE,bn_increment(bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="bn_increment(x) bn_Eq (bn_One ⦂ List(BOOL))⇔bn_increment(x) bn_Add (nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p322" org.eventb.core.predicate="¬cons(p_head0,p_tail0)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p109" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail0)) bn_Add y bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p162" org.eventb.core.predicate="FALSE=TRUE∧bn_increment(p_tail0) bn_Add bn_shiftLeft1(y) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p289" org.eventb.core.predicate="bn_increment(x) bn_Add cons(p_head0,nil ⦂ List(BOOL))=COND(⊤,cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))),cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p353" org.eventb.core.predicate="xT bn_Add bn_shiftLeft1(y)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p112" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(TRUE,p_tail0),COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p441" org.eventb.core.predicate="cons(FALSE,bn_increment(xT)) bn_Add y bn_Eq cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p66" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p298" org.eventb.core.predicate="FALSE=TRUE∧bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p227" org.eventb.core.predicate="x bn_Add cons(p_head0,p_tail0)=COND(⊥,cons(FALSE,bn_increment(bn_shiftLeft1(x) bn_Add p_tail0)),COND(p_head0=FALSE∧bn_LSB(x)=FALSE,cons(FALSE,bn_shiftLeft1(x) bn_Add p_tail0),cons(TRUE,bn_shiftLeft1(x) bn_Add p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p526" org.eventb.core.predicate="cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y)) bn_Eq COND(TRUE=TRUE,cons(FALSE,bn_increment(p_tail0)),cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p271" org.eventb.core.predicate="y=cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p105" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail0)) bn_Add y bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p340" org.eventb.core.predicate="COND(⊤,cons(FALSE,xT),COND(bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p62" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p537" org.eventb.core.predicate="cons(TRUE,xT bn_Add bn_shiftLeft1(y)) bn_Eq bn_increment(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p496" org.eventb.core.predicate="cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(FALSE,p_tail0)))) bn_Eq bn_increment(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p504" org.eventb.core.predicate="cons(TRUE,xT)=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p216" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(bn_shiftLeft1(x) bn_Add p_tail0)),COND(p_head0=FALSE∧bn_LSB(x)=FALSE,cons(FALSE,bn_shiftLeft1(x) bn_Add p_tail0),cons(TRUE,bn_shiftLeft1(x) bn_Add p_tail0)))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p372" org.eventb.core.predicate="cons(TRUE,nil ⦂ List(BOOL)) bn_Add cons(FALSE,cons(p_head0,p_tail0)) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p295" org.eventb.core.predicate="bn_increment(x) bn_Add cons(FALSE,nil ⦂ List(BOOL))=cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p81" org.eventb.core.predicate="bn_increment(x) bn_Add y bn_Eq bn_increment(p_tail)⇒(p_tail bn_Eq x bn_Add y⇔p_tail bn_Eq x bn_Add y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p418" org.eventb.core.predicate="COND(FALSE=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),cons(TRUE,xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=cons(FALSE,cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p69" org.eventb.core.predicate="x bn_Add cons(p_head,p_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="x bn_Add y=a">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p116" org.eventb.core.predicate="COND(⊤,cons(TRUE,p_tail0),COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p296" org.eventb.core.predicate="p_head0=TRUE∨⊤">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p123" org.eventb.core.predicate="COND(bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p198" org.eventb.core.predicate="COND(⊥,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(y)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y)))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p106" org.eventb.core.predicate="x=cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p479" org.eventb.core.predicate="COND(⊥∧⊤,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(¬⊥∧¬⊤,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p209" org.eventb.core.predicate="∀x⦂List(BOOL),yB⦂BOOL,yT⦂List(BOOL)·x bn_Add cons(yB,yT)=COND(yB=TRUE∧bn_LSB(x)=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(x) bn_Add yT)),COND(¬yB=TRUE∧¬bn_LSB(x)=TRUE,cons(FALSE,bn_shiftLeft1(x) bn_Add yT),cons(TRUE,bn_shiftLeft1(x) bn_Add yT)))"/>
<org.eventb.core.prPred name="p207" org.eventb.core.predicate="x bn_Add cons(p_head0,p_tail0)=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p530" org.eventb.core.predicate="⊤∧bn_isZero(cons(FALSE,p_tail0))⇒⊥">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p174" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(TRUE,p_tail0),COND(TRUE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),COND(¬TRUE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(y)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y))))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p256" org.eventb.core.predicate="y=cons(p_head0,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p128" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p512" org.eventb.core.predicate="COND(bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),cons(TRUE,xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p117" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(p_tail0)),COND(bn_LSB(y)=FALSE,cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p265" org.eventb.core.predicate="⊤∨bn_LSB(x)=TRUE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p358" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Eq cons(p_head,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p508" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(xT)),COND(bn_LSB(y)=FALSE,cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y)))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p75" org.eventb.core.predicate="bn_increment(x) bn_Add y bn_Eq bn_increment(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p252" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_shiftLeft1(x) bn_Add p_tail0),cons(TRUE,bn_shiftLeft1(x) bn_Add p_tail0))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p297" org.eventb.core.predicate="cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p76" org.eventb.core.predicate="x bn_Add y=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p115" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(FALSE,bn_increment(p_tail0)),COND(bn_LSB(y)=FALSE,cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p292" org.eventb.core.predicate="cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p137" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y)))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p205" org.eventb.core.predicate="x bn_Add (nil ⦂ List(BOOL))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p300" org.eventb.core.predicate="¬(p_head0=FALSE∧NOT(bn_LSB(x))=FALSE)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p273" org.eventb.core.predicate="bn_increment(x) bn_Add cons(TRUE,nil ⦂ List(BOOL))=cons(FALSE,bn_increment(bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p238" org.eventb.core.predicate="x bn_Add cons(p_head0,p_tail0)=cons(FALSE,bn_shiftLeft1(x) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p119" org.eventb.core.predicate="TRUE=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p67" org.eventb.core.predicate="y=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p146" org.eventb.core.predicate="⊤⇒bn_increment(p_tail0 bn_Add bn_shiftLeft1(y)) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p368" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Add y=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p347" org.eventb.core.predicate="xT bn_Add (nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p395" org.eventb.core.predicate="COND(xB=TRUE,cons(FALSE,bn_increment(xT)),cons(TRUE,xT)) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p82" org.eventb.core.predicate="p_tail bn_Eq x bn_Add y">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p220" org.eventb.core.predicate="bn_increment(x) bn_Add cons(TRUE,p_tail0) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p412" org.eventb.core.predicate="xT=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p449" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(FALSE,xT),COND(bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="COND((nil ⦂ List(BOOL))=(nil ⦂ List(BOOL)),cons(p_head,p_tail),COND(p_head=TRUE∧bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),COND(¬p_head=TRUE∧¬bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p365" org.eventb.core.predicate="x bn_Add y=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p86" org.eventb.core.predicate="cons(p_head,p_tail)=a">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p517" org.eventb.core.predicate="cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))) bn_Eq cons(FALSE,bn_increment(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p439" org.eventb.core.predicate="COND(⊤∧⊥,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(¬⊤∧¬⊥,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p426" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))=cons(FALSE,cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p190" org.eventb.core.predicate="p_tail0=(nil ⦂ List(BOOL))∧bn_shiftLeft1(y)=(nil ⦂ List(BOOL))⇔⊤">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p405" org.eventb.core.predicate="cons(FALSE,bn_increment(xT)) bn_Add y bn_Eq COND(⊤,cons(FALSE,bn_increment(p_tail0)),cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p402" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(TRUE,xT),COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(TRUE=FALSE∧bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p486" org.eventb.core.predicate="y=cons(FALSE,cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p97" org.eventb.core.predicate="x=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p245" org.eventb.core.predicate="bn_shiftLeft1(x)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p349" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isZero(x)⇒bn_LSB(x)=FALSE"/>
<org.eventb.core.prPred name="p389" org.eventb.core.predicate="p_head1=p_head1∧p_tail1=p_tail1">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p391" org.eventb.core.predicate="cons(xB,xT) bn_Add y=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p474" org.eventb.core.predicate="xT bn_Add bn_shiftLeft1(y)=cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p362" org.eventb.core.predicate="cons(p_head,p_tail0) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p494" org.eventb.core.predicate="y=cons(FALSE,cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p324" org.eventb.core.predicate="∃xB⦂BOOL,xT⦂List(BOOL)·p_head0=xB∧p_tail0=xT">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p364" org.eventb.core.predicate="⊤⇒p_head=FALSE∧bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p258" org.eventb.core.predicate="x bn_Add cons(p_head0,nil ⦂ List(BOOL))=cons(TRUE,bn_shiftLeft1(x) bn_Add (nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p457" org.eventb.core.predicate="xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p219" org.eventb.core.predicate="y=cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p430" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(FALSE,bn_increment(xT)),COND(FALSE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(bn_increment(xT) bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y))))) bn_Eq cons(FALSE,bn_increment(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p183" org.eventb.core.predicate="COND(FALSE=FALSE,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p95" org.eventb.core.predicate="bn_increment(nil ⦂ List(BOOL)) bn_Add y bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p177" org.eventb.core.predicate="COND(⊤,cons(TRUE,p_tail0),COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y)))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p338" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(FALSE,xT),COND(FALSE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p169" org.eventb.core.predicate="bn_isZero(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))⇒bn_increment(cons(p_head,p_tail)) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p253" org.eventb.core.predicate="x bn_Add cons(p_head0,p_tail0)=cons(TRUE,bn_shiftLeft1(x) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p263" org.eventb.core.predicate="p_head0=TRUE∧NOT(bn_LSB(x))=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p498" org.eventb.core.predicate="¬(FALSE=FALSE∧bn_isZero(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p199" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p306" org.eventb.core.predicate="p_head0=TRUE∨NOT(bn_LSB(x))=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p401" org.eventb.core.predicate="x=cons(TRUE,xT)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p423" org.eventb.core.predicate="COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(TRUE=FALSE∧bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p519" org.eventb.core.predicate="cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))) bn_Eq bn_increment(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p490" org.eventb.core.predicate="¬⊥"/>
<org.eventb.core.prPred name="p148" org.eventb.core.predicate="COND(TRUE=TRUE∧⊤,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),COND(¬TRUE=TRUE∧¬⊤,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(y)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p166" org.eventb.core.predicate="cons(TRUE,p_tail0) bn_Add y bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p528" org.eventb.core.predicate="cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y)) bn_Eq bn_increment(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p223" org.eventb.core.predicate="⊤⇒bn_increment(bn_shiftLeft1(x) bn_Add p_tail0) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p291" org.eventb.core.predicate="bn_increment(x) bn_Add cons(p_head0,nil ⦂ List(BOOL))=cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p165" org.eventb.core.predicate="p_head0=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p407" org.eventb.core.predicate="p_tail=cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p204" org.eventb.core.predicate="bn_isZero(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p299" org.eventb.core.predicate="bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p483" org.eventb.core.predicate="bn_isZero(p_tail0)∧bn_isZero(cons(p_head0,p_tail0))⇒p_tail0 bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p212" org.eventb.core.predicate="COND(p_head0=TRUE∧bn_LSB(x)=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(x) bn_Add p_tail0)),COND(p_head0=FALSE∧bn_LSB(x)=FALSE,cons(FALSE,bn_shiftLeft1(x) bn_Add p_tail0),cons(TRUE,bn_shiftLeft1(x) bn_Add p_tail0)))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p65" org.eventb.core.predicate="COND(⊥,cons(FALSE,p_tail bn_Add (nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add (nil ⦂ List(BOOL))))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p103" org.eventb.core.predicate="p_head0=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p197" org.eventb.core.predicate="¬bn_LSB(y)=FALSE">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p61" org.eventb.core.predicate="p_tail bn_Add (nil ⦂ List(BOOL))=p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p468" org.eventb.core.predicate="COND(TRUE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(¬TRUE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p398" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(xT)),cons(TRUE,xT)) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p453" org.eventb.core.predicate="COND(⊥∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(¬⊥∧¬bn_LSB(y)=TRUE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p193" org.eventb.core.predicate="COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment((nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y))),cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p308" org.eventb.core.predicate="TRUE=TRUE∧bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p257" org.eventb.core.predicate="bn_increment(x) bn_Add cons(p_head0,nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p448" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(xB,xT),COND(bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p506" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(FALSE,bn_increment(xT)),COND(FALSE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(bn_increment(xT) bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y))))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p242" org.eventb.core.predicate="x bn_Add cons(FALSE,p_tail0)=cons(FALSE,bn_shiftLeft1(x) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p328" org.eventb.core.predicate="bn_increment(cons(xB,xT)) bn_Add y bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p276" org.eventb.core.predicate="cons(FALSE,bn_increment(bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p305" org.eventb.core.predicate="¬p_head0=FALSE∨¬NOT(bn_LSB(x))=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p152" org.eventb.core.predicate="bn_increment(p_tail0) bn_Add bn_shiftLeft1(y) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p60" org.eventb.core.predicate="¬bn_increment(cons(p_head,p_tail)) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p171" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(FALSE,p_tail0),COND(FALSE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(y)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y)))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p319" org.eventb.core.predicate="bn_increment(nil ⦂ List(BOOL)) bn_Add cons(p_head,nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p100" org.eventb.core.predicate="bn_increment(cons(p_head0,p_tail0)) bn_Add y bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p235" org.eventb.core.predicate="x bn_Add cons(p_head0,p_tail0)=COND(⊤,cons(FALSE,bn_shiftLeft1(x) bn_Add p_tail0),cons(TRUE,bn_shiftLeft1(x) bn_Add p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p301" org.eventb.core.predicate="bn_increment(x) bn_Add cons(p_head0,nil ⦂ List(BOOL))=COND(⊥,cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))),cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p505" org.eventb.core.predicate="COND(FALSE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(bn_increment(xT) bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y)))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p518" org.eventb.core.predicate="COND(bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))),cons(TRUE,xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=cons(FALSE,cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p274" org.eventb.core.predicate="bn_isZero(cons(TRUE,nil ⦂ List(BOOL)))"/>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="bn_increment(nil ⦂ List(BOOL)) bn_Add (nil ⦂ List(BOOL)) bn_Eq bn_increment(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="bn_increment(x) bn_Add y bn_Eq bn_increment(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p350" org.eventb.core.predicate="bn_isZero(y)⇒bn_LSB(y)=FALSE">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p304" org.eventb.core.predicate="cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="bn_increment(x) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="bn_increment(nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p110" org.eventb.core.predicate="COND(TRUE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),COND(¬TRUE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(y)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y))))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p202" org.eventb.core.predicate="COND(TRUE=TRUE∧⊤,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),COND(¬TRUE=TRUE∧¬⊤,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(y)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y)))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p341" org.eventb.core.predicate="xT=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p286" org.eventb.core.predicate="p_head0=FALSE∧NOT(bn_LSB(x))=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p421" org.eventb.core.predicate="COND(⊥,cons(TRUE,xT),COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),cons(TRUE,xT bn_Add bn_shiftLeft1(y))))=cons(FALSE,cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p285" org.eventb.core.predicate="p_head0=FALSE∨NOT(bn_LSB(x))=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Add (nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p136" org.eventb.core.predicate="bn_LSB(y)=TRUE">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p85" org.eventb.core.predicate="¬bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p83" org.eventb.core.predicate="⊥⇔bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p243" org.eventb.core.predicate="bn_shiftLeft1(x)=(nil ⦂ List(BOOL))∧p_tail0=(nil ⦂ List(BOOL))⇔bn_shiftLeft1(x) bn_Add p_tail0=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p280" org.eventb.core.predicate="bn_increment(x) bn_Add cons(p_head0,nil ⦂ List(BOOL))=COND(⊥,cons(FALSE,bn_increment(bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))),COND(p_head0=FALSE∧NOT(bn_LSB(x))=FALSE,cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))),cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p254" org.eventb.core.predicate="¬p_head0=FALSE∨¬bn_LSB(x)=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p455" org.eventb.core.predicate="COND(bn_LSB(nil ⦂ List(BOOL))=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p260" org.eventb.core.predicate="bn_increment(x) bn_Add cons(p_head0,nil ⦂ List(BOOL))=COND(p_head0=TRUE∧bn_LSB(bn_increment(x))=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))),COND(p_head0=FALSE∧bn_LSB(bn_increment(x))=FALSE,cons(FALSE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL))),cons(TRUE,bn_shiftLeft1(bn_increment(x)) bn_Add (nil ⦂ List(BOOL)))))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p399" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(xB,xT),COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT bn_Add bn_shiftLeft1(y))),COND(xB=FALSE∧bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p272" org.eventb.core.predicate="x bn_Add cons(TRUE,nil ⦂ List(BOOL))=cons(TRUE,bn_shiftLeft1(x) bn_Add (nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p438" org.eventb.core.predicate="COND(xB=FALSE∧bn_LSB(y)=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p155" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y)))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p460" org.eventb.core.predicate="xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))=cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p321" org.eventb.core.predicate="∃xB⦂BOOL,xT⦂List(BOOL)·x=cons(xB,xT)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p429" org.eventb.core.predicate="COND(FALSE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(bn_increment(xT) bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y)))) bn_Eq cons(FALSE,bn_increment(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p130" org.eventb.core.predicate="FALSE=TRUE∧bn_increment(p_tail0) bn_Add (nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="bn_increment(cons(p_head,p_tail)) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p73" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))∧cons(p_head,p_tail)=(nil ⦂ List(BOOL))⇔⊤">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p87" org.eventb.core.predicate="p_tail bn_Eq cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p531" org.eventb.core.predicate="COND(FALSE=TRUE∧⊥,cons(FALSE,bn_increment(bn_increment(xT) bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬⊥,cons(FALSE,bn_increment(xT) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(xT) bn_Add bn_shiftLeft1(y)))) bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="COND(p_head=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p114" org.eventb.core.predicate="COND(y=(nil ⦂ List(BOOL)),cons(FALSE,bn_increment(p_tail0)),COND(FALSE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(bn_increment(p_tail0) bn_Add bn_shiftLeft1(y))),COND(¬FALSE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y)),cons(TRUE,bn_increment(p_tail0) bn_Add bn_shiftLeft1(y))))) bn_Eq cons(TRUE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p178" org.eventb.core.predicate="cons(TRUE,p_tail0) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p428" org.eventb.core.predicate="bn_increment(xT bn_Add bn_shiftLeft1(y))=cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p99" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Add y=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="bn_increment(x) bn_Add (nil ⦂ List(BOOL)) bn_Eq bn_increment(x)⇒(bn_increment(x) bn_Eq (bn_One ⦂ List(BOOL))⇔bn_increment(x) bn_Add (nil ⦂ List(BOOL)) bn_Eq (bn_One ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p327" org.eventb.core.predicate="cons(xB,xT) bn_Add y=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xB" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p139" org.eventb.core.predicate="FALSE=p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p236" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_shiftLeft1(x) bn_Add p_tail0),cons(TRUE,bn_shiftLeft1(x) bn_Add p_tail0))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p382" org.eventb.core.predicate="cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(p_head0,p_tail0)))) bn_Eq cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p229" org.eventb.core.predicate="x bn_Add cons(p_head0,p_tail0)=COND(p_head0=FALSE∧bn_LSB(x)=FALSE,cons(FALSE,bn_shiftLeft1(x) bn_Add p_tail0),cons(TRUE,bn_shiftLeft1(x) bn_Add p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p482" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isZero(x)∧bn_isZero(y)⇒x bn_Eq y"/>
<org.eventb.core.prPred name="p88" org.eventb.core.predicate="p_tail=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p500" org.eventb.core.predicate="∃xB⦂BOOL,xT⦂List(BOOL)·cons(xB,xT)=x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p293" org.eventb.core.predicate="FALSE=TRUE∨bn_LSB(x)=TRUE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p359" org.eventb.core.predicate="p_head0=p_head∧p_tail0 bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p203" org.eventb.core.predicate="cons(FALSE,bn_increment((nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y))) bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p315" org.eventb.core.predicate="⊥∨NOT(bn_LSB(x))=TRUE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p316" org.eventb.core.predicate="⊤∨NOT(bn_LSB(x))=FALSE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p367" org.eventb.core.predicate="bn_increment(nil ⦂ List(BOOL)) bn_Add y bn_Eq bn_increment(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p206" org.eventb.core.predicate="y=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p71" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x=(nil ⦂ List(BOOL))∧y=(nil ⦂ List(BOOL))⇔x bn_Add y=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p133" org.eventb.core.predicate="¬y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p477" org.eventb.core.predicate="cons(TRUE,xT bn_Add bn_shiftLeft1(y)) bn_Eq cons(FALSE,bn_increment(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p164" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(p_tail0)),cons(TRUE,p_tail0)) bn_Add y bn_Eq (bn_One ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p456" org.eventb.core.predicate="COND(FALSE=FALSE,cons(FALSE,xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))),cons(TRUE,xT bn_Add bn_shiftLeft1(nil ⦂ List(BOOL))))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p310" org.eventb.core.predicate="TRUE=FALSE∨NOT(bn_LSB(x))=FALSE">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p478" org.eventb.core.predicate="COND(⊥,cons(FALSE,xT bn_Add bn_shiftLeft1(y)),cons(TRUE,xT bn_Add bn_shiftLeft1(y)))=cons(FALSE,cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p491" org.eventb.core.predicate="cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(cons(FALSE,cons(TRUE,p_tail0)))) bn_Eq COND(TRUE=TRUE,cons(FALSE,bn_increment(p_tail0)),cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p249" org.eventb.core.predicate="x bn_Add cons(FALSE,nil ⦂ List(BOOL))=cons(FALSE,bn_shiftLeft1(x) bn_Add (nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p188" org.eventb.core.predicate="COND(⊤,cons(FALSE,p_tail0 bn_Add bn_shiftLeft1(y)),cons(TRUE,p_tail0 bn_Add bn_shiftLeft1(y)))=cons(p_head,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e13" org.eventb.core.expression="p_head0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e16" org.eventb.core.expression="p_tail1">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="bn_increment(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e10" org.eventb.core.expression="bn_shiftLeft1(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e20" org.eventb.core.expression="cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e5" org.eventb.core.expression="bn_One ⦂ List(BOOL)"/>
<org.eventb.core.prExpr name="e14" org.eventb.core.expression="y">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="bn_increment(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e17" org.eventb.core.expression="cons(TRUE,xT)">
<org.eventb.core.prIdent name="xT" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e18" org.eventb.core.expression="p_head">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e8" org.eventb.core.expression="nil ⦂ List(BOOL)"/>
<org.eventb.core.prExpr name="e15" org.eventb.core.expression="p_head1">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e9" org.eventb.core.expression="p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e23" org.eventb.core.expression="bn_increment(x bn_Add y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e12" org.eventb.core.expression="bn_shiftLeft1(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e19" org.eventb.core.expression="cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e6" org.eventb.core.expression="x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e21" org.eventb.core.expression="bn_increment(x) bn_Add y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e22" org.eventb.core.expression="bn_increment(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e11" org.eventb.core.expression="bn_increment(bn_shiftLeft1(x) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="bn_increment(x) bn_Add (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e7" org.eventb.core.expression="bn_increment(p_tail0 bn_Add bn_shiftLeft1(y))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r19" org.eventb.core.prRID="org.eventb.core.seqprover.conj:0"/>
<org.eventb.core.prReas name="r22" org.eventb.core.prRID="org.eventb.core.seqprover.dtDistinctCase"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.onePointRule:2"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.exF"/>
<org.eventb.core.prReas name="r14" org.eventb.core.prRID="org.eventb.core.seqprover.eqvLR"/>
<org.eventb.core.prReas name="r15" org.eventb.core.prRID="org.eventb.core.seqprover.mngHyp"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.he:1"/>
<org.eventb.core.prReas name="r18" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r20" org.eventb.core.prRID="org.eventb.core.seqprover.rn"/>
<org.eventb.core.prReas name="r23" org.eventb.core.prRID="org.eventb.core.seqprover.exI"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r21" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.cut"/>
<org.eventb.core.prReas name="r16" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRL"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r17" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="Addition Homomorphism normal/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="x,y" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_internal" org.eventb.core.label="nAdd_internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd_internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_int_P" org.eventb.core.label="nAdd_int_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd_internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_hasSetBit" org.eventb.core.label="bn_hasSetBit" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=TRUE∨bn_hasSetBit(aT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isNormal" org.eventb.core.label="bn_isNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(as=(nil ⦂ List(BOOL))∧aB=TRUE)∨(as≠(nil ⦂ List(BOOL))∧bn_isNormal(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="bn_countBits(a)=bn_countBits(b)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_decrement" org.eventb.core.label="bn_decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,cons(FALSE,xT),COND(bn_isZero(xT),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(xT))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Add" org.eventb.core.label="bn_Add" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_nat_T" org.eventb.core.label="bn_nat_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL)·(x∈List(BOOL)∧bn_isNormal(x))∨¬x∈List(BOOL)∨¬bn_isNormal(x)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Or" org.eventb.core.label="bn_Or" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And" org.eventb.core.label="bn_And" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),bn_remTrailingZeros(cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And_P" org.eventb.core.label="bn_And_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL)×List(BOOL)×List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL),y⦂List(BOOL)·(x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))))∨¬x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∨¬y∈(bn_nat_T ⦂ ℙ(List(BOOL)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat2" org.eventb.core.label="bn_toNat2" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p2">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p3">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst x,y)" org.eventb.core.prHyps="p2">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p5">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toBin(x nAdd y),bn_toBin(x nAdd y))" org.eventb.core.prHyps="p3">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p6">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x = x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p4">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p6" org.eventb.core.prInfHyps="p7"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with ⊤⇔bn_toNat(bn_toBin(x nAdd y))=bn_toNat(bn_toBin(x nAdd y))" org.eventb.core.prHyps="p7">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p8"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (bn_toNat(bn_toBin(x nAdd y))=bn_toNat(bn_toBin(x nAdd y)))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p8"/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p8">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p7" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p9"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p10">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst x nAdd y)" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p11">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(bn_toBin(x nAdd y))=x nAdd y" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p13">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toBin(x nAdd y),bn_toBin(x) bn_Add bn_toBin(y))" org.eventb.core.prHyps="p13">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p13"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p15">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst x nAdd y)" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p16">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p17">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst x)" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p18">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst y)" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p19">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toBin(x),bn_toBin(y))" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p20">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ hyp mp (bn_isNormal(bn_toBin(x))∧bn_isNormal(bn_toBin(y))⇒bn_isNormal(bn_toBin(x) bn_Add bn_toBin(y)))" org.eventb.core.prHyps="p20">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p20"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ hyp mp (bn_isNormal(bn_toBin(x nAdd y))∧bn_isNormal(bn_toBin(x) bn_Add bn_toBin(y))⇒(bn_toBin(x nAdd y) bn_Eq bn_toBin(x) bn_Add bn_toBin(y)⇔bn_toBin(x nAdd y)=bn_toBin(x) bn_Add bn_toBin(y)))" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p16">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p23">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toBin(x),bn_toBin(y))" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p20">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ hyp mp (bn_isNormal(bn_toBin(x))∧bn_isNormal(bn_toBin(y))⇒bn_isNormal(bn_toBin(x) bn_Add bn_toBin(y)))" org.eventb.core.prHyps="p20">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p20"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p19,p18">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p25">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p24">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p20"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="p24"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p26">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with bn_toBin(x nAdd y) bn_Eq bn_toBin(x) bn_Add bn_toBin(y)⇔bn_toBin(x nAdd y)=bn_toBin(x) bn_Add bn_toBin(y)" org.eventb.core.prHyps="p26">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p1"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p5"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p19,p18">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p25">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="p5,p1" org.eventb.core.prInfHyps="p9"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p24">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p20"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ hyp mp (bn_isNormal(bn_toBin(x nAdd y))∧bn_isNormal(bn_toBin(x) bn_Add bn_toBin(y))⇒(bn_toBin(x nAdd y) bn_Eq bn_toBin(x) bn_Add bn_toBin(y)⇔bn_toBin(x nAdd y)=bn_toBin(x) bn_Add bn_toBin(y)))" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p16,p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p25">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p26">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p27" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p28"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·bn_isNormal(x)∧bn_isNormal(y)⇒bn_isNormal(x bn_Add y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e4"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isNormal(bn_toBin(x))"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e5,e6"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·bn_isNormal(x)∧bn_isNormal(y)⇒(x bn_Eq y⇔x=y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e4"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_toNat(bn_toBin(x))=x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p8"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="x bn_Eq x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e5,e5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3,e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x bn_Eq y⇔bn_toNat(x)=bn_toNat(y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·bn_toBin(x nAdd y) bn_Eq bn_toBin(x) bn_Add bn_toBin(y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="bn_isNormal(bn_toBin(x nAdd y))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="⊤∧⊤"/>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="bn_isNormal(bn_toBin(x))∧bn_isNormal(bn_toBin(y))⇒bn_isNormal(bn_toBin(x) bn_Add bn_toBin(y))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="bn_toNat(bn_toBin(x nAdd y))=x nAdd y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="bn_isNormal(bn_toBin(y))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_toBin(x nAdd y) bn_Eq bn_toBin(x) bn_Add bn_toBin(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="bn_toNat(bn_toBin(x nAdd y))=bn_toNat(bn_toBin(x nAdd y))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·bn_toBin(x nAdd y) bn_Eq bn_toBin(x) bn_Add bn_toBin(y)"/>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="bn_isNormal(bn_toBin(x))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="bn_isNormal(bn_toBin(x) bn_Add bn_toBin(y))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x bn_Eq y⇔bn_toNat(x)=bn_toNat(y)"/>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="bn_isNormal(bn_toBin(x))∧bn_isNormal(bn_toBin(y))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="bn_toBin(x nAdd y) bn_Eq bn_toBin(x) bn_Add bn_toBin(y)⇔bn_toBin(x nAdd y)=bn_toBin(x) bn_Add bn_toBin(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="⊤⇔⊤"/>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="bn_isNormal(bn_toBin(x nAdd y))∧bn_isNormal(bn_toBin(x) bn_Add bn_toBin(y))⇒(bn_toBin(x nAdd y) bn_Eq bn_toBin(x) bn_Add bn_toBin(y)⇔bn_toBin(x nAdd y)=bn_toBin(x) bn_Add bn_toBin(y))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="⊤⇔bn_toNat(bn_toBin(x nAdd y))=bn_toNat(bn_toBin(x nAdd y))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_toBin(x nAdd y) bn_Eq bn_toBin(x nAdd y)⇔bn_toNat(bn_toBin(x nAdd y))=bn_toNat(bn_toBin(x nAdd y))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="∀x⦂Nat·bn_isNormal(bn_toBin(x))"/>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="∀x⦂Nat·bn_toNat(bn_toBin(x))=x"/>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isNormal(x)∧bn_isNormal(y)⇒(x bn_Eq y⇔x=y)"/>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="⊤⇔⊥"/>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="⊤∧bn_isNormal(bn_toBin(x) bn_Add bn_toBin(y))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isNormal(x)∧bn_isNormal(y)⇒bn_isNormal(x bn_Add y)"/>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_toBin(x nAdd y)=bn_toBin(x) bn_Add bn_toBin(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="bn_isNormal(bn_toBin(x nAdd y))∧bn_isNormal(bn_toBin(x) bn_Add bn_toBin(y))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="x nAdd y=x nAdd y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·bn_toBin(x nAdd y)=bn_toBin(x) bn_Add bn_toBin(y)"/>
<org.eventb.core.prExpr name="e6" org.eventb.core.expression="bn_toBin(x) bn_Add bn_toBin(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="bn_toBin(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="bn_toBin(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="y">
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="x nAdd y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e5" org.eventb.core.expression="bn_toBin(x nAdd y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.cut"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.eqvLR"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.mngHyp"/>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.impE:2"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="Normal incrementOutsideAddition/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="p_tail,p_head,p_tail0,x,y,p_head0" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_internal" org.eventb.core.label="nAdd_internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd_internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_int_P" org.eventb.core.label="nAdd_int_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd_internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_hasSetBit" org.eventb.core.label="bn_hasSetBit" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=TRUE∨bn_hasSetBit(aT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isNormal" org.eventb.core.label="bn_isNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(as=(nil ⦂ List(BOOL))∧aB=TRUE)∨(as≠(nil ⦂ List(BOOL))∧bn_isNormal(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="bn_countBits(a)=bn_countBits(b)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_decrement" org.eventb.core.label="bn_decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,cons(FALSE,xT),COND(bn_isZero(xT),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(xT))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Add" org.eventb.core.label="bn_Add" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_nat_T" org.eventb.core.label="bn_nat_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL)·(x∈List(BOOL)∧bn_isNormal(x))∨¬x∈List(BOOL)∨¬bn_isNormal(x)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Or" org.eventb.core.label="bn_Or" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And" org.eventb.core.label="bn_And" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),bn_remTrailingZeros(cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And_P" org.eventb.core.label="bn_And_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL)×List(BOOL)×List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL),y⦂List(BOOL)·(x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))))∨¬x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∨¬y∈(bn_nat_T ⦂ ℙ(List(BOOL)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat2" org.eventb.core.label="bn_toNat2" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p2,p3">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_One expansion on goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p11" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p16">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p16">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p19">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_One expansion on goal" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNatural_T"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNatural_T.bn_One"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p23,p24">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head,p_tail)" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p23">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p26">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p26" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNatural_T"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNatural_T.bn_One"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p31,p32">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p31">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p33">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p33" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p16">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p16">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p36">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p32" org.eventb.core.prInfHyps="p35"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p2,p32"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p37">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(p_head,p_tail))" org.eventb.core.prHyps="p37">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p38">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p37"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with cons(p_head,p_tail) bn_Add nil=cons(p_head,p_tail)" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="p38">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p39">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p38"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p37"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_increment(p_tail))" org.eventb.core.prHyps="p37">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p40">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p37"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_increment(p_tail) bn_Add nil=bn_increment(p_tail)" org.eventb.core.prHyps="p40">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p35" org.eventb.core.prInfHyps="p41"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p35"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p40"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p39" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p37"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p43">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p44">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p44" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p45">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p46"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p25" org.eventb.core.prInfHyps="p47"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p31,p25"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(FALSE,bn_increment(p_tail)))" org.eventb.core.prHyps="p37">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p45">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p37"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p45" org.eventb.core.prHyps="p45"/>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p48">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="p48">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p49">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p49" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p51">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p48" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p50"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prHyps="p50">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p52"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p25" org.eventb.core.prInfHyps="p53"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p31,p25"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(TRUE,p_tail))" org.eventb.core.prHyps="p37">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p51">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p37"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p51" org.eventb.core.prHyps="p51"/>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p43"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e3"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·x bn_Add nil=x"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p54,p55">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p54">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p58">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p2" org.eventb.core.prInfHyps="p56"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p32" org.eventb.core.prInfHyps="p57"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p2,p32"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p43">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p58" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p60">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p55" org.eventb.core.prHyps="p43" org.eventb.core.prInfHyps="p59"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p60" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p62">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p59" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p61"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p62" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p64">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p46"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p25" org.eventb.core.prInfHyps="p47"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p61" org.eventb.core.prInfHyps="p63"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p31,p61,p25"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on cons(FALSE,bn_increment(p_tail)) bn_Add p_tail0=bn_increment(cons(TRUE,p_tail) bn_Add p_tail0)" org.eventb.core.prHyps="p63">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p65">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p63"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p65"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p65" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p66"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_LSB(p_tail0)=FALSE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p67">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p66" org.eventb.core.prHyps="p67" org.eventb.core.prInfHyps="p68"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p68" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p69"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0))=bn_increment(cons(TRUE,p_tail) bn_Add p_tail0)" org.eventb.core.prHyps="p69">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p70">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p69"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p70"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p70" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p71"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_LSB(p_tail0)=FALSE" org.eventb.core.prHyps="p67">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p71" org.eventb.core.prInfHyps="p72"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p71"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p72" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p73"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0))=bn_increment(cons(TRUE,p_tail bn_Add bn_shiftLeft1(p_tail0)))" org.eventb.core.prHyps="p73">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p74,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p73"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p74"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p74" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p75"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p64" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p76" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p76" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p77">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p77" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p78" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p78" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p79" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p79" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p80" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p80" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p81" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p81" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p82">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion on goal" org.eventb.core.prGoal="p82" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p83" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p83" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p84" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p84" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p85" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=FALSE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p86">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p85" org.eventb.core.prHyps="p86">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p87">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p87" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p88">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p88" org.eventb.core.prHyps="p86">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p92">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p54" org.eventb.core.prInfHyps="p89"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p56" org.eventb.core.prInfHyps="p90"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p57" org.eventb.core.prInfHyps="p91"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p57,p56,p54"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p92" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p93">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_increment expansion on goal" org.eventb.core.prGoal="p93" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p94" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p94" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p95">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p96">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p85" org.eventb.core.prHyps="p96">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p97">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p97" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p99">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p96" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p98"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p99" org.eventb.core.prHyps="p98">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p100">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p100" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p101">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prHyps="p98">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p54" org.eventb.core.prInfHyps="p102"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p56" org.eventb.core.prInfHyps="p103"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p57" org.eventb.core.prInfHyps="p104"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p57,p56,p54"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p86"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.1.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0.1.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p105">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p66" org.eventb.core.prHyps="p105" org.eventb.core.prInfHyps="p106"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p105" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p107"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p106" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p108"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p67"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p48">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p58" org.eventb.core.prHyps="p48">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p110">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p55" org.eventb.core.prHyps="p48" org.eventb.core.prInfHyps="p109"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p110" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p112">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p48" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p50"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p109" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p111"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p112" org.eventb.core.prHyps="p50">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p114">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p31" org.eventb.core.prInfHyps="p52"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p25" org.eventb.core.prInfHyps="p53"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p111" org.eventb.core.prInfHyps="p113"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p31,p111,p25"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p43"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="IncrementNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="IncrementNaturals.bn_increment case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="bn_increment(nil ⦂ List(BOOL)) bn_Add y=bn_increment((nil ⦂ List(BOOL)) bn_Add y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p92" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail) bn_Add p_tail0)=bn_increment(COND(FALSE=TRUE,cons(FALSE,bn_increment(p_tail bn_Add p_tail0)),cons(TRUE,p_tail bn_Add p_tail0)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="COND(p_head=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,bn_shiftLeft1(cons(p_head,p_tail))))=bn_increment(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="COND(bn_LSB(cons(p_head,p_tail))=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(cons(p_head,p_tail)))),cons(TRUE,bn_shiftLeft1(cons(p_head,p_tail))))=bn_increment(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p95" org.eventb.core.predicate="bn_increment(p_tail) bn_Add p_tail0=bn_increment(p_tail bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p91" org.eventb.core.predicate="bn_increment(p_tail) bn_Add cons(FALSE,p_tail0)=bn_increment(p_tail bn_Add cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p99" org.eventb.core.predicate="cons(TRUE,bn_increment(p_tail) bn_Add p_tail0)=bn_increment(COND(p_head0=TRUE,cons(FALSE,bn_increment(p_tail bn_Add p_tail0)),cons(TRUE,p_tail bn_Add p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="cons(p_head,p_tail) bn_Add (nil ⦂ List(BOOL))=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p88" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail) bn_Add p_tail0)=bn_increment(COND(p_head0=TRUE,cons(FALSE,bn_increment(p_tail bn_Add p_tail0)),cons(TRUE,p_tail bn_Add p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Add (nil ⦂ List(BOOL))=x"/>
<org.eventb.core.prPred name="p108" org.eventb.core.predicate="cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0))=bn_increment(cons(TRUE,p_tail) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="COND(TRUE=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment((nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y))),COND(¬TRUE=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y)),cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y))))=bn_increment((nil ⦂ List(BOOL)) bn_Add y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="cons(TRUE,bn_shiftLeft1(nil ⦂ List(BOOL)))=bn_increment(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_isNormal(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p76" org.eventb.core.predicate="COND(FALSE=TRUE∧bn_LSB(cons(p_head0,p_tail0))=TRUE,cons(FALSE,bn_increment(bn_increment(p_tail) bn_Add bn_shiftLeft1(cons(p_head0,p_tail0)))),COND(¬FALSE=TRUE∧¬bn_LSB(cons(p_head0,p_tail0))=TRUE,cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(cons(p_head0,p_tail0))),cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(cons(p_head0,p_tail0)))))=bn_increment(cons(TRUE,p_tail) bn_Add cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Add (nil ⦂ List(BOOL))=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="bn_increment(p_tail) bn_Add y=bn_increment(p_tail bn_Add y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p102" org.eventb.core.predicate="y=cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p60" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)) bn_Add cons(p_head0,p_tail0)=bn_increment(cons(p_head,p_tail) bn_Add cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail)) bn_Add (nil ⦂ List(BOOL))=cons(FALSE,bn_increment(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_isNormal(x)∧bn_isNormal(y)⇒bn_increment(x) bn_Add y=bn_increment(x bn_Add y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p75" org.eventb.core.predicate="bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0)=bn_increment(p_tail bn_Add bn_shiftLeft1(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="COND(p_head=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)) bn_Add p_tail0=bn_increment(cons(p_head,p_tail) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p70" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0))=bn_increment(COND(TRUE=TRUE∧bn_LSB(p_tail0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(p_tail0))),COND(¬TRUE=TRUE∧¬bn_LSB(p_tail0)=TRUE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(p_tail0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(p_tail0)))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_isNormal(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p110" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)) bn_Add cons(p_head0,p_tail0)=bn_increment(cons(p_head,p_tail) bn_Add cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p111" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Add p_tail0=bn_increment(cons(p_head,p_tail) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p79" org.eventb.core.predicate="COND(p_head0=FALSE,cons(FALSE,bn_increment(p_tail) bn_Add p_tail0),cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(cons(p_head0,p_tail0))))=bn_increment(cons(TRUE,p_tail) bn_Add cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p62" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail)) bn_Add cons(p_head0,p_tail0)=bn_increment(cons(p_head,p_tail) bn_Add cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p104" org.eventb.core.predicate="bn_increment(p_tail) bn_Add cons(TRUE,p_tail0)=bn_increment(p_tail bn_Add cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="COND(p_head=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)) bn_Add (nil ⦂ List(BOOL))=COND(p_head=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p112" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Add cons(p_head0,p_tail0)=bn_increment(cons(p_head,p_tail) bn_Add cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p105" org.eventb.core.predicate="¬bn_LSB(p_tail0)=FALSE">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="COND(p_head=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)) bn_Add (nil ⦂ List(BOOL))=bn_increment(cons(p_head,p_tail) bn_Add (nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p58" org.eventb.core.predicate="COND(p_head=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)) bn_Add cons(p_head0,p_tail0)=bn_increment(cons(p_head,p_tail) bn_Add cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p59" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)) bn_Add p_tail0=bn_increment(cons(p_head,p_tail) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(y))),cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y)))=bn_increment((nil ⦂ List(BOOL)) bn_Add y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p90" org.eventb.core.predicate="bn_isNormal(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p68" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0)),cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0)))=bn_increment(cons(TRUE,p_tail) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p86" org.eventb.core.predicate="p_head0=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="COND(bn_LSB(nil ⦂ List(BOOL))=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(nil ⦂ List(BOOL)))),cons(TRUE,bn_shiftLeft1(nil ⦂ List(BOOL))))=bn_increment(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p106" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0)),cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0)))=bn_increment(cons(TRUE,p_tail) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="bn_increment(cons(p_head,p_tail)) bn_Add y=bn_increment(cons(p_head,p_tail) bn_Add y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p98" org.eventb.core.predicate="p_head0=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="bn_increment(x) bn_Add y=bn_increment(x bn_Add y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p77" org.eventb.core.predicate="COND(bn_LSB(cons(p_head0,p_tail0))=FALSE,cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(cons(p_head0,p_tail0))),cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(cons(p_head0,p_tail0))))=bn_increment(cons(TRUE,p_tail) bn_Add cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p63" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail)) bn_Add p_tail0=bn_increment(cons(TRUE,p_tail) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p82" org.eventb.core.predicate="COND(p_head0=FALSE,cons(FALSE,bn_increment(p_tail) bn_Add p_tail0),cons(TRUE,bn_increment(p_tail) bn_Add p_tail0))=bn_increment(COND(bn_LSB(cons(p_head0,p_tail0))=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(cons(p_head0,p_tail0)))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(cons(p_head0,p_tail0)))))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="bn_isNormal(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="bn_increment(p_tail) bn_Add (nil ⦂ List(BOOL))=bn_increment(p_tail bn_Add (nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p89" org.eventb.core.predicate="y=cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p113" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Add p_tail0=bn_increment(cons(FALSE,p_tail) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p71" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0))=bn_increment(COND(bn_LSB(p_tail0)=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(p_tail0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(p_tail0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="x=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p85" org.eventb.core.predicate="COND(p_head0=FALSE,cons(FALSE,bn_increment(p_tail) bn_Add p_tail0),cons(TRUE,bn_increment(p_tail) bn_Add p_tail0))=bn_increment(COND(p_head0=TRUE,cons(FALSE,bn_increment(p_tail bn_Add p_tail0)),cons(TRUE,p_tail bn_Add p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p97" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(p_tail) bn_Add p_tail0),cons(TRUE,bn_increment(p_tail) bn_Add p_tail0))=bn_increment(COND(p_head0=TRUE,cons(FALSE,bn_increment(p_tail bn_Add p_tail0)),cons(TRUE,p_tail bn_Add p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="COND(p_head=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail))=bn_increment(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p84" org.eventb.core.predicate="COND(p_head0=FALSE,cons(FALSE,bn_increment(p_tail) bn_Add p_tail0),cons(TRUE,bn_increment(p_tail) bn_Add p_tail0))=bn_increment(COND(p_head0=TRUE,cons(FALSE,bn_increment(p_tail bn_Add p_tail0)),cons(TRUE,p_tail bn_Add bn_shiftLeft1(cons(p_head0,p_tail0)))))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p72" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0))=bn_increment(COND(FALSE=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(p_tail0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(p_tail0))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p114" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Add cons(p_head0,p_tail0)=bn_increment(cons(FALSE,p_tail) bn_Add cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="COND(p_head=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)) bn_Add y=bn_increment(cons(p_head,p_tail) bn_Add y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="cons(TRUE,nil ⦂ List(BOOL))=(bn_One ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p74" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0))=COND(TRUE=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(p_tail0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(p_tail0)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p107" org.eventb.core.predicate="bn_LSB(p_tail0)=TRUE">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="COND(bn_LSB(p_tail)=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(p_tail))),cons(TRUE,bn_shiftLeft1(p_tail)))=bn_increment(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)) bn_Add (nil ⦂ List(BOOL))=COND(⊤,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="cons(TRUE,nil ⦂ List(BOOL))=cons(TRUE,nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="COND(FALSE=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(nil ⦂ List(BOOL)))),cons(TRUE,bn_shiftLeft1(nil ⦂ List(BOOL))))=bn_increment(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p66" org.eventb.core.predicate="COND(bn_LSB(p_tail0)=FALSE,cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0)),cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0)))=bn_increment(cons(TRUE,p_tail) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p67" org.eventb.core.predicate="bn_LSB(p_tail0)=FALSE">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="bn_isNormal(cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p69" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0))=bn_increment(cons(TRUE,p_tail) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p94" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail) bn_Add p_tail0)=COND(TRUE=TRUE,cons(FALSE,bn_increment(p_tail bn_Add p_tail0)),cons(TRUE,p_tail bn_Add p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="COND(p_head=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail))=COND(p_head=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment((nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y))),cons(TRUE,(nil ⦂ List(BOOL)) bn_Add bn_shiftLeft1(y)))=bn_increment((nil ⦂ List(BOOL)) bn_Add y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="bn_increment(p_tail) bn_Add cons(p_head0,p_tail0)=bn_increment(p_tail bn_Add cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(y))),cons(TRUE,bn_shiftLeft1(y)))=bn_increment(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)) bn_Add (nil ⦂ List(BOOL))=COND(⊥,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="COND(p_head=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(cons(p_head,p_tail)))),cons(TRUE,bn_shiftLeft1(cons(p_head,p_tail))))=bn_increment(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="bn_increment(p_tail)=bn_increment(p_tail bn_Add (nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p80" org.eventb.core.predicate="COND(p_head0=FALSE,cons(FALSE,bn_increment(p_tail) bn_Add p_tail0),cons(TRUE,bn_increment(p_tail) bn_Add p_tail0))=bn_increment(cons(TRUE,p_tail) bn_Add cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p65" org.eventb.core.predicate="COND(FALSE=TRUE∧bn_LSB(p_tail0)=TRUE,cons(FALSE,bn_increment(bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0))),COND(¬FALSE=TRUE∧¬bn_LSB(p_tail0)=TRUE,cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0)),cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0))))=bn_increment(cons(TRUE,p_tail) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p61" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail)) bn_Add p_tail0=bn_increment(cons(p_head,p_tail) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p81" org.eventb.core.predicate="COND(p_head0=FALSE,cons(FALSE,bn_increment(p_tail) bn_Add p_tail0),cons(TRUE,bn_increment(p_tail) bn_Add p_tail0))=bn_increment(COND(TRUE=TRUE∧bn_LSB(cons(p_head0,p_tail0))=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(cons(p_head0,p_tail0)))),COND(¬TRUE=TRUE∧¬bn_LSB(cons(p_head0,p_tail0))=TRUE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(cons(p_head0,p_tail0))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(cons(p_head0,p_tail0))))))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p109" org.eventb.core.predicate="COND(⊥,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)) bn_Add p_tail0=bn_increment(cons(p_head,p_tail) bn_Add p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p64" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail)) bn_Add cons(p_head0,p_tail0)=bn_increment(cons(TRUE,p_tail) bn_Add cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p78" org.eventb.core.predicate="COND(p_head0=FALSE,cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(cons(p_head0,p_tail0))),cons(TRUE,bn_increment(p_tail) bn_Add bn_shiftLeft1(cons(p_head0,p_tail0))))=bn_increment(cons(TRUE,p_tail) bn_Add cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p96" org.eventb.core.predicate="¬p_head0=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="COND(p_head=TRUE,cons(FALSE,bn_increment(p_tail)),cons(TRUE,p_tail)) bn_Add (nil ⦂ List(BOOL))=bn_increment(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p87" org.eventb.core.predicate="COND(⊤,cons(FALSE,bn_increment(p_tail) bn_Add p_tail0),cons(TRUE,bn_increment(p_tail) bn_Add p_tail0))=bn_increment(COND(p_head0=TRUE,cons(FALSE,bn_increment(p_tail bn_Add p_tail0)),cons(TRUE,p_tail bn_Add p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="bn_isNormal(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p100" org.eventb.core.predicate="cons(TRUE,bn_increment(p_tail) bn_Add p_tail0)=bn_increment(COND(⊤,cons(FALSE,bn_increment(p_tail bn_Add p_tail0)),cons(TRUE,p_tail bn_Add p_tail0)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="bn_isNormal(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isNormal(x)∧bn_isNormal(y)⇒bn_increment(x) bn_Add y=bn_increment(x bn_Add y)"/>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="COND(bn_LSB(y)=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(y))),cons(TRUE,bn_shiftLeft1(y)))=bn_increment((nil ⦂ List(BOOL)) bn_Add y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="(bn_One ⦂ List(BOOL)) bn_Add y=bn_increment((nil ⦂ List(BOOL)) bn_Add y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="bn_increment(p_tail) bn_Add (nil ⦂ List(BOOL))=bn_increment(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="cons(TRUE,nil ⦂ List(BOOL))=bn_increment(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p73" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail) bn_Add bn_shiftLeft1(p_tail0))=bn_increment(cons(TRUE,p_tail bn_Add bn_shiftLeft1(p_tail0)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="y=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="cons(TRUE,nil ⦂ List(BOOL)) bn_Add y=bn_increment((nil ⦂ List(BOOL)) bn_Add y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p103" org.eventb.core.predicate="bn_isNormal(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p93" org.eventb.core.predicate="cons(FALSE,bn_increment(p_tail) bn_Add p_tail0)=bn_increment(cons(TRUE,p_tail bn_Add p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="bn_isNormal(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="y=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p101" org.eventb.core.predicate="cons(TRUE,bn_increment(p_tail) bn_Add p_tail0)=bn_increment(cons(FALSE,bn_increment(p_tail bn_Add p_tail0)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p83" org.eventb.core.predicate="COND(p_head0=FALSE,cons(FALSE,bn_increment(p_tail) bn_Add p_tail0),cons(TRUE,bn_increment(p_tail) bn_Add p_tail0))=bn_increment(COND(p_head0=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(cons(p_head0,p_tail0)))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(cons(p_head0,p_tail0)))))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="bn_increment(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="cons(FALSE,bn_increment(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.mngHyp"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="NormalIncrCorrally/S-THM" org.eventb.core.confidence="0" org.eventb.core.prFresh="p_tail,p_head,p_tail0,x,y,p_head0" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_internal" org.eventb.core.label="nAdd_internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd_internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_int_P" org.eventb.core.label="nAdd_int_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd_internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_hasSetBit" org.eventb.core.label="bn_hasSetBit" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=TRUE∨bn_hasSetBit(aT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isNormal" org.eventb.core.label="bn_isNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(as=(nil ⦂ List(BOOL))∧aB=TRUE)∨(as≠(nil ⦂ List(BOOL))∧bn_isNormal(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="bn_countBits(a)=bn_countBits(b)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_decrement" org.eventb.core.label="bn_decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,cons(FALSE,xT),COND(bn_isZero(xT),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(xT))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Add" org.eventb.core.label="bn_Add" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_nat_T" org.eventb.core.label="bn_nat_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL)·(x∈List(BOOL)∧bn_isNormal(x))∨¬x∈List(BOOL)∨¬bn_isNormal(x)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Or" org.eventb.core.label="bn_Or" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And" org.eventb.core.label="bn_And" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),bn_remTrailingZeros(cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And_P" org.eventb.core.label="bn_And_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL)×List(BOOL)×List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL),y⦂List(BOOL)·(x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))))∨¬x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∨¬y∈(bn_nat_T ⦂ ℙ(List(BOOL)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat2" org.eventb.core.label="bn_toNat2" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p3,p4,p5">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p7">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p7" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p8"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p9,p10">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="p9">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p11"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p4,p5"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p15" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p16">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE∧bn_LSB(bn_shiftLeft1(y))=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p17">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p17" org.eventb.core.prInfHyps="p18,p19"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="p17">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p20">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prHyps="p18">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p9" org.eventb.core.prInfHyps="p22"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p11" org.eventb.core.prInfHyps="p23"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p9,p11"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p24">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p28">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p26"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p19" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p3,p10,p19"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p26"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p29,p30">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p29">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p31"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p32"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p19" org.eventb.core.prInfHyps="p33"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p3,p10,p19"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p36">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p32" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p35"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in ¬(TRUE=p_head0∧p_tail bn_Add bn_shiftLeft1(cons(p_head0,p_tail0))=p_tail0)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p35" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p37"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in goal" org.eventb.core.prGoal="p36" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p38">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p38" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p38">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p37" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p39"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p38" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p41">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p39" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p40"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on goal" org.eventb.core.prGoal="p41" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on bn_LSB(bn_shiftLeft1(cons(p_head0,p_tail0)))=TRUE" org.eventb.core.prHyps="p33">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p43,p14">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p33"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p43"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion on ¬p_tail bn_Add bn_shiftLeft1(cons(p_head0,p_tail0))=p_tail0" org.eventb.core.prHyps="p40">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p14">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p14" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p14,p44">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p14"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p40"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p44"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p14"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0.1.0.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1.1.0.1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p45">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p16" org.eventb.core.prHyps="p45">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p46">
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p46" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p47">
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in ¬(p_head=TRUE∧bn_LSB(bn_shiftLeft1(y))=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p45" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p48"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p48"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p48" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p49"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p17"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="bn_isNormal(y)∧bn_isNormal(x)∧¬x=(nil ⦂ List(BOOL))⇒¬cons(TRUE,x bn_Add bn_shiftLeft1(y))=y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="p_head=TRUE∧bn_LSB(bn_shiftLeft1(y))=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="¬cons(TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(nil ⦂ List(BOOL))))))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="¬(p_head=TRUE∧bn_LSB(bn_shiftLeft1(y))=TRUE)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="¬(TRUE=p_head0∧cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(cons(p_head0,p_tail0)))))=p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="¬TRUE=p_head0∨¬p_tail bn_Add bn_shiftLeft1(cons(p_head0,p_tail0))=p_tail0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="¬p_tail bn_Add bn_shiftLeft1(cons(p_head0,p_tail0))=p_tail0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="¬cons(TRUE,COND(p_head=TRUE∧bn_LSB(bn_shiftLeft1(y))=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(y)))),COND(p_head=FALSE∧bn_LSB(bn_shiftLeft1(y))=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(y))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(y))))))=y">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="bn_LSB(p_tail0)=TRUE">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="¬cons(TRUE,cons(p_head,p_tail) bn_Add bn_shiftLeft1(y))=y">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="¬TRUE=p_head0∨¬cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(cons(p_head0,p_tail0)))))=p_tail0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="¬cons(TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(y)))))=y">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="¬⊤∨¬p_tail bn_Add bn_shiftLeft1(cons(p_head0,p_tail0))=p_tail0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="¬cons(TRUE,x bn_Add bn_shiftLeft1(y))=y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="bn_isNormal(cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="bn_isNormal(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="¬x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="p_head=FALSE∨bn_LSB(bn_shiftLeft1(y))=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="¬cons(TRUE,p_tail bn_Add bn_shiftLeft1(cons(p_head0,p_tail0)))=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isNormal(y)∧bn_isNormal(x)∧x≠(nil ⦂ List(BOOL))⇒cons(TRUE,x bn_Add bn_shiftLeft1(y))≠y"/>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="bn_LSB(bn_shiftLeft1(y))=TRUE">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="FALSE=p_head0∨¬cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(p_tail0)))=p_tail0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="¬cons(TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(p_tail0)))))=p_tail0">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="¬(TRUE=p_head0∧p_tail bn_Add bn_shiftLeft1(cons(p_head0,p_tail0))=p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="FALSE=p_head0∨¬cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(cons(p_head0,p_tail0)))))=p_tail0">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="bn_isNormal(x)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="¬p_head=TRUE∨¬bn_LSB(bn_shiftLeft1(y))=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="¬cons(TRUE,COND(⊤,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(y)))),COND(p_head=FALSE∧bn_LSB(bn_shiftLeft1(y))=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(y))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(y))))))=y">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="bn_LSB(bn_shiftLeft1(nil ⦂ List(BOOL)))=TRUE"/>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="¬cons(TRUE,p_tail bn_Add bn_shiftLeft1(nil ⦂ List(BOOL)))=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="¬cons(TRUE,COND(p_head=FALSE∧bn_LSB(bn_shiftLeft1(y))=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(y))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(y)))))=y">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="bn_isNormal(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="¬cons(TRUE,COND(⊥,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(y)))),COND(p_head=FALSE∧bn_LSB(bn_shiftLeft1(y))=FALSE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(y))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(y))))))=y">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_isNormal(y)∧bn_isNormal(x)∧x≠(nil ⦂ List(BOOL))⇒cons(TRUE,x bn_Add bn_shiftLeft1(y))≠y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="¬cons(TRUE,COND(p_head=TRUE∧bn_LSB(bn_shiftLeft1(y))=TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(y)))),COND(¬p_head=TRUE∧¬bn_LSB(bn_shiftLeft1(y))=TRUE,cons(FALSE,p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(y))),cons(TRUE,p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(y))))))=y">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="bn_LSB(bn_shiftLeft1(cons(p_head0,p_tail0)))=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="¬p_tail bn_Add p_tail0=p_tail0">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="y=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="¬cons(TRUE,p_tail bn_Add bn_shiftLeft1(y))=y">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="¬cons(TRUE,cons(FALSE,bn_increment(p_tail bn_Add bn_shiftLeft1(bn_shiftLeft1(cons(p_head0,p_tail0))))))=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="bn_isNormal(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="bn_isNormal(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="¬cons(p_head,p_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="x=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.rn"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="equivelenceMaitained/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,a,p_tail1,p_head,p_tail0,x,y,p_head1,p_head0" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_internal" org.eventb.core.label="nAdd_internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd_internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_int_P" org.eventb.core.label="nAdd_int_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd_internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_hasSetBit" org.eventb.core.label="bn_hasSetBit" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=TRUE∨bn_hasSetBit(aT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isNormal" org.eventb.core.label="bn_isNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(as=(nil ⦂ List(BOOL))∧aB=TRUE)∨(as≠(nil ⦂ List(BOOL))∧bn_isNormal(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="bn_countBits(a)=bn_countBits(b)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_decrement" org.eventb.core.label="bn_decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,cons(FALSE,xT),COND(bn_isZero(xT),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(xT))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Add" org.eventb.core.label="bn_Add" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_nat_T" org.eventb.core.label="bn_nat_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL)·(x∈List(BOOL)∧bn_isNormal(x))∨¬x∈List(BOOL)∨¬bn_isNormal(x)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Or" org.eventb.core.label="bn_Or" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And" org.eventb.core.label="bn_And" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And_P" org.eventb.core.label="bn_And_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL)×List(BOOL)×List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL),y⦂List(BOOL)·(x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))))∨¬x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∨¬y∈(bn_nat_T ⦂ ℙ(List(BOOL)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat2" org.eventb.core.label="bn_toNat2" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="rewrites equivalence in goal" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil Eq =&gt; isZero(x) on nil bn_Eq y" org.eventb.core.prHyps="p6">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p10">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p13">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p12"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p13" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p15,p16">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head,p_tail)" org.eventb.core.prGoal="p9" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p18">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p10" org.eventb.core.prInfHyps="p17"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p18" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p20">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="p20">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p21">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p22">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prHyps="p20">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p15" org.eventb.core.prInfHyps="p23"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p17" org.eventb.core.prInfHyps="p24"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p15,p17"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="isZero(cons(TRUE, x)) is False  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p24" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p24"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p25"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE, x) ≠ zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p26">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p19" org.eventb.core.prHyps="p26">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p27">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p29">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prHyps="p28">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p15" org.eventb.core.prInfHyps="p30"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p17" org.eventb.core.prInfHyps="p31"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p15,p17"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on bn_isZero(cons(FALSE,p_tail))" org.eventb.core.prHyps="p31">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p32,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p31"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p32"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p32" org.eventb.core.prInfHyps="p33,p34"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p32"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p33"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p35">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail)" org.eventb.core.prHyps="p35">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p36">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p35"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p36" org.eventb.core.prHyps="p34,p16" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p37"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p35"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail)" org.eventb.core.prHyps="p35">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p36">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p35"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eqv LR with bn_isZero(p_tail)⇔bn_toNat(p_tail)=zero" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p34" org.eventb.core.prInfHyps="p38"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p34"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p36" org.eventb.core.prHyps="p34,p16" org.eventb.core.prInfHyps="p37"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p38" org.eventb.core.prHyps="p16" org.eventb.core.prInfHyps="p8"/>
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with zero=bn_toNat(p_tail)" org.eventb.core.prGoal="p29" org.eventb.core.prHyps="p16">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p39">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 0 = 0  (auto rewrite)" org.eventb.core.prGoal="p39" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesZero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isZero(x)⇔bn_toNat(x)=zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p20"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil Eq ⇒ isZero(x)"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p40,p41">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p4" org.eventb.core.prHyps="p41">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p43">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p42"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p43" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p43" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p43" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p46">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p40" org.eventb.core.prInfHyps="p44"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p42" org.eventb.core.prInfHyps="p45"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p40,p42"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Eq nil =&gt; isZero(x) on cons(p_head,p_tail) bn_Eq nil" org.eventb.core.prHyps="p45">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p17,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p45"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p17"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(p_tail)=bn_toNat(nil)" org.eventb.core.prHyps="p44">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p38,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p44"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p38"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p46" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p47" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p35">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(p_head,p_tail))" org.eventb.core.prHyps="p35">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p48">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p35"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p47" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p47">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p48" org.eventb.core.prHyps="p17" org.eventb.core.prInfHyps="p49"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p49" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p25"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isZero(x)⇔bn_toNat(x)=zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Eq nil ⇒ isZero(x)"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p43" org.eventb.core.prHyps="p50,p51">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p43" org.eventb.core.prHyps="p51">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p54">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p40" org.eventb.core.prInfHyps="p52"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p42" org.eventb.core.prInfHyps="p53"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p40,p42"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(p_tail)=bn_toNat(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p52">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p55">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p52"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p55"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with bn_toNat(cons(p_head,p_tail))=bn_toNat(p_tail0)" org.eventb.core.prHyps="p50">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p55" org.eventb.core.prInfHyps="p56"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p55"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p57">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p55" org.eventb.core.prHyps="p57" org.eventb.core.prInfHyps="p58"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p56" org.eventb.core.prHyps="p57" org.eventb.core.prInfHyps="p59"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p58" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p60"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p59" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p61"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p54" org.eventb.core.prHyps="p57">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p64">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p51" org.eventb.core.prInfHyps="p62"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p53" org.eventb.core.prInfHyps="p63"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p53,p51"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(p_tail)=one nAdd (two nTimes bn_toNat(cons(p_head,p_tail)))" org.eventb.core.prHyps="p61">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p65">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p61"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p65"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (∃a·bn_toNat(p_tail)=a)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p66">
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="One Point Rule in goal" org.eventb.core.prGoal="p66" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p66">
<org.eventb.core.prRule name="r19" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ hyp (∃a·bn_toNat(p_tail)=a)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p66" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p67">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prHypAction>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p67"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(p_tail)=a" org.eventb.core.prHyps="p67">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p60" org.eventb.core.prInfHyps="p68"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p65" org.eventb.core.prInfHyps="p69"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p60,p65"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p67"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p20">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p65" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p70"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p69" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p71"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p70" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p72"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p71" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p73"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on a=one nAdd (two nTimes (one nAdd (two nTimes a)))" org.eventb.core.prHyps="p73">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p74">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p73"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p74"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on a=suc(zero) nAdd (two nTimes (one nAdd (two nTimes a)))" org.eventb.core.prHyps="p74">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p75,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p74"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p75"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification on a=suc(zero nAdd (two nTimes (one nAdd (two nTimes a))))" org.eventb.core.prHyps="p75">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p76">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p75"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p76"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * (y + z) = x * y + x * z on a=suc(two nTimes (one nAdd (two nTimes a)))" org.eventb.core.prHyps="p76">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p77">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p76"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p77"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 1 = x on a=suc((two nTimes one) nAdd (two nTimes (two nTimes a)))" org.eventb.core.prHyps="p77">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p78,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p77"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p78"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on a=suc(two nAdd (two nTimes (two nTimes a)))" org.eventb.core.prHyps="p78">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p79">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p78"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p79"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on a=suc(suc(suc(zero)) nAdd (two nTimes (two nTimes a)))" org.eventb.core.prHyps="p79">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p80,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p79"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p80"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on a=suc(suc(suc(zero) nAdd (two nTimes (two nTimes a))))" org.eventb.core.prHyps="p80">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p81,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p80"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p81"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification on a=suc(suc(suc(zero nAdd (two nTimes (two nTimes a)))))" org.eventb.core.prHyps="p81">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p82,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p81"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p82"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on a=suc(suc(suc(two nTimes (two nTimes a))))" org.eventb.core.prHyps="p82">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p83">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p82"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p83"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p84">
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (suc(suc(zero)) nTimes (two nTimes a)=(suc(suc(zero)) nTimes two) nTimes a)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p85">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p85" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p83" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p86"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p85">
<org.eventb.core.prRule name="r20" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p83" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p86"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p85" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p87"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Bracket Left on a=suc(suc(suc(suc(suc(zero)) nTimes two nTimes a)))" org.eventb.core.prHyps="p86">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p88">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p86"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p88"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="(1 + x) ∗ y = y + y * x on a=suc(suc(suc((suc(suc(zero)) nTimes two) nTimes a)))" org.eventb.core.prHyps="p88">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p89">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p88"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p89"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="suc(zero) = one on a=suc(suc(suc((two nAdd (suc(zero) nTimes two)) nTimes a)))" org.eventb.core.prHyps="p89">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p90">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p89"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p90"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="1 * x = x on a=suc(suc(suc((two nAdd (one nTimes two)) nTimes a)))" org.eventb.core.prHyps="p90">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p91,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p90"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p91"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on a=suc(suc(suc((two nAdd two) nTimes a)))" org.eventb.core.prHyps="p91">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p92">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p91"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p92"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on a=suc(suc(suc((suc(suc(zero)) nAdd two) nTimes a)))" org.eventb.core.prHyps="p92">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p93">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p92"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p93"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on a=suc(suc(suc(suc(suc(zero) nAdd two) nTimes a)))" org.eventb.core.prHyps="p93">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p94">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p93"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p94"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification on a=suc(suc(suc(suc(suc(zero nAdd two)) nTimes a)))" org.eventb.core.prHyps="p94">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p95,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p94"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p95"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Suc To Add One x on left on a=suc(suc(suc(suc(suc(two)) nTimes a)))" org.eventb.core.prHyps="p95">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p96,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p95"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p96"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p87"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on a=suc(suc(suc(suc(two)) nTimes a)) nAdd suc(zero)" org.eventb.core.prHyps="p96">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p97">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p96"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p97"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucIntoAdditionRight on a=suc(suc(suc(suc(two)) nTimes a) nAdd suc(zero))" org.eventb.core.prHyps="p97">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p98,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p97"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p98"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on a=suc(suc(suc(two)) nTimes a) nAdd suc(suc(zero))" org.eventb.core.prHyps="p98">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p99,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p98"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p99"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucIntoAdditionRight on a=suc((suc(suc(two)) nTimes a) nAdd suc(suc(zero)))" org.eventb.core.prHyps="p99">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p100,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p99"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p100"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="(1 + x) ∗ y = y + y * x on a=(suc(suc(two)) nTimes a) nAdd suc(suc(suc(zero)))" org.eventb.core.prHyps="p100">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p101,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p100"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p101"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p101" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p102"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="AssociativeRight on a=a nAdd (suc(two) nTimes a) nAdd suc(suc(suc(zero)))" org.eventb.core.prHyps="p102">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p103">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p102"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p103"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p104">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst a,(suc(two) nTimes a) nAdd suc(suc(suc(zero))))" org.eventb.core.prHyps="p104">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p105">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p104"/>
<org.eventb.core.prRule name="r21" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ hyp mp (a=a nAdd ((suc(two) nTimes a) nAdd suc(suc(suc(zero))))⇒(suc(two) nTimes a) nAdd suc(suc(suc(zero)))=zero)" org.eventb.core.prHyps="p105">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p103">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p105"/>
<org.eventb.core.prRule name="r22" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p103" org.eventb.core.prHyps="p103"/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p106">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p105"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on (suc(two) nTimes a) nAdd suc(suc(suc(zero)))=zero" org.eventb.core.prHyps="p106">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p107">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p106"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p107"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p103" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p102"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p107" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p25"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucRight"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2,e3"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x=x nAdd y⇒y=zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="AssociativeLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="T(1 + x) ∗ y"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucIntoAddition2"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucIntoAddition2"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucToAddLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0.0.0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0.0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0.0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TOneTimes"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0.0.0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="suc(zero) = one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0.0.0.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="T(1 + x) ∗ y"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TAssocLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p85"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="natPow_P∈AssocOp(Nat)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesOne"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Tx ∗ (y + z)"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p26">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p65" org.eventb.core.prHyps="p26" org.eventb.core.prInfHyps="p108"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p69" org.eventb.core.prHyps="p26" org.eventb.core.prInfHyps="p109"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p108" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p110"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p109" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p111"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with a=one nAdd (two nTimes bn_toNat(p_tail0))" org.eventb.core.prHyps="p68">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p111" org.eventb.core.prInfHyps="p112"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p111"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p64" org.eventb.core.prHyps="p28">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p116">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p41" org.eventb.core.prInfHyps="p113"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p50" org.eventb.core.prInfHyps="p114"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p63" org.eventb.core.prInfHyps="p115"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p41,p50,p63"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Subtract $1 from Both sides on one nAdd (two nTimes bn_toNat(p_tail0))=one nAdd (two nTimes two nTimes (one nAdd (two nTimes bn_toNat(p_tail0))))" org.eventb.core.prHyps="p112">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p117,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p112"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p117"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Bracket Right on two nTimes bn_toNat(p_tail0)=two nTimes two nTimes (one nAdd (two nTimes bn_toNat(p_tail0)))" org.eventb.core.prHyps="p117">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p118,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p117"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p118"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p118" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p117"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Strip Cons on cons(FALSE,p_tail) bn_Eq cons(TRUE,p_tail0)" org.eventb.core.prHyps="p115">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p119,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p115"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p119"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p119" org.eventb.core.prInfHyps="p120,p121"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p119"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p120" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p25"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Strip Cons"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TAssocRight"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="x nAdd y = x nAdd z"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p20"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p66"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p122">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p55" org.eventb.core.prHyps="p122" org.eventb.core.prInfHyps="p123"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p56" org.eventb.core.prHyps="p122" org.eventb.core.prInfHyps="p124"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p122" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p125"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p123" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p126"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p124" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p127"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p54" org.eventb.core.prHyps="p125">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p130">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p51" org.eventb.core.prInfHyps="p128"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p53" org.eventb.core.prInfHyps="p129"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p53,p51"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Strip Cons on cons(p_head,p_tail) bn_Eq cons(FALSE,p_tail0)" org.eventb.core.prHyps="p129">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p131">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p129"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p131"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="TRUE AND x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p131" org.eventb.core.prInfHyps="p28,p121"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p131"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p130" org.eventb.core.prHyps="p28">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p133">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p41" org.eventb.core.prInfHyps="p113"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p50" org.eventb.core.prInfHyps="p114"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p127" org.eventb.core.prInfHyps="p132"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p41,p50,p127"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(cons(FALSE,p_tail))=bn_toNat(p_tail0)" org.eventb.core.prHyps="p114">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p134,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p114"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p134"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p134" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p135"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(p_tail)=two nTimes bn_toNat(cons(FALSE,p_tail))" org.eventb.core.prHyps="p132">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p136">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p132"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p136"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p136" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p137"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Bracket Left on bn_toNat(p_tail)=two nTimes two nTimes bn_toNat(p_tail)" org.eventb.core.prHyps="p137">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p138">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p137"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p138"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (bn_toNat(p_tail)=one nTimes bn_toNat(p_tail))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p139">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="1 * x = x on goal" org.eventb.core.prGoal="p139" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p140" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p140" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p138" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p137"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TOneTimes"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p139">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="1 * x = x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p139" org.eventb.core.prInfHyps="p140"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p139"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p138" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p137"/>
<org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p140"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(p_tail)=two nTimes bn_toNat(p_tail0)" org.eventb.core.prHyps="p126">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p135" org.eventb.core.prInfHyps="p141"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p135"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Bracket Left on two nTimes two nTimes bn_toNat(p_tail0)=bn_toNat(p_tail0)" org.eventb.core.prHyps="p141">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p142">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p141"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p142"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p143">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_toNat(p_tail0)=zero)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p144">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(p_tail0)=zero" org.eventb.core.prHyps="p144">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p126" org.eventb.core.prInfHyps="p145"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p142" org.eventb.core.prInfHyps="p146"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p126,p142"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 0 = 0 on bn_toNat(p_tail)=two nTimes zero" org.eventb.core.prHyps="p145">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p38,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p145"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p38"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p133" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p147" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p147" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p149">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p142" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p141"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p143" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p148"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p149" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p150" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p150" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p151">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(p_tail)=zero" org.eventb.core.prGoal="p151" org.eventb.core.prHyps="p38">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p152">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(p_tail0)=zero" org.eventb.core.prGoal="p152" org.eventb.core.prHyps="p144">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p153">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 0 = 0 on goal" org.eventb.core.prGoal="p153" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p39" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 0 = 0 on goal" org.eventb.core.prGoal="p39" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion (exp. def.)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p148" org.eventb.core.prInfHyps="p154"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p148"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion (exp. def.)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p126" org.eventb.core.prInfHyps="p155"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p126"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p127" org.eventb.core.prInfHyps="p156"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p127"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p135" org.eventb.core.prInfHyps="p157"/>
<org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p135"/>
<org.eventb.core.prHypAction name="FORWARD_INF6" org.eventb.core.prHyps="p146" org.eventb.core.prInfHyps="p158"/>
<org.eventb.core.prHypAction name="HIDE7" org.eventb.core.prHyps="p146"/>
<org.eventb.core.prHypAction name="SELECT8" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nTimes expansion (exp. def.)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p154" org.eventb.core.prInfHyps="p159"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p154"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p155" org.eventb.core.prInfHyps="p160"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p155"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p156" org.eventb.core.prInfHyps="p161"/>
<org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p156"/>
<org.eventb.core.prHypAction name="FORWARD_INF6" org.eventb.core.prHyps="p157" org.eventb.core.prInfHyps="p162"/>
<org.eventb.core.prHypAction name="HIDE7" org.eventb.core.prHyps="p157"/>
<org.eventb.core.prHypAction name="SELECT8" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion (exp. def.)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p50" org.eventb.core.prInfHyps="p163"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p50"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p161" org.eventb.core.prInfHyps="p164"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p161"/>
<org.eventb.core.prHypAction name="SELECT4" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq expansion (exp. def.)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p3" org.eventb.core.prInfHyps="p165,p166"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p3"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p42" org.eventb.core.prInfHyps="p167,p168"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p42"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p53" org.eventb.core.prInfHyps="p169,p170"/>
<org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p53"/>
<org.eventb.core.prHypAction name="FORWARD_INF6" org.eventb.core.prHyps="p121" org.eventb.core.prInfHyps="p171,p172"/>
<org.eventb.core.prHypAction name="HIDE7" org.eventb.core.prHyps="p121"/>
<org.eventb.core.prHypAction name="SELECT8" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion (exp. def.)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p173" org.eventb.core.prInfHyps="p174"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p173"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p175" org.eventb.core.prInfHyps="p176"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p175"/>
<org.eventb.core.prHypAction name="SELECT4" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="natPow expansion (exp. def.)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p159" org.eventb.core.prInfHyps="p177"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p159"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p160" org.eventb.core.prInfHyps="p178"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p160"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p162" org.eventb.core.prInfHyps="p179"/>
<org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p162"/>
<org.eventb.core.prHypAction name="FORWARD_INF6" org.eventb.core.prHyps="p176" org.eventb.core.prInfHyps="p180"/>
<org.eventb.core.prHypAction name="HIDE7" org.eventb.core.prHyps="p176"/>
<org.eventb.core.prHypAction name="SELECT8" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nTimes expansion (exp. def.)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p174" org.eventb.core.prInfHyps="p181"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p174"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p180" org.eventb.core.prInfHyps="p182"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p180"/>
<org.eventb.core.prHypAction name="SELECT4" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_countBits expansion (exp. def.)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p167" org.eventb.core.prInfHyps="p183"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p167"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p169" org.eventb.core.prInfHyps="p184"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p169"/>
<org.eventb.core.prHypAction name="SELECT4" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Eq_Equal_length expansion (exp. def.)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p168" org.eventb.core.prInfHyps="p185,p186"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p168"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p170" org.eventb.core.prInfHyps="p187,p188"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p170"/>
<org.eventb.core.prHypAction name="SELECT4" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nAdd_P expansion (exp. def.)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p177" org.eventb.core.prInfHyps="p189"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p177"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p178" org.eventb.core.prInfHyps="p190"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p178"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p179" org.eventb.core.prInfHyps="p191"/>
<org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p179"/>
<org.eventb.core.prHypAction name="FORWARD_INF6" org.eventb.core.prHyps="p182" org.eventb.core.prInfHyps="p192"/>
<org.eventb.core.prHypAction name="HIDE7" org.eventb.core.prHyps="p182"/>
<org.eventb.core.prHypAction name="SELECT8" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="natPow expansion (exp. def.)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p181" org.eventb.core.prInfHyps="p193"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p181"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p192" org.eventb.core.prInfHyps="p194"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p192"/>
<org.eventb.core.prHypAction name="SELECT4" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_LSB expansion (exp. def.)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p187" org.eventb.core.prInfHyps="p195"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p187"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r23" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_shiftLeft1 expansion (exp. def.)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p188" org.eventb.core.prInfHyps="p196"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p188"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p183" org.eventb.core.prHyps="p28" org.eventb.core.prInfHyps="p197"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p184" org.eventb.core.prHyps="p28,p125" org.eventb.core.prInfHyps="p198"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p196" org.eventb.core.prHyps="p172" org.eventb.core.prInfHyps="p199"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p14" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p197" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p200"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p198" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p201"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p199"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_shiftLeft1 case 1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_LSB case 1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="MonoidPOW"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="MonoidPOW.natPow"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.nAdd_P"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq_Equal_length case 1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_countBits case 1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NaturalsMultiply.nTimes"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="MonoidPOW"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="MonoidPOW.natPow"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryEquality.bn_Eq"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NaturalsMultiply.nTimes"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesZero"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesZero"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesZero"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p202">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Commutative Swap on (two nTimes two) nTimes bn_toNat(p_tail0)=bn_toNat(p_tail0)" org.eventb.core.prHyps="p142">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p203">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p142"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p203"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toNat(p_tail0),two nTimes two)" org.eventb.core.prHyps="p143">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p204">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p143"/>
<org.eventb.core.prRule name="r21" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ hyp mp (bn_toNat(p_tail0)≠zero⇒(bn_toNat(p_tail0)=bn_toNat(p_tail0) nTimes (two nTimes two)⇒one=two nTimes two))" org.eventb.core.prHyps="p204">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p205">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p204"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p205" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p202">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p143" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p148"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p203" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p206"/>
<org.eventb.core.prRule name="r22" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p202" org.eventb.core.prHyps="p202"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p207">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p204"/>
<org.eventb.core.prRule name="r21" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ hyp mp (bn_toNat(p_tail0)=bn_toNat(p_tail0) nTimes (two nTimes two)⇒one=two nTimes two)" org.eventb.core.prHyps="p207">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p208">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p207"/>
<org.eventb.core.prRule name="r22" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p208" org.eventb.core.prHyps="p203"/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p209">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p207"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on one=two nTimes two" org.eventb.core.prHyps="p209">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p210,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p209"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p210"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p143" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p148"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p203" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p206"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="(1 + x) ∗ y = y + y * x on one=suc(suc(zero)) nTimes two" org.eventb.core.prHyps="p210">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p211">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p210"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p211"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on one=two nAdd (suc(zero) nTimes two)" org.eventb.core.prHyps="p211">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p212,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p211"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p212"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on one=suc(suc(zero)) nAdd (suc(zero) nTimes two)" org.eventb.core.prHyps="p212">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p213">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p212"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p213"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on one=suc(suc(zero) nAdd (suc(zero) nTimes two))" org.eventb.core.prHyps="p213">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p214,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p213"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p214"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p214" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p215"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on zero=suc(zero) nAdd (suc(zero) nTimes two)" org.eventb.core.prHyps="p215">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p216,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p215"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p216"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p216" org.eventb.core.prInfHyps="p217"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p216"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p217" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p25"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="T(1 + x) ∗ y"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e4,e5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TCommutative"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p144"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x≠zero⇒(x=x nTimes y⇒one=y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TAssocLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TOneTimes"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p139"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TAssocLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BOOL"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TRUE_AND"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Strip Cons"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p57"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p218">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ goal" org.eventb.core.prGoal="p218" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p4">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p7"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil Eq =&gt; isZero(x) on goal" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(nil)=bn_toNat(y)" org.eventb.core.prHyps="p7">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p9">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p7"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p12">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p9" org.eventb.core.prInfHyps="p13"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="nil is zero  (auto rewrite)" org.eventb.core.prGoal="p12" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p8" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil is zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p15,p34">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head,p_tail)" org.eventb.core.prGoal="p10" org.eventb.core.prHyps="p15">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p9" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p9"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on zero=bn_toNat(cons(p_head,p_tail))" org.eventb.core.prHyps="p18">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p19">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p18"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p19"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p20">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p19" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p21"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p21" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p22"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p20">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p24">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p15" org.eventb.core.prInfHyps="p23"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="isZero(cons(TRUE, x)) is False  (auto rewrite)" org.eventb.core.prGoal="p24" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on zero=one nAdd (two nTimes bn_toNat(p_tail))" org.eventb.core.prHyps="p22">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p219,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p22"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p219"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on zero=suc(zero) nAdd (two nTimes bn_toNat(p_tail))" org.eventb.core.prHyps="p219">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p220,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p219"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p220"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p220" org.eventb.core.prInfHyps="p221"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p220"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p221" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p25"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE, x) ≠ zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p26">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p19" org.eventb.core.prHyps="p26" org.eventb.core.prInfHyps="p27"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p27" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p29"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p28">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p31">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p15" org.eventb.core.prInfHyps="p30"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p15"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p34">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p222">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p222" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p20"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="nil Eq ⇒ isZero(x)"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p41,p223">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head,p_tail)" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="p41">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p42">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p43"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(cons(p_head,p_tail))=bn_toNat(y)" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p224,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p43"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p224"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p20">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p224" org.eventb.core.prHyps="p20" org.eventb.core.prInfHyps="p225"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p225" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p226"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="p20">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p228">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p41" org.eventb.core.prInfHyps="p227"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p41"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p228" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p228" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p228" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p231">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p223" org.eventb.core.prInfHyps="p229"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p226" org.eventb.core.prInfHyps="p230"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p226,p223"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on one nAdd (two nTimes bn_toNat(p_tail))=bn_toNat(nil)" org.eventb.core.prHyps="p230">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p232">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p230"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p232"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on one nAdd (two nTimes bn_toNat(p_tail))=zero" org.eventb.core.prHyps="p232">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p233,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p232"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p233"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on suc(zero) nAdd (two nTimes bn_toNat(p_tail))=zero" org.eventb.core.prHyps="p233">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p234,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p233"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p234"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p234" org.eventb.core.prInfHyps="p235"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p234"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p235" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p25"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p228" org.eventb.core.prHyps="p51,p236">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p228" org.eventb.core.prHyps="p51">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p239">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p223" org.eventb.core.prInfHyps="p237"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p226" org.eventb.core.prInfHyps="p238"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p226,p223"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on one nAdd (two nTimes bn_toNat(p_tail))=bn_toNat(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p238">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p240">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p238"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p240"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p57">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p240" org.eventb.core.prHyps="p57" org.eventb.core.prInfHyps="p241"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p241" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p242"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p239" org.eventb.core.prHyps="p57">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p244">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p51" org.eventb.core.prInfHyps="p62"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p237" org.eventb.core.prInfHyps="p243"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p237,p51"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Subtract $1 from Both sides on one nAdd (two nTimes bn_toNat(p_tail))=one nAdd (two nTimes bn_toNat(p_tail0))" org.eventb.core.prHyps="p242">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p151,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p242"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p151"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * y = x * z =&gt; y = z on two nTimes bn_toNat(p_tail)=two nTimes bn_toNat(p_tail0)" org.eventb.core.prHyps="p151">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p245,p246">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p246"/>
<org.eventb.core.prHypAction name="HIDE2" org.eventb.core.prHyps="p151"/>
<org.eventb.core.prHypAction name="SELECT3" org.eventb.core.prHyps="p245"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p246" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p247"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remZerosToEquality on p_tail bn_Eq cons(TRUE,p_tail0)" org.eventb.core.prHyps="p243">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p248">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p243"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p248"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remZerosToEquality on cons(TRUE,p_tail) bn_Eq p_tail0" org.eventb.core.prHyps="p236">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p249,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p236"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p249"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(TRUE,p_tail))=bn_remTrailingZeros(p_tail0)" org.eventb.core.prHyps="p249">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p250,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p249"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p250"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p250" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p251"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_remTrailingZeros(p_tail)=bn_remTrailingZeros(cons(TRUE,p_tail0))" org.eventb.core.prHyps="p248">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p251" org.eventb.core.prInfHyps="p252"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p251"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0)))=bn_remTrailingZeros(p_tail0)" org.eventb.core.prHyps="p252">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p253">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p252"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p253"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p253" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p254"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p255">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p255" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p256"/>
<org.eventb.core.prRule name="r20" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p256" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p257"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p257" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p258"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0))),bn_remTrailingZeros(p_tail0))" org.eventb.core.prHyps="p258">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p259">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p258"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p259" org.eventb.core.prHyps="p254" org.eventb.core.prInfHyps="p260"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p260" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p261"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="length expansion on length(cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0))))=length(bn_remTrailingZeros(p_tail0))" org.eventb.core.prHyps="p261">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p262">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p261"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p262"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="length expansion on 1+length(cons(TRUE,bn_remTrailingZeros(p_tail0)))=length(bn_remTrailingZeros(p_tail0))" org.eventb.core.prHyps="p262">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p263">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p262"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p263"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p263" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p264"/>
<org.eventb.core.prRule name="r24" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="arithmetic simplification in hyp (1+1+length(bn_remTrailingZeros(p_tail0))=length(bn_remTrailingZeros(p_tail0)))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p264" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p265"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p265"/>
<org.eventb.core.prRule name="r25" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ML" org.eventb.core.prGoal="p244" org.eventb.core.prHyps="p223,p258,p20,p265,p57,p41,p51,p237,p254,p251,p4,p247,p226,p62,p245,p227,p248">
<org.eventb.core.prString name=".arg" org.eventb.core.prSValue="0;1:500"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="ListTheory"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="_AuxiliaryDefinitions"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="_AuxiliaryDefinitions.length case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="ListTheory"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="_AuxiliaryDefinitions"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="_AuxiliaryDefinitions.length case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e6,e7"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x∈List(BOOL)⇒(length(x)≠length(y)⇒x≠y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="remZerosToEquality"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="remZerosToEquality"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p8,p266">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8,p266"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p266" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p267"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remZerosToEquality on p_tail bn_Eq cons(TRUE,p_tail0)" org.eventb.core.prHyps="p243">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p248">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p243"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p248"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remZerosToEquality on cons(TRUE,p_tail) bn_Eq p_tail0" org.eventb.core.prHyps="p236">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p249,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p236"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p249"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(TRUE,p_tail))=bn_remTrailingZeros(p_tail0)" org.eventb.core.prHyps="p249">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p250,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p249"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p250"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p250" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p251"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_remTrailingZeros(p_tail)=bn_remTrailingZeros(cons(TRUE,p_tail0))" org.eventb.core.prHyps="p248">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p251" org.eventb.core.prInfHyps="p252"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p251"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0)))=bn_remTrailingZeros(p_tail0)" org.eventb.core.prHyps="p252">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p253">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p252"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p253"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p253" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p254"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p255">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p255" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p256"/>
<org.eventb.core.prRule name="r20" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p256" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p257"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p257" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p258"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0))),bn_remTrailingZeros(p_tail0))" org.eventb.core.prHyps="p258">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p259">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p258"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p259" org.eventb.core.prHyps="p254" org.eventb.core.prInfHyps="p260"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p260" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p261"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="length expansion on length(cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0))))=length(bn_remTrailingZeros(p_tail0))" org.eventb.core.prHyps="p261">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p262">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p261"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p262"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="length expansion on 1+length(cons(TRUE,bn_remTrailingZeros(p_tail0)))=length(bn_remTrailingZeros(p_tail0))" org.eventb.core.prHyps="p262">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p263">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p262"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p263"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p263" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p264"/>
<org.eventb.core.prRule name="r24" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="arithmetic simplification in hyp (1+1+length(bn_remTrailingZeros(p_tail0))=length(bn_remTrailingZeros(p_tail0)))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p264" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p265"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p265"/>
<org.eventb.core.prRule name="r25" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ML" org.eventb.core.prGoal="p244" org.eventb.core.prHyps="p223,p258,p20,p265,p57,p41,p51,p267,p237,p151,p254,p251,p4,p226,p62,p227,p248">
<org.eventb.core.prString name=".arg" org.eventb.core.prSValue="0;1:500"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="ListTheory"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="_AuxiliaryDefinitions"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="_AuxiliaryDefinitions.length case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="ListTheory"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="_AuxiliaryDefinitions"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="_AuxiliaryDefinitions.length case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e6,e7"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x∈List(BOOL)⇒(length(x)≠length(y)⇒x≠y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="remZerosToEquality"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="remZerosToEquality"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TDivideThrough"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="x nAdd y = x nAdd z"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p122">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p240" org.eventb.core.prHyps="p122" org.eventb.core.prInfHyps="p268"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p122" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p125"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p268" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p269"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p239" org.eventb.core.prHyps="p125">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p271">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p51" org.eventb.core.prInfHyps="p128"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p237" org.eventb.core.prInfHyps="p270"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p237,p51"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="cons(TRUE ≠ cons(FALSE  (auto rewrite)" org.eventb.core.prGoal="p271" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remZerosToEquality on cons(TRUE,p_tail) bn_Eq p_tail0" org.eventb.core.prHyps="p236">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p249,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p236"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p249"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remZerosToEquality on p_tail bn_Eq cons(FALSE,p_tail0)" org.eventb.core.prHyps="p270">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p272,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p270"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p272"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(TRUE,p_tail))=bn_remTrailingZeros(p_tail0)" org.eventb.core.prHyps="p249">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p250,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p249"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p250"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p250" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p251"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_remTrailingZeros(p_tail)=bn_remTrailingZeros(cons(FALSE,p_tail0))" org.eventb.core.prHyps="p272">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p251" org.eventb.core.prInfHyps="p273"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p251"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on cons(TRUE,bn_remTrailingZeros(cons(FALSE,p_tail0)))=bn_remTrailingZeros(p_tail0)" org.eventb.core.prHyps="p273">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p274">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p273"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p274"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p274" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p275"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (¬bn_isZero(p_tail0))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p276">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p275" org.eventb.core.prHyps="p276" org.eventb.core.prInfHyps="p277"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p277" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p278"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p255">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p255" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p256"/>
<org.eventb.core.prRule name="r20" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p256" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p257"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p257" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p258"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(TRUE,cons(FALSE,bn_remTrailingZeros(p_tail0))),bn_remTrailingZeros(p_tail0))" org.eventb.core.prHyps="p258">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p279">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p258"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p279" org.eventb.core.prHyps="p278" org.eventb.core.prInfHyps="p280"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p280" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p281"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="length expansion on length(cons(TRUE,cons(FALSE,bn_remTrailingZeros(p_tail0))))=length(bn_remTrailingZeros(p_tail0))" org.eventb.core.prHyps="p281">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p282">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p281"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p282"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="length expansion on 1+length(cons(FALSE,bn_remTrailingZeros(p_tail0)))=length(bn_remTrailingZeros(p_tail0))" org.eventb.core.prHyps="p282">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p263">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p282"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p263"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p263" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p264"/>
<org.eventb.core.prRule name="r24" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="arithmetic simplification in hyp (1+1+length(bn_remTrailingZeros(p_tail0))=length(bn_remTrailingZeros(p_tail0)))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p264" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p265"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p265"/>
<org.eventb.core.prRule name="r25" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ML" org.eventb.core.prGoal="p25" org.eventb.core.prHyps="p223,p276,p258,p20,p265,p41,p272,p51,p269,p237,p251,p4,p226,p128,p278,p125,p227">
<org.eventb.core.prString name=".arg" org.eventb.core.prSValue="0;1:500"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="ListTheory"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="_AuxiliaryDefinitions"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="_AuxiliaryDefinitions.length case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="ListTheory"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="_AuxiliaryDefinitions"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="_AuxiliaryDefinitions.length case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e8,e7"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x∈List(BOOL)⇒(length(x)≠length(y)⇒x≠y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p283">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p275" org.eventb.core.prHyps="p283" org.eventb.core.prInfHyps="p284"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p284" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p285"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p286">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail0)" org.eventb.core.prHyps="p286">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p287">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p286"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p287" org.eventb.core.prHyps="p283" org.eventb.core.prInfHyps="p288"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p288" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p289"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_remTrailingZeros(p_tail0)=nil" org.eventb.core.prHyps="p289">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p285" org.eventb.core.prInfHyps="p290"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p285"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p290" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p25"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e9"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isZero(x)⇔bn_remTrailingZeros(x)=nil"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p276"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="remZerosToEquality"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="remZerosToEquality"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="cons(TRUE ≠ cons(FALSE"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p57"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p26">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p224" org.eventb.core.prHyps="p26" org.eventb.core.prInfHyps="p291"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p26" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p28"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p291" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p292"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prGoal="p42" org.eventb.core.prHyps="p28">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p293">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p41" org.eventb.core.prInfHyps="p113"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p41"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p293" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p293" org.eventb.core.prHyps="p11">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p293" org.eventb.core.prHyps="p11">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p295">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p223" org.eventb.core.prInfHyps="p229"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p292" org.eventb.core.prInfHyps="p294"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p223,p292"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on two nTimes bn_toNat(p_tail)=bn_toNat(nil)" org.eventb.core.prHyps="p294">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p296,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p294"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p296"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Eq nil =&gt; isZero(x) on goal" org.eventb.core.prGoal="p295" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_isZero expansion on goal" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p32" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p297">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst two,bn_toNat(p_tail))" org.eventb.core.prHyps="p297">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p298">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p297"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p298" org.eventb.core.prHyps="p296" org.eventb.core.prInfHyps="p299"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p299" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p300"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on two=zero∨bn_toNat(p_tail)=zero" org.eventb.core.prHyps="p300">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p301">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p300"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p301"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p301" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p38"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p35">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail)" org.eventb.core.prHyps="p35">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p36">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p35"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p36" org.eventb.core.prHyps="p38" org.eventb.core.prInfHyps="p302"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p302" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p25"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isZero(x)⇔bn_toNat(x)=zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e10,e11"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x=zero∨y=zero⇔x nTimes y=zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_isZero case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Eq nil ⇒ isZero(x)"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p293" org.eventb.core.prHyps="p51,p303">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p293" org.eventb.core.prHyps="p51">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p305">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p223" org.eventb.core.prInfHyps="p237"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p292" org.eventb.core.prInfHyps="p304"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p223,p292"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remZerosToEquality on p_tail bn_Eq cons(p_head0,p_tail0)" org.eventb.core.prHyps="p237">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p306">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p237"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p306"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remZerosToEquality on cons(FALSE,p_tail) bn_Eq p_tail0" org.eventb.core.prHyps="p303">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p307,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p303"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p307"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(cons(FALSE,p_tail))=bn_remTrailingZeros(p_tail0)" org.eventb.core.prHyps="p307">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p308,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p307"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p308"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p308" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p309"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (¬bn_isZero(p_tail))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p310">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p309" org.eventb.core.prHyps="p310" org.eventb.core.prInfHyps="p311"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p311" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p312"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_remTrailingZeros(p_tail)=bn_remTrailingZeros(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p306">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p312" org.eventb.core.prInfHyps="p313"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p312"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on cons(FALSE,bn_remTrailingZeros(cons(p_head0,p_tail0)))=bn_remTrailingZeros(p_tail0)" org.eventb.core.prHyps="p313">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p314">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p313"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p314"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE∨¬bn_isZero(p_tail0))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p315">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p314" org.eventb.core.prHyps="p315" org.eventb.core.prInfHyps="p316"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p316" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p317"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p255">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p255" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p256"/>
<org.eventb.core.prRule name="r20" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="type rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p256" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p257"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p257" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p258"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst cons(FALSE,cons(p_head0,bn_remTrailingZeros(p_tail0))),bn_remTrailingZeros(p_tail0))" org.eventb.core.prHyps="p258">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p318">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p258"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p318" org.eventb.core.prHyps="p317" org.eventb.core.prInfHyps="p319"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p319" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p320"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="length expansion on length(cons(FALSE,cons(p_head0,bn_remTrailingZeros(p_tail0))))=length(bn_remTrailingZeros(p_tail0))" org.eventb.core.prHyps="p320">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p321">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p320"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p321"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="length expansion on 1+length(cons(p_head0,bn_remTrailingZeros(p_tail0)))=length(bn_remTrailingZeros(p_tail0))" org.eventb.core.prHyps="p321">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p8,p263">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p321"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p263"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p263" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p264"/>
<org.eventb.core.prRule name="r24" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="arithmetic simplification in hyp (1+1+length(bn_remTrailingZeros(p_tail0))=length(bn_remTrailingZeros(p_tail0)))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p264" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p265"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p265"/>
<org.eventb.core.prRule name="r25" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ML" org.eventb.core.prGoal="p305" org.eventb.core.prHyps="p317,p223,p310,p258,p265,p292,p315,p41,p51,p312,p113,p4,p28,p306,p304">
<org.eventb.core.prString name=".arg" org.eventb.core.prSValue="0;1:500"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="ListTheory"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="_AuxiliaryDefinitions"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="_AuxiliaryDefinitions.length case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="ListTheory"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="_AuxiliaryDefinitions"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="_AuxiliaryDefinitions.length case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e12,e7"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x∈List(BOOL)⇒(length(x)≠length(y)⇒x≠y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p322">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p314" org.eventb.core.prHyps="p322" org.eventb.core.prInfHyps="p323"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p323" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p324"/>
<org.eventb.core.prRule name="r26" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in ¬(p_head0=TRUE∨¬bn_isZero(p_tail0))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p322" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p325,p122"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p325,p122"/>
<org.eventb.core.prRule name="r26" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="remove ¬ in ¬¬bn_isZero(p_tail0)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p325" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p283"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p283"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p283" org.eventb.core.prHyps="p325" org.eventb.core.prInfHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p122" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p125"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p305" org.eventb.core.prHyps="p125">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p326">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p51" org.eventb.core.prInfHyps="p128"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p304" org.eventb.core.prInfHyps="p149"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p306" org.eventb.core.prInfHyps="p272"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p51,p304,p306"/>
<org.eventb.core.prRule name="r27" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt dc in goal" org.eventb.core.prGoal="p326" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p326" org.eventb.core.prHyps="p327">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail0=nil" org.eventb.core.prGoal="p326" org.eventb.core.prHyps="p327">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p332">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p324" org.eventb.core.prInfHyps="p328"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p128" org.eventb.core.prInfHyps="p329"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p149" org.eventb.core.prInfHyps="p330"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p272" org.eventb.core.prInfHyps="p331"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p128,p149,p324,p272"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on cons(FALSE,nil)=bn_remTrailingZeros(nil)" org.eventb.core.prHyps="p328">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p333,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p328"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p333"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p333" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p25"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p326" org.eventb.core.prHyps="p334">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_tail0=cons(p_head1,p_tail1)" org.eventb.core.prGoal="p326" org.eventb.core.prHyps="p334">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p339">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p324" org.eventb.core.prInfHyps="p335"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p128" org.eventb.core.prInfHyps="p336"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p149" org.eventb.core.prInfHyps="p337"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p272" org.eventb.core.prInfHyps="p338"/>
<org.eventb.core.prHypAction name="DESELECT4" org.eventb.core.prHyps="p128,p149,p324,p272"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on cons(FALSE,nil)=bn_remTrailingZeros(cons(p_head1,p_tail1))" org.eventb.core.prHyps="p335">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p340,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p335"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p340"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head1=TRUE∨¬bn_isZero(p_tail1))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p341">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p340" org.eventb.core.prHyps="p341" org.eventb.core.prInfHyps="p342"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p342" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p343,p344"/>
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with FALSE=p_head1" org.eventb.core.prGoal="p339" org.eventb.core.prHyps="p343">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p350">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p334" org.eventb.core.prInfHyps="p345"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p336" org.eventb.core.prInfHyps="p346"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p337" org.eventb.core.prInfHyps="p347"/>
<org.eventb.core.prHypAction name="FORWARD_INF3" org.eventb.core.prHyps="p338" org.eventb.core.prInfHyps="p348"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p341" org.eventb.core.prInfHyps="p349"/>
<org.eventb.core.prHypAction name="DESELECT5" org.eventb.core.prHyps="p337,p338,p334,p341,p336"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p349" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p351"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p341" org.eventb.core.prHyps="p351" org.eventb.core.prInfHyps="p352"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p352"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p286">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail1)" org.eventb.core.prHyps="p286">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p353">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p286"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p353" org.eventb.core.prHyps="p344,p351" org.eventb.core.prInfHyps="p302"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p302" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p25"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e13"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isZero(x)⇔bn_remTrailingZeros(x)=nil"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p354">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p340" org.eventb.core.prHyps="p354" org.eventb.core.prInfHyps="p355"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p355" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p25"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p341"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p315"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p34">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p309" org.eventb.core.prHyps="p34" org.eventb.core.prInfHyps="p356"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p356" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p357"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_remTrailingZeros expansion on bn_remTrailingZeros(p_tail)=bn_remTrailingZeros(cons(p_head0,p_tail0))" org.eventb.core.prHyps="p306">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p358,p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p306"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p358"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p286">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail0)" org.eventb.core.prHyps="p286">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p287">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p286"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p287" org.eventb.core.prHyps="p357" org.eventb.core.prInfHyps="p359"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p359" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p283"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p358" org.eventb.core.prHyps="p283" org.eventb.core.prInfHyps="p360"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p360" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p361"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p57">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p361" org.eventb.core.prHyps="p57" org.eventb.core.prInfHyps="p362"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p362" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p363"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p305" org.eventb.core.prHyps="p57">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p115">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p51" org.eventb.core.prInfHyps="p62"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p304" org.eventb.core.prInfHyps="p364"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p363" org.eventb.core.prInfHyps="p365"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p51,p304,p363"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p286"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail)" org.eventb.core.prHyps="p286">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p366">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p286"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p366" org.eventb.core.prHyps="p34" org.eventb.core.prInfHyps="p367"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p367" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p368"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_remTrailingZeros(p_tail)=nil" org.eventb.core.prHyps="p368">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p365" org.eventb.core.prInfHyps="p369"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p365"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p369" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p25"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p122">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p361" org.eventb.core.prHyps="p122" org.eventb.core.prInfHyps="p370"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p122" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p125"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p370" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p368"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p305" org.eventb.core.prHyps="p125">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p326">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p51" org.eventb.core.prInfHyps="p128"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p304" org.eventb.core.prInfHyps="p149"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p51,p304"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Strip Cons on goal" org.eventb.core.prGoal="p326" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p371" org.eventb.core.prHyps="p8">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p371" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p121">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p8"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p372">
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst p_tail,p_tail0)" org.eventb.core.prHyps="p372">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p8">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p8" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p373">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p372"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p121" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p121">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p373" org.eventb.core.prHyps="p34,p283" org.eventb.core.prInfHyps="p374"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p374" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p25"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p25"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e9"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·bn_isZero(x)∧bn_isZero(y)⇒x bn_Eq y"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Strip Cons"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p57"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e9"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x·bn_isZero(x)⇔bn_remTrailingZeros(x)=nil"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p310"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BitwiseOps"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BitwiseOps.bn_remTrailingZeros case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="remZerosToEquality"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryEquality"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="remZerosToEquality"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p20"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue=""/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p178" org.eventb.core.predicate="bn_toNat(p_tail)=Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),suc(suc(zero ⦂ Nat)),bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p189" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·¬x=(zero ⦂ Nat)⇒(x=Pow(zero ⦂ Nat,λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y,x,y)⇒suc(zero ⦂ Nat)=y)"/>
<org.eventb.core.prPred name="p299" org.eventb.core.predicate="(two ⦂ Nat)=(zero ⦂ Nat)∨bn_toNat(p_tail)=(zero ⦂ Nat)⇔⊤">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="(zero ⦂ Nat)=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p273" org.eventb.core.predicate="cons(TRUE,bn_remTrailingZeros(cons(FALSE,p_tail0)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p280" org.eventb.core.predicate="¬length(cons(TRUE,cons(FALSE,bn_remTrailingZeros(p_tail0))))=length(bn_remTrailingZeros(p_tail0))⇒¬⊤">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p366" org.eventb.core.predicate="bn_isZero(p_tail)⇔bn_remTrailingZeros(p_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p197" org.eventb.core.predicate="COND(⊤∧bn_isZero(p_tail),0,1+bn_countBits(p_tail))=bn_countBits(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p199" org.eventb.core.predicate="bn_isZero(p_tail)∨⊤">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p95" org.eventb.core.predicate="a=suc(suc(suc(suc(suc(two ⦂ Nat)) nTimes a)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p348" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=bn_remTrailingZeros(cons(FALSE,cons(FALSE,p_tail1)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p174" org.eventb.core.predicate="COND(p_head=TRUE,suc(zero ⦂ Nat),zero ⦂ Nat) nAdd (suc(suc(zero ⦂ Nat)) nTimes bn_toNat(p_tail))=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p347" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(cons(FALSE,cons(FALSE,p_tail1)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p311" org.eventb.core.predicate="COND(¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p251" org.eventb.core.predicate="cons(TRUE,bn_remTrailingZeros(p_tail))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p341" org.eventb.core.predicate="p_head1=TRUE∨¬bn_isZero(p_tail1)">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p296" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p314" org.eventb.core.predicate="cons(FALSE,COND(p_head0=TRUE∨¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p313" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(cons(p_head0,p_tail0)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="⊤⇔⊤"/>
<org.eventb.core.prPred name="p276" org.eventb.core.predicate="¬bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p92" org.eventb.core.predicate="a=suc(suc(suc((suc(suc(zero ⦂ Nat)) nAdd (two ⦂ Nat)) nTimes a)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p142" org.eventb.core.predicate="((two ⦂ Nat) nTimes (two ⦂ Nat)) nTimes bn_toNat(p_tail0)=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p295" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p123" org.eventb.core.predicate="bn_toNat(p_tail)=COND(⊥,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0)),(two ⦂ Nat) nTimes bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p261" org.eventb.core.predicate="length(cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0))))=length(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p283" org.eventb.core.predicate="bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p252" org.eventb.core.predicate="cons(TRUE,bn_remTrailingZeros(cons(TRUE,p_tail0)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p97" org.eventb.core.predicate="a=suc(suc(suc(suc(two ⦂ Nat)) nTimes a) nAdd suc(zero ⦂ Nat))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p267" org.eventb.core.predicate="(two ⦂ Nat)=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p312" org.eventb.core.predicate="cons(FALSE,bn_remTrailingZeros(p_tail))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p110" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes (two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p246" org.eventb.core.predicate="(two ⦂ Nat)≠(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p368" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="⊤⇔⊥"/>
<org.eventb.core.prPred name="p171" org.eventb.core.predicate="bn_countBits(p_tail)=bn_countBits(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="bn_isZero(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p218" org.eventb.core.predicate="bn_toNat(x)=bn_toNat(y)⇒x bn_Eq y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p316" org.eventb.core.predicate="cons(FALSE,COND(⊤,cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p274" org.eventb.core.predicate="cons(TRUE,COND(FALSE=TRUE∨¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p336" org.eventb.core.predicate="y=cons(FALSE,cons(p_head1,p_tail1))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p357" org.eventb.core.predicate="(nil ⦂ List(BOOL))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p226" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p239" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p243" org.eventb.core.predicate="p_tail bn_Eq cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p338" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=bn_remTrailingZeros(cons(FALSE,cons(p_head1,p_tail1)))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p331" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=bn_remTrailingZeros(cons(FALSE,nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p79" org.eventb.core.predicate="a=suc(suc(suc(zero ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes ((two ⦂ Nat) nTimes a)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p307" org.eventb.core.predicate="bn_remTrailingZeros(cons(FALSE,p_tail))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p147" org.eventb.core.predicate="COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=bn_toNat(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p279" org.eventb.core.predicate="¬length(cons(TRUE,cons(FALSE,bn_remTrailingZeros(p_tail0))))=length(bn_remTrailingZeros(p_tail0))⇒¬cons(TRUE,cons(FALSE,bn_remTrailingZeros(p_tail0)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p109" org.eventb.core.predicate="a=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes COND(⊥,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes a),(two ⦂ Nat) nTimes a))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p233" org.eventb.core.predicate="suc(zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p356" org.eventb.core.predicate="COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p374" org.eventb.core.predicate="⊤∧⊤⇒⊥"/>
<org.eventb.core.prPred name="p140" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p224" org.eventb.core.predicate="COND(p_head=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=bn_toNat(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p330" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(cons(FALSE,nil ⦂ List(BOOL)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p272" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=bn_remTrailingZeros(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p352" org.eventb.core.predicate="p_head1=TRUE∨¬⊥">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p151" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=(two ⦂ Nat) nTimes bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="FALSE=FALSE∧bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p78" org.eventb.core.predicate="a=suc((two ⦂ Nat) nAdd ((two ⦂ Nat) nTimes ((two ⦂ Nat) nTimes a)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p342" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL))=COND(⊤,cons(p_head1,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p205" org.eventb.core.predicate="bn_toNat(p_tail0)≠(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p287" org.eventb.core.predicate="bn_isZero(p_tail0)⇔bn_remTrailingZeros(p_tail0)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p144" org.eventb.core.predicate="bn_toNat(p_tail0)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p154" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·¬x=(zero ⦂ Nat)⇒(x=x nTimes y⇒suc(zero ⦂ Nat)=y)"/>
<org.eventb.core.prPred name="p104" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·x=x nAdd y⇒y=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p278" org.eventb.core.predicate="cons(TRUE,cons(FALSE,bn_remTrailingZeros(p_tail0)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x bn_Eq y⇔bn_toNat(x)=bn_toNat(y)"/>
<org.eventb.core.prPred name="p69" org.eventb.core.predicate="a=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes COND(p_head=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes a),(two ⦂ Nat) nTimes a))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p363" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=cons(p_head0,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p206" org.eventb.core.predicate="bn_toNat(p_tail0) nTimes (two ⦂ Nat) nTimes (two ⦂ Nat)=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p286" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isZero(x)⇔bn_remTrailingZeros(x)=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p351" org.eventb.core.predicate="¬bn_isZero(p_tail1)">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p265" org.eventb.core.predicate="1+1=0"/>
<org.eventb.core.prPred name="p159" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·¬x=(zero ⦂ Nat)⇒(x=natPow(x,y)⇒suc(zero ⦂ Nat)=y)"/>
<org.eventb.core.prPred name="p167" org.eventb.core.predicate="bn_countBits(cons(p_head,p_tail))=bn_countBits(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p225" org.eventb.core.predicate="COND(⊤,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p190" org.eventb.core.predicate="bn_toNat(p_tail)=Pow(zero ⦂ Nat,λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y,suc(suc(zero ⦂ Nat)),bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p215" org.eventb.core.predicate="(zero ⦂ Nat)=suc(zero ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes (two ⦂ Nat))"/>
<org.eventb.core.prPred name="p268" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=COND(⊥,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0)),(two ⦂ Nat) nTimes bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p369" org.eventb.core.predicate="(nil ⦂ List(BOOL))=cons(TRUE,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p105" org.eventb.core.predicate="a=a nAdd ((suc(two ⦂ Nat) nTimes a) nAdd suc(suc(suc(zero ⦂ Nat))))⇒(suc(two ⦂ Nat) nTimes a) nAdd suc(suc(suc(zero ⦂ Nat)))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p231" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p88" org.eventb.core.predicate="a=suc(suc(suc((suc(suc(zero ⦂ Nat)) nTimes (two ⦂ Nat)) nTimes a)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p344" org.eventb.core.predicate="(nil ⦂ List(BOOL))=bn_remTrailingZeros(p_tail1)">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p71" org.eventb.core.predicate="a=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes COND(⊤,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes a),(two ⦂ Nat) nTimes a))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p170" org.eventb.core.predicate="bn_Eq_Equal_length(cons(p_head,p_tail),cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p220" org.eventb.core.predicate="(zero ⦂ Nat)=suc((zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p74" org.eventb.core.predicate="a=suc(zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes ((one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes a)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p361" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=COND(p_head0=TRUE,cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p82" org.eventb.core.predicate="a=suc(suc(suc((two ⦂ Nat) nTimes ((two ⦂ Nat) nTimes a))))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p204" org.eventb.core.predicate="bn_toNat(p_tail0)≠(zero ⦂ Nat)⇒(bn_toNat(p_tail0)=bn_toNat(p_tail0) nTimes ((two ⦂ Nat) nTimes (two ⦂ Nat))⇒(one ⦂ Nat)=(two ⦂ Nat) nTimes (two ⦂ Nat))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p227" org.eventb.core.predicate="x=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p163" org.eventb.core.predicate="COND(p_head=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p262" org.eventb.core.predicate="1+length(cons(TRUE,bn_remTrailingZeros(p_tail0)))=length(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p319" org.eventb.core.predicate="¬length(cons(FALSE,cons(p_head0,bn_remTrailingZeros(p_tail0))))=length(bn_remTrailingZeros(p_tail0))⇒¬⊤">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p70" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes COND(⊤,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p310" org.eventb.core.predicate="¬bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p257" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·⊤⇒(¬length(x)=length(y)⇒¬x=y)"/>
<org.eventb.core.prPred name="p216" org.eventb.core.predicate="(zero ⦂ Nat)=suc((zero ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes (two ⦂ Nat)))"/>
<org.eventb.core.prPred name="p112" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0))=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes (two ⦂ Nat) nTimes ((one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0))))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p75" org.eventb.core.predicate="a=suc((zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes ((one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes a))))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p195" org.eventb.core.predicate="p_head=p_head0">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p323" org.eventb.core.predicate="cons(FALSE,COND(⊥,cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p66" org.eventb.core.predicate="∃a⦂Nat·bn_toNat(p_tail)=a">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p169" org.eventb.core.predicate="bn_countBits(cons(p_head,p_tail))=bn_countBits(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p238" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=bn_toNat(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p132" org.eventb.core.predicate="bn_toNat(p_tail)=(two ⦂ Nat) nTimes bn_toNat(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p177" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·¬x=(zero ⦂ Nat)⇒(x=Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)⇒suc(zero ⦂ Nat)=y)"/>
<org.eventb.core.prPred name="p158" org.eventb.core.predicate="suc(suc(zero ⦂ Nat)) nTimes suc(suc(zero ⦂ Nat)) nTimes (zero ⦂ Nat)=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p222" org.eventb.core.predicate="FALSE=FALSE∧⊤"/>
<org.eventb.core.prPred name="p213" org.eventb.core.predicate="(one ⦂ Nat)=suc(suc(zero ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes (two ⦂ Nat)))"/>
<org.eventb.core.prPred name="p353" org.eventb.core.predicate="bn_isZero(p_tail1)⇔bn_remTrailingZeros(p_tail1)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="bn_toNat(nil ⦂ List(BOOL))=bn_toNat(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="bn_toNat(cons(p_head,p_tail))=bn_toNat(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p106" org.eventb.core.predicate="(suc(two ⦂ Nat) nTimes a) nAdd suc(suc(suc(zero ⦂ Nat)))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p162" org.eventb.core.predicate="natPow(suc(suc(zero ⦂ Nat)),bn_toNat(p_tail))=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p99" org.eventb.core.predicate="a=suc((suc(suc(two ⦂ Nat)) nTimes a) nAdd suc(suc(zero ⦂ Nat)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p317" org.eventb.core.predicate="cons(FALSE,cons(p_head0,bn_remTrailingZeros(p_tail0)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="bn_isZero(p_tail)⇔bn_toNat(p_tail)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p270" org.eventb.core.predicate="p_tail bn_Eq cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isZero(x)⇔bn_toNat(x)=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p258" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·¬length(x)=length(y)⇒¬x=y"/>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p217" org.eventb.core.predicate="(zero ⦂ Nat)=suc(suc(zero ⦂ Nat) nTimes (two ⦂ Nat))"/>
<org.eventb.core.prPred name="p309" org.eventb.core.predicate="COND(¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p269" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=(two ⦂ Nat) nTimes bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p124" org.eventb.core.predicate="bn_toNat(p_tail)=COND(⊥,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))),(two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p113" org.eventb.core.predicate="x=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p164" org.eventb.core.predicate="bn_toNat(p_tail)=natPow(suc(suc(zero ⦂ Nat)),COND(p_head=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p300" org.eventb.core.predicate="(two ⦂ Nat)=(zero ⦂ Nat)∨bn_toNat(p_tail)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p200" org.eventb.core.predicate="COND(bn_isZero(p_tail),0,1+bn_countBits(p_tail))=bn_countBits(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p291" org.eventb.core.predicate="COND(⊥,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p288" org.eventb.core.predicate="⊤⇔bn_remTrailingZeros(p_tail0)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p303" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p304" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="(zero ⦂ Nat)=bn_toNat(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p96" org.eventb.core.predicate="a=suc(suc(suc(suc(two ⦂ Nat)) nTimes a)) nAdd suc(zero ⦂ Nat)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p294" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p146" org.eventb.core.predicate="(two ⦂ Nat) nTimes (two ⦂ Nat) nTimes (zero ⦂ Nat)=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p305" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p87" org.eventb.core.predicate="suc(suc(zero ⦂ Nat)) nTimes (two ⦂ Nat) nTimes a=suc(suc(zero ⦂ Nat)) nTimes (two ⦂ Nat) nTimes a">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p196" org.eventb.core.predicate="bn_isZero(p_tail)∨bn_Eq_Equal_length(p_tail,p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p77" org.eventb.core.predicate="a=suc(((two ⦂ Nat) nTimes (one ⦂ Nat)) nAdd ((two ⦂ Nat) nTimes ((two ⦂ Nat) nTimes a)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p244" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Eq cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Eq y">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p131" org.eventb.core.predicate="p_head=FALSE∧p_tail bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p240" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=COND(p_head0=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0)),(two ⦂ Nat) nTimes bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p328" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL))=bn_remTrailingZeros(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p117" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail0)=(two ⦂ Nat) nTimes (two ⦂ Nat) nTimes ((one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p337" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(cons(FALSE,cons(p_head1,p_tail1)))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="(zero ⦂ Nat)=COND(⊥,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p129" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p364" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p119" org.eventb.core.predicate="FALSE=TRUE∧p_tail bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p83" org.eventb.core.predicate="a=suc(suc(suc(suc(suc(zero ⦂ Nat)) nTimes ((two ⦂ Nat) nTimes a))))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p248" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=bn_remTrailingZeros(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="bn_toNat(cons(p_head,p_tail))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p301" org.eventb.core.predicate="suc(suc(zero ⦂ Nat))=(zero ⦂ Nat)∨bn_toNat(p_tail)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p72" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes ((one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p103" org.eventb.core.predicate="a=a nAdd ((suc(two ⦂ Nat) nTimes a) nAdd suc(suc(suc(zero ⦂ Nat))))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p370" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=COND(⊥,cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p122" org.eventb.core.predicate="¬p_head0=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="bn_toNat(cons(p_head,p_tail))=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p289" org.eventb.core.predicate="bn_remTrailingZeros(p_tail0)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p345" org.eventb.core.predicate="p_tail0=cons(FALSE,p_tail1)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p334" org.eventb.core.predicate="p_tail0=cons(p_head1,p_tail1)">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="(zero ⦂ Nat)=bn_toNat(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p211" org.eventb.core.predicate="(one ⦂ Nat)=(two ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes (two ⦂ Nat))"/>
<org.eventb.core.prPred name="p168" org.eventb.core.predicate="bn_Eq_Equal_length(cons(p_head,p_tail),y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq y">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p180" org.eventb.core.predicate="bn_toNat(p_tail)=Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),suc(suc(zero ⦂ Nat)),COND(p_head=TRUE,suc(zero ⦂ Nat),zero ⦂ Nat) nAdd (suc(suc(zero ⦂ Nat)) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p306" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=bn_remTrailingZeros(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="y=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p234" org.eventb.core.predicate="suc((zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p327" org.eventb.core.predicate="p_tail0=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p255" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x∈List(BOOL)⇒(length(x)≠length(y)⇒x≠y)"/>
<org.eventb.core.prPred name="p308" org.eventb.core.predicate="COND(FALSE=TRUE∨¬bn_isZero(p_tail),cons(FALSE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p139" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nTimes bn_toNat(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p223" org.eventb.core.predicate="p_tail bn_Eq y">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p333" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="(zero ⦂ Nat)=(two ⦂ Nat) nTimes (zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p100" org.eventb.core.predicate="a=(suc(suc(two ⦂ Nat)) nTimes a) nAdd suc(suc(suc(zero ⦂ Nat)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p358" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=COND(p_head0=TRUE∨¬bn_isZero(p_tail0),cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p114" org.eventb.core.predicate="bn_toNat(cons(FALSE,p_tail))=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p64" org.eventb.core.predicate="bn_toNat(cons(p_head,p_tail))=bn_toNat(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p214" org.eventb.core.predicate="suc(zero ⦂ Nat)=suc(suc(zero ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes (two ⦂ Nat)))"/>
<org.eventb.core.prPred name="p208" org.eventb.core.predicate="bn_toNat(p_tail0)=bn_toNat(p_tail0) nTimes ((two ⦂ Nat) nTimes (two ⦂ Nat))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p60" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p185" org.eventb.core.predicate="p_head=bn_LSB(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p207" org.eventb.core.predicate="bn_toNat(p_tail0)=bn_toNat(p_tail0) nTimes ((two ⦂ Nat) nTimes (two ⦂ Nat))⇒(one ⦂ Nat)=(two ⦂ Nat) nTimes (two ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="bn_isZero(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="(zero ⦂ Nat)=bn_toNat(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p65" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes COND(p_head=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p241" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=COND(⊤,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0)),(two ⦂ Nat) nTimes bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p148" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·¬x=(zero ⦂ Nat)⇒(x=x nTimes y⇒(one ⦂ Nat)=y)"/>
<org.eventb.core.prPred name="p130" org.eventb.core.predicate="bn_toNat(cons(p_head,p_tail))=bn_toNat(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p101" org.eventb.core.predicate="a=(a nAdd (suc(two ⦂ Nat) nTimes a)) nAdd suc(suc(suc(zero ⦂ Nat)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p194" org.eventb.core.predicate="bn_toNat(p_tail)=Pow(zero ⦂ Nat,λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y,suc(suc(zero ⦂ Nat)),COND(p_head=TRUE,suc(zero ⦂ Nat),zero ⦂ Nat) nAdd Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),suc(suc(zero ⦂ Nat)),bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p349" org.eventb.core.predicate="FALSE=TRUE∨¬bn_isZero(p_tail1)">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p212" org.eventb.core.predicate="(one ⦂ Nat)=suc(suc(zero ⦂ Nat)) nAdd (suc(zero ⦂ Nat) nTimes (two ⦂ Nat))"/>
<org.eventb.core.prPred name="p228" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Eq y">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p343" org.eventb.core.predicate="FALSE=p_head1">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p360" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=COND(p_head0=TRUE∨¬⊤,cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p192" org.eventb.core.predicate="bn_toNat(p_tail)=Pow(zero ⦂ Nat,λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y,suc(suc(zero ⦂ Nat)),COND(p_head=TRUE,suc(zero ⦂ Nat),zero ⦂ Nat) nAdd natPow(suc(suc(zero ⦂ Nat)),bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p86" org.eventb.core.predicate="a=suc(suc(suc(suc(suc(zero ⦂ Nat)) nTimes (two ⦂ Nat) nTimes a)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p89" org.eventb.core.predicate="a=suc(suc(suc(((two ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes (two ⦂ Nat))) nTimes a)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p73" org.eventb.core.predicate="a=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes ((one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes a)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p107" org.eventb.core.predicate="suc((suc(two ⦂ Nat) nTimes a) nAdd suc(suc(zero ⦂ Nat)))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p373" org.eventb.core.predicate="bn_isZero(p_tail)∧bn_isZero(p_tail0)⇒p_tail bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p282" org.eventb.core.predicate="1+length(cons(FALSE,bn_remTrailingZeros(p_tail0)))=length(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p232" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p150" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0)),(two ⦂ Nat) nTimes bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p202" org.eventb.core.predicate="¬bn_toNat(p_tail0)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p84" org.eventb.core.predicate="(natPow_P ⦂ ℙ(Nat×Nat×Nat))∈AssocOp(Nat ⦂ ℙ(Nat))"/>
<org.eventb.core.prPred name="p62" org.eventb.core.predicate="y=cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p98" org.eventb.core.predicate="a=suc(suc(suc(two ⦂ Nat)) nTimes a) nAdd suc(suc(zero ⦂ Nat))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p165" org.eventb.core.predicate="bn_countBits(x)=bn_countBits(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p68" org.eventb.core.predicate="a=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p340" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL))=COND(p_head1=TRUE∨¬bn_isZero(p_tail1),cons(p_head1,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p94" org.eventb.core.predicate="a=suc(suc(suc(suc(suc((zero ⦂ Nat) nAdd (two ⦂ Nat))) nTimes a)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p235" org.eventb.core.predicate="suc((two ⦂ Nat) nTimes bn_toNat(p_tail))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p249" org.eventb.core.predicate="bn_remTrailingZeros(cons(TRUE,p_tail))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p209" org.eventb.core.predicate="(one ⦂ Nat)=(two ⦂ Nat) nTimes (two ⦂ Nat)"/>
<org.eventb.core.prPred name="p302" org.eventb.core.predicate="⊥⇔⊤"/>
<org.eventb.core.prPred name="p260" org.eventb.core.predicate="¬length(cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0))))=length(bn_remTrailingZeros(p_tail0))⇒¬⊤">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p290" org.eventb.core.predicate="cons(TRUE,nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p253" org.eventb.core.predicate="cons(TRUE,COND(TRUE=TRUE∨¬bn_isZero(p_tail0),cons(TRUE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p58" org.eventb.core.predicate="bn_toNat(p_tail)=COND(⊤,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0)),(two ⦂ Nat) nTimes bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p93" org.eventb.core.predicate="a=suc(suc(suc(suc(suc(zero ⦂ Nat) nAdd (two ⦂ Nat)) nTimes a)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p359" org.eventb.core.predicate="bn_isZero(p_tail0)⇔⊤">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p161" org.eventb.core.predicate="bn_toNat(p_tail)=natPow(suc(suc(zero ⦂ Nat)),bn_toNat(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p116" org.eventb.core.predicate="bn_toNat(cons(FALSE,p_tail))=bn_toNat(cons(TRUE,p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p188" org.eventb.core.predicate="bn_isZero(p_tail)∨bn_Eq_Equal_length(p_tail,bn_shiftLeft1(cons(p_head0,p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p198" org.eventb.core.predicate="COND(⊤∧bn_isZero(p_tail),0,1+bn_countBits(p_tail))=COND(⊤∧bn_isZero(p_tail0),0,1+bn_countBits(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p256" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x∈List(BOOL)⇒(¬length(x)=length(y)⇒¬x=y)"/>
<org.eventb.core.prPred name="p259" org.eventb.core.predicate="¬length(cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0))))=length(bn_remTrailingZeros(p_tail0))⇒¬cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="bn_toNat(p_tail)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p125" org.eventb.core.predicate="p_head0=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p157" org.eventb.core.predicate="suc(suc(zero ⦂ Nat)) nTimes bn_toNat(p_tail)=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p152" org.eventb.core.predicate="(two ⦂ Nat) nTimes (zero ⦂ Nat)=(two ⦂ Nat) nTimes bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p63" org.eventb.core.predicate="cons(p_head,p_tail) bn_Eq cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="bn_isZero(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p85" org.eventb.core.predicate="suc(suc(zero ⦂ Nat)) nTimes ((two ⦂ Nat) nTimes a)=(suc(suc(zero ⦂ Nat)) nTimes (two ⦂ Nat)) nTimes a">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p134" org.eventb.core.predicate="COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p221" org.eventb.core.predicate="(zero ⦂ Nat)=suc((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p133" org.eventb.core.predicate="bn_toNat(cons(FALSE,p_tail))=bn_toNat(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p318" org.eventb.core.predicate="¬length(cons(FALSE,cons(p_head0,bn_remTrailingZeros(p_tail0))))=length(bn_remTrailingZeros(p_tail0))⇒¬cons(FALSE,cons(p_head0,bn_remTrailingZeros(p_tail0)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p138" org.eventb.core.predicate="bn_toNat(p_tail)=((two ⦂ Nat) nTimes (two ⦂ Nat)) nTimes bn_toNat(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p285" org.eventb.core.predicate="cons(TRUE,nil ⦂ List(BOOL))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p297" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·x=(zero ⦂ Nat)∨y=(zero ⦂ Nat)⇔x nTimes y=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p350" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(FALSE,cons(FALSE,p_tail1))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="bn_toNat(cons(p_head,p_tail))=bn_toNat(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="p_head0=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p355" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL))=COND(⊥,cons(p_head1,bn_remTrailingZeros(p_tail1)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p254" org.eventb.core.predicate="cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="x bn_Eq y⇔bn_toNat(x)=bn_toNat(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p329" org.eventb.core.predicate="y=cons(FALSE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p184" org.eventb.core.predicate="COND(p_head=FALSE∧bn_isZero(p_tail),0,1+bn_countBits(p_tail))=COND(p_head0=FALSE∧bn_isZero(p_tail0),0,1+bn_countBits(p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p264" org.eventb.core.predicate="1+1+length(bn_remTrailingZeros(p_tail0))=length(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p128" org.eventb.core.predicate="y=cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p284" org.eventb.core.predicate="cons(TRUE,COND(¬⊤,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p293" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq y">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="x bn_Eq y⇒bn_toNat(x)=bn_toNat(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p172" org.eventb.core.predicate="bn_Eq_Equal_length(p_tail,p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p121" org.eventb.core.predicate="p_tail bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p156" org.eventb.core.predicate="bn_toNat(p_tail)=suc(suc(zero ⦂ Nat)) nTimes bn_toNat(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p346" org.eventb.core.predicate="y=cons(FALSE,cons(FALSE,p_tail1))">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p325" org.eventb.core.predicate="¬¬bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p118" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail0)=(two ⦂ Nat) nTimes ((two ⦂ Nat) nTimes ((one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0))))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p127" org.eventb.core.predicate="bn_toNat(p_tail)=(two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p186" org.eventb.core.predicate="bn_isZero(p_tail)∨bn_Eq_Equal_length(p_tail,bn_shiftLeft1(y))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p61" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p76" org.eventb.core.predicate="a=suc((two ⦂ Nat) nTimes ((one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes a)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p326" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p365" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=cons(TRUE,bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p362" org.eventb.core.predicate="bn_remTrailingZeros(p_tail)=COND(⊤,cons(p_head0,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p111" org.eventb.core.predicate="a=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes (two ⦂ Nat) nTimes a)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p315" org.eventb.core.predicate="p_head0=TRUE∨¬bn_isZero(p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="(zero ⦂ Nat)=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p275" org.eventb.core.predicate="cons(TRUE,COND(¬bn_isZero(p_tail0),cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p181" org.eventb.core.predicate="COND(p_head=TRUE,suc(zero ⦂ Nat),zero ⦂ Nat) nAdd natPow(suc(suc(zero ⦂ Nat)),bn_toNat(p_tail))=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p102" org.eventb.core.predicate="a=a nAdd (suc(two ⦂ Nat) nTimes a) nAdd suc(suc(suc(zero ⦂ Nat)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p59" org.eventb.core.predicate="bn_toNat(p_tail)=COND(⊤,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))),(two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p324" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p176" org.eventb.core.predicate="bn_toNat(p_tail)=natPow(suc(suc(zero ⦂ Nat)),COND(p_head=TRUE,suc(zero ⦂ Nat),zero ⦂ Nat) nAdd (suc(suc(zero ⦂ Nat)) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p271" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Eq cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p80" org.eventb.core.predicate="a=suc(suc(suc(zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes ((two ⦂ Nat) nTimes a))))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p141" org.eventb.core.predicate="(two ⦂ Nat) nTimes (two ⦂ Nat) nTimes bn_toNat(p_tail0)=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p354" org.eventb.core.predicate="¬(p_head1=TRUE∨¬bn_isZero(p_tail1))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))⇔bn_toNat(cons(p_head,p_tail))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p108" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes COND(⊥,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p126" org.eventb.core.predicate="bn_toNat(p_tail)=(two ⦂ Nat) nTimes bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="y=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p120" org.eventb.core.predicate="FALSE=TRUE"/>
<org.eventb.core.prPred name="p263" org.eventb.core.predicate="1+(1+length(bn_remTrailingZeros(p_tail0)))=length(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p191" org.eventb.core.predicate="Pow(zero ⦂ Nat,λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y,suc(suc(zero ⦂ Nat)),bn_toNat(p_tail))=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p332" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(FALSE,nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p281" org.eventb.core.predicate="length(cons(TRUE,cons(FALSE,bn_remTrailingZeros(p_tail0))))=length(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="bn_isZero(cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p277" org.eventb.core.predicate="cons(TRUE,COND(¬⊥,cons(FALSE,bn_remTrailingZeros(p_tail0)),nil ⦂ List(BOOL)))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="FALSE=FALSE"/>
<org.eventb.core.prPred name="p367" org.eventb.core.predicate="⊤⇔bn_remTrailingZeros(p_tail)=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p145" org.eventb.core.predicate="bn_toNat(p_tail)=(two ⦂ Nat) nTimes (zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p90" org.eventb.core.predicate="a=suc(suc(suc(((two ⦂ Nat) nAdd ((one ⦂ Nat) nTimes (two ⦂ Nat))) nTimes a)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="bn_toNat(x)=bn_toNat(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="bn_toNat(p_tail)=COND(p_head0=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0)),(two ⦂ Nat) nTimes bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="bn_toNat(p_tail)=COND(p_head0=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail))),(two ⦂ Nat) nTimes bn_toNat(cons(p_head,p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p219" org.eventb.core.predicate="(zero ⦂ Nat)=suc(zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="(zero ⦂ Nat)=COND(⊤,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p91" org.eventb.core.predicate="a=suc(suc(suc(((two ⦂ Nat) nAdd (two ⦂ Nat)) nTimes a)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p135" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p143" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·x≠(zero ⦂ Nat)⇒(x=x nTimes y⇒(one ⦂ Nat)=y)"/>
<org.eventb.core.prPred name="p339" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(FALSE,cons(p_head1,p_tail1))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="x bn_Eq y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p245" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p187" org.eventb.core.predicate="p_head=bn_LSB(cons(p_head0,p_tail0))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p322" org.eventb.core.predicate="¬(p_head0=TRUE∨¬bn_isZero(p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p136" org.eventb.core.predicate="bn_toNat(p_tail)=(two ⦂ Nat) nTimes COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p166" org.eventb.core.predicate="bn_Eq_Equal_length(x,y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p115" org.eventb.core.predicate="cons(FALSE,p_tail) bn_Eq cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p298" org.eventb.core.predicate="(two ⦂ Nat)=(zero ⦂ Nat)∨bn_toNat(p_tail)=(zero ⦂ Nat)⇔(two ⦂ Nat) nTimes bn_toNat(p_tail)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p193" org.eventb.core.predicate="COND(p_head=TRUE,suc(zero ⦂ Nat),zero ⦂ Nat) nAdd Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),suc(suc(zero ⦂ Nat)),bn_toNat(p_tail))=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p173" org.eventb.core.predicate="COND(p_head=TRUE,one ⦂ Nat,zero ⦂ Nat) nAdd (suc(suc(zero ⦂ Nat)) nTimes bn_toNat(p_tail))=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p230" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=bn_toNat(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p266" org.eventb.core.predicate="¬(two ⦂ Nat)≠(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p201" org.eventb.core.predicate="COND(bn_isZero(p_tail),0,1+bn_countBits(p_tail))=COND(bn_isZero(p_tail0),0,1+bn_countBits(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p242" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p292" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p160" org.eventb.core.predicate="bn_toNat(p_tail)=natPow(suc(suc(zero ⦂ Nat)),bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p229" org.eventb.core.predicate="p_tail bn_Eq (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p335" org.eventb.core.predicate="cons(FALSE,nil ⦂ List(BOOL))=bn_remTrailingZeros(cons(p_head1,p_tail1))">
<org.eventb.core.prIdent name="p_head1" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p149" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(cons(FALSE,p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="x=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p250" org.eventb.core.predicate="COND(TRUE=TRUE∨¬bn_isZero(p_tail),cons(TRUE,bn_remTrailingZeros(p_tail)),nil ⦂ List(BOOL))=bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p182" org.eventb.core.predicate="bn_toNat(p_tail)=Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),suc(suc(zero ⦂ Nat)),COND(p_head=TRUE,suc(zero ⦂ Nat),zero ⦂ Nat) nAdd natPow(suc(suc(zero ⦂ Nat)),bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p237" org.eventb.core.predicate="p_tail bn_Eq cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="bn_isZero(cons(p_head,p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p320" org.eventb.core.predicate="length(cons(FALSE,cons(p_head0,bn_remTrailingZeros(p_tail0))))=length(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p247" org.eventb.core.predicate="¬(two ⦂ Nat)=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p321" org.eventb.core.predicate="1+length(cons(p_head0,bn_remTrailingZeros(p_tail0)))=length(bn_remTrailingZeros(p_tail0))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p137" org.eventb.core.predicate="bn_toNat(p_tail)=(two ⦂ Nat) nTimes (two ⦂ Nat) nTimes bn_toNat(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p179" org.eventb.core.predicate="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),suc(suc(zero ⦂ Nat)),bn_toNat(p_tail))=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p203" org.eventb.core.predicate="bn_toNat(p_tail0) nTimes ((two ⦂ Nat) nTimes (two ⦂ Nat))=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p210" org.eventb.core.predicate="(one ⦂ Nat)=suc(suc(zero ⦂ Nat)) nTimes (two ⦂ Nat)"/>
<org.eventb.core.prPred name="p372" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isZero(x)∧bn_isZero(y)⇒x bn_Eq y"/>
<org.eventb.core.prPred name="p67" org.eventb.core.predicate="bn_toNat(p_tail)=a">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p236" org.eventb.core.predicate="cons(TRUE,p_tail) bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="y=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="bn_toNat(cons(p_head,p_tail))=bn_toNat(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p81" org.eventb.core.predicate="a=suc(suc(suc((zero ⦂ Nat) nAdd ((two ⦂ Nat) nTimes ((two ⦂ Nat) nTimes a)))))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p155" org.eventb.core.predicate="bn_toNat(p_tail)=suc(suc(zero ⦂ Nat)) nTimes bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="bn_isZero(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p371" org.eventb.core.predicate="FALSE=FALSE∧p_tail bn_Eq p_tail0">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="(zero ⦂ Nat)=COND(p_head=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="y=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="(zero ⦂ Nat)=bn_toNat(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p153" org.eventb.core.predicate="(two ⦂ Nat) nTimes (zero ⦂ Nat)=(two ⦂ Nat) nTimes (zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="(zero ⦂ Nat)=(two ⦂ Nat) nTimes bn_toNat(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p183" org.eventb.core.predicate="COND(p_head=FALSE∧bn_isZero(p_tail),0,1+bn_countBits(p_tail))=bn_countBits(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p175" org.eventb.core.predicate="bn_toNat(p_tail)=natPow(suc(suc(zero ⦂ Nat)),COND(p_head=TRUE,one ⦂ Nat,zero ⦂ Nat) nAdd (suc(suc(zero ⦂ Nat)) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prExpr name="e13" org.eventb.core.expression="p_tail1">
<org.eventb.core.prIdent name="p_tail1" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e11" org.eventb.core.expression="bn_toNat(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e10" org.eventb.core.expression="two ⦂ Nat"/>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e7" org.eventb.core.expression="bn_remTrailingZeros(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e8" org.eventb.core.expression="cons(TRUE,cons(FALSE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="a">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e9" org.eventb.core.expression="p_tail0">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="p_tail">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e5" org.eventb.core.expression="(two ⦂ Nat) nTimes (two ⦂ Nat)"/>
<org.eventb.core.prExpr name="e6" org.eventb.core.expression="cons(TRUE,cons(TRUE,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="(suc(two ⦂ Nat) nTimes a) nAdd suc(suc(suc(zero ⦂ Nat)))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e12" org.eventb.core.expression="cons(FALSE,cons(p_head0,bn_remTrailingZeros(p_tail0)))">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r27" org.eventb.core.prRID="org.eventb.core.seqprover.dtDistinctCase"/>
<org.eventb.core.prReas name="r20" org.eventb.core.prRID="org.eventb.core.seqprover.typeRewrites:1"/>
<org.eventb.core.prReas name="r24" org.eventb.core.prRID="org.eventb.core.seqprover.arithRewrites:1"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.eqvRewrites"/>
<org.eventb.core.prReas name="r19" org.eventb.core.prRID="org.eventb.core.seqprover.exF"/>
<org.eventb.core.prReas name="r15" org.eventb.core.prRID="org.eventb.core.seqprover.eqvLR"/>
<org.eventb.core.prReas name="r16" org.eventb.core.prRID="org.eventb.core.seqprover.he:1"/>
<org.eventb.core.prReas name="r26" org.eventb.core.prRID="org.eventb.core.seqprover.rn"/>
<org.eventb.core.prReas name="r17" org.eventb.core.prRID="org.eventb.core.seqprover.cut"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r21" org.eventb.core.prRID="org.eventb.core.seqprover.impE:2"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r25" org.eventb.core.prRID="com.clearsy.atelierb.provers.core.externalML:1"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r18" org.eventb.core.prRID="org.eventb.core.seqprover.onePointRule:2"/>
<org.eventb.core.prReas name="r23" org.eventb.core.prRID="org.eventb.theory.rbp.reduceToClassicLanguageReasoner"/>
<org.eventb.core.prReas name="r14" org.eventb.core.prRID="org.eventb.core.seqprover.mngHyp"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r22" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.impI"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
</org.eventb.core.prProof>
<org.eventb.core.prProof name="toNat addition Homomorphism/S-THM" org.eventb.core.confidence="1000" org.eventb.core.prFresh="p_tail,a,p_head,p_tail0,x,y,p_head0,a0" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="" org.eventb.core.psManual="true">
<org.eventb.core.lang name="L">
<org.eventb.theory.core.scNewOperatorDefinition name="BOOLP" org.eventb.core.label="BOOLP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AND" org.eventb.core.label="AND" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∧b=TRUE⇒⊤)∧(¬(a=TRUE∧b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="COND(a=TRUE∧b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="OR" org.eventb.core.label="OR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=TRUE∨b=TRUE⇒⊤)∧(¬(a=TRUE∨b=TRUE)⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=TRUE∨b=TRUE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOT" org.eventb.core.label="NOT" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a=FALSE⇒⊤)∧(¬a=FALSE⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a=FALSE,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xOR" org.eventb.core.label="xOR" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤∧(a≠b⇒⊤)∧(¬a≠b⇒⊤)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="COND(a≠b,TRUE,FALSE)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ANDP" org.eventb.core.label="ANDP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a AND b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ORP" org.eventb.core.label="ORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="a OR b=TRUE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="NOTP" org.eventb.core.label="NOTP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#3|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="a=FALSE"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="xORP" org.eventb.core.label="xORP" org.eventb.core.predicate="⊤" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BOOL/BOOL.tuf|org.eventb.theory.core.theoryRoot#BOOL|org.eventb.theory.core.newOperatorDefinition#4|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="a≠b"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp" org.eventb.core.label="AssocOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AssocOp_T" org.eventb.core.label="AssocOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp" org.eventb.core.label="CommOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="CommOp_T" org.eventb.core.label="CommOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y)=op(y ↦ x)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T·x ↦ y∈dom(op)∧op∈T × T ⇸ T∧y ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ y)=op(y ↦ x))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈T × T → T∧(∀x⦂T,y⦂T·op(x ↦ y)=op(y ↦ x)) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp" org.eventb.core.label="AbelianOp" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈AssocOp(T)∧op∈CommOp(T))∨¬op∈AssocOp(T)∨¬op∈CommOp(T)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#1|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈AssocOp(T)∧op∈CommOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="AbelianOp_T" org.eventb.core.label="AbelianOp_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(ℙ(T×T×T))" org.eventb.theory.core.wd="∀op⦂ℙ(T×T×T)·(op∈CommOp(T)∧op∈AssocOp(T))∨¬op∈CommOp(T)∨¬op∈AssocOp(T)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Operators.tuf|org.eventb.theory.core.theoryRoot#Operators|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{op⦂ℙ(T×T×T)·op∈CommOp(T)∧op∈AssocOp(T) ∣ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Monoid" org.eventb.core.label="Monoid" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×ℙ(T×T×T))" org.eventb.theory.core.wd="∀ident⦂T,op⦂ℙ(T×T×T)·(ident∈T∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧op∈AssocOp(T)∧(∀x⦂T·¬x∈T∨(ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧op(ident ↦ x)=x∧x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ ident)=x)))∨¬ident∈T∨((∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧(x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T⇒x ↦ y∈dom(op)∧op∈T × T ⇸ T∧(op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T⇒y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T))))∧(∀op⦂ℙ(T×T×T)·(op∈T × T → T∧(∀x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∨¬op∈T × T → T∨(∃x⦂T,y⦂T,z⦂T·y ↦ z∈dom(op)∧op∈T × T ⇸ T∧x ↦ op(y ↦ z)∈dom(op)∧op∈T × T ⇸ T∧x ↦ y∈dom(op)∧op∈T × T ⇸ T∧op(x ↦ y) ↦ z∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ op(y ↦ z))=op(op(x ↦ y) ↦ z)))∧¬op∈AssocOp(T))∨(∃x⦂T·x∈T∧((ident ↦ x∈dom(op)∧op∈T × T ⇸ T∧¬op(ident ↦ x)=x)∨(x ↦ ident∈dom(op)∧op∈T × T ⇸ T∧¬op(x ↦ ident)=x)))">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="{ident⦂T,op⦂ℙ(T×T×T)·ident∈T∧op∈AssocOp(T)∧(∀x⦂T·x∈T⇒op(ident ↦ x)=x∧op(x ↦ ident)=x) ∣ ident ↦ op}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mInit" org.eventb.core.label="mInit" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T×ℙ(T×T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="ident ↦ op"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mIdent" org.eventb.core.label="mIdent" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mOp" org.eventb.core.label="mOp" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T×T)" org.eventb.theory.core.wd="m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/Maths/Monoid.tuf|org.eventb.theory.core.theoryRoot#Monoid|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))(m)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="Nat">
<org.eventb.theory.core.scDatatypeConstructor name="zero"/>
<org.eventb.theory.core.scDatatypeConstructor name="suc">
<org.eventb.theory.core.scConstructorArgument name="prev" org.eventb.core.type="Nat"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_internal" org.eventb.core.label="nAdd_internal" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#k|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd_internal y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_int_P" org.eventb.core.label="nAdd_int_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#m|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nAdd_internal y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd" org.eventb.core.label="nAdd" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="suc(xs nAdd y)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nAdd_P" org.eventb.core.label="nAdd_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#\/|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ x nAdd y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="decrement" org.eventb.core.label="decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="xs"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nMinus" org.eventb.core.label="nMinus" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="y">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="x"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ys)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="decrement(x) nMinus ys"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="one" org.eventb.core.label="one" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#O|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(zero ⦂ Nat)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="two" org.eventb.core.label="two" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#Z|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(zero ⦂ Nat))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="ten" org.eventb.core.label="ten" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#P|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="suc(suc(suc(suc(suc(suc(suc(suc(suc(suc(zero ⦂ Nat))))))))))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="divMod" org.eventb.core.label="divMod" org.eventb.core.predicate="d≠(zero ⦂ Nat)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat×Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="n" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="d" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="c" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="n">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="c ↦ (zero ⦂ Nat)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ns)" org.eventb.core.source="/Maths/Naturals.tuf|org.eventb.theory.core.theoryRoot#Naturals|org.eventb.theory.core.newOperatorDefinition#U|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(suc(ns)=d,suc(c) ↦ (zero ⦂ Nat),COND(suc(ns) nMinus d=(zero ⦂ Nat),c ↦ suc(ns),divMod(suc(ns) nMinus d,d,suc(c))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="Pow" org.eventb.core.label="Pow" org.eventb.core.predicate="op∈AssocOp(T)∧ident ↦ op∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="ident" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="op" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#*" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#+" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="p">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="ident"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(ps)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="op(a ↦ Pow(ident,op,a,ps))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="mPow" org.eventb.core.label="mPow" org.eventb.core.predicate="m∈Monoid(T)" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="m∈dom(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∧(prj1 ⦂ ℙ(T×ℙ(T×T×T)×T))∈T × ℙ(T × T × T) ⇸ T∧m∈dom(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∧(prj2 ⦂ ℙ(T×ℙ(T×T×T)×ℙ(T×T×T)))∈T × ℙ(T × T × T) ⇸ ℙ(T × T × T)">
<org.eventb.theory.core.scOperatorArgument name="m" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="T×ℙ(T×T×T)"/>
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="Pow(mIdent(m),mOp(m),a,p)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow" org.eventb.core.label="natPow" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#5|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="Pow(zero ⦂ Nat,nAdd_P ⦂ ℙ(Nat×Nat×Nat),x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="natPow_P" org.eventb.core.label="natPow_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/MonoidPOW.tuf|org.eventb.theory.core.theoryRoot#MonoidPOW|org.eventb.theory.core.newOperatorDefinition#6|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·⊤ ∣ natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes" org.eventb.core.label="nTimes" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="true" org.eventb.theory.core.commutative="true" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scDirectOperatorDefinition name=")" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#)" org.eventb.theory.core.formula="natPow(x,y)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="nTimes_P" org.eventb.core.label="nTimes_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(Nat×Nat×Nat)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/Maths/NaturalsMultiply.tuf|org.eventb.theory.core.theoryRoot#NaturalsMultiply|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂Nat ↦ y⦂Nat·x ↦ y∈(Nat ⦂ ℙ(Nat)) × (Nat ⦂ ℙ(Nat)) ∣ x nTimes y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scDatatypeDefinition name="List">
<org.eventb.theory.core.scTypeArgument name="T" org.eventb.theory.core.givenType="T"/>
<org.eventb.theory.core.scDatatypeConstructor name="nil"/>
<org.eventb.theory.core.scDatatypeConstructor name="cons">
<org.eventb.theory.core.scConstructorArgument name="head" org.eventb.core.type="T"/>
<org.eventb.theory.core.scConstructorArgument name="tail" org.eventb.core.type="List"/>
</org.eventb.theory.core.scDatatypeConstructor>
</org.eventb.theory.core.scDatatypeDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="length" org.eventb.core.label="length" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="1+length(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="append" org.eventb.core.label="append" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scOperatorArgument name="t" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="T"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="cons(t,nil ⦂ List(T))"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(x0,append(xs,t))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="reverse" org.eventb.core.label="reverse" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="append(reverse(xs),x0)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="last" org.eventb.core.label="last" org.eventb.core.predicate="x≠(nil ⦂ List(T))" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="T" org.eventb.theory.core.wd="∃head0⦂T,tail1⦂List(T)·reverse(x)=cons(head0,tail1)">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.directOperatorDefinition#(" org.eventb.theory.core.formula="head(reverse(x))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="elements" org.eventb.core.label="elements" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_AuxiliaryDefinitions.tuf|org.eventb.theory.core.theoryRoot#_AuxiliaryDefinitions|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="{x0}∪elements(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="map" org.eventb.core.label="map" org.eventb.core.predicate="f∈S ⇸ T∧elements(x)⊆dom(f)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="f" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(S×T)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(S)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(S)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Map.tuf|org.eventb.theory.core.theoryRoot#_Map|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(f(x0),map(f,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="cons_pairs" org.eventb.core.label="cons_pairs" org.eventb.core.predicate="⊤" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(T×T)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="∅ ⦂ ℙ(T×T)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(t,xs)" org.eventb.core.source="/ListTheory/_ConsPairs.tuf|org.eventb.theory.core.theoryRoot#_ConsPairs|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xs≠(nil ⦂ List(T)),{t ↦ head(xs)},∅ ⦂ ℙ(T×T))∪cons_pairs(xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_list" org.eventb.core.label="for_all_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∧for_all_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_list" org.eventb.core.label="exists_in_list" org.eventb.core.predicate="p∈T ⇸ BOOL∧elements(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="p(x0)=TRUE∨exists_in_list(p,xs)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="for_all_in_cons_pairs" org.eventb.core.label="for_all_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs=(nil ⦂ List(T))∨(p(x0 ↦ head(xs))=TRUE∧for_all_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="exists_in_cons_pairs" org.eventb.core.label="exists_in_cons_pairs" org.eventb.core.predicate="p∈T × T ⇸ BOOL∧cons_pairs(x)⊆dom(p)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#," org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="p" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="ℙ(T×T×BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(T)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="*" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(T)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(x0,xs)" org.eventb.core.source="/ListTheory/_Predicates.tuf|org.eventb.theory.core.theoryRoot#_Predicates|org.eventb.theory.core.newOperatorDefinition#,|org.eventb.theory.core.recursiveOperatorDefinition#*|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="xs≠(nil ⦂ List(T))∧(p(x0 ↦ head(xs))=TRUE∨exists_in_cons_pairs(p,xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_LSB" org.eventb.core.label="bn_LSB" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="BOOL" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="FALSE"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isZero" org.eventb.core.label="bn_isZero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#." org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#.|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=FALSE∧bn_isZero(as)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_hasSetBit" org.eventb.core.label="bn_hasSetBit" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊥"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#7|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=TRUE∨bn_hasSetBit(aT)"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_shiftLeft1" org.eventb.core.label="bn_shiftLeft1" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="as"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_concatonate" org.eventb.core.label="bn_concatonate" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="b"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(aB,bn_concatonate(as,b))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_remTrailingZeros" org.eventb.core.label="bn_remTrailingZeros" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#-|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE∨¬bn_isZero(as),cons(aB,bn_remTrailingZeros(as)),nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_countBits" org.eventb.core.label="bn_countBits" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℤ" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="0"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BitwiseOps.tuf|org.eventb.theory.core.theoryRoot#BitwiseOps|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=FALSE∧bn_isZero(as),0,1+bn_countBits(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_isNormal" org.eventb.core.label="bn_isNormal" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#+|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="(as=(nil ⦂ List(BOOL))∧aB=TRUE)∨(as≠(nil ⦂ List(BOOL))∧bn_isNormal(as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Zero" org.eventb.core.label="bn_Zero" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_One" org.eventb.core.label="bn_One" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryNatural_T.tuf|org.eventb.theory.core.theoryRoot#BinaryNatural_T|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="cons(TRUE,nil ⦂ List(BOOL))"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq_Equal_length" org.eventb.core.label="bn_Eq_Equal_length" org.eventb.core.predicate="bn_countBits(a)=bn_countBits(b)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.operatorArgument#)" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="⊤"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#N|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="aB=bn_LSB(b)∧(bn_isZero(as)∨bn_Eq_Equal_length(as,bn_shiftLeft1(b)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Eq" org.eventb.core.label="bn_Eq" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="false" org.eventb.theory.core.groupID="org.eventb.core.ast.relOp" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.wd="(bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b))∨¬bn_countBits(a)=bn_countBits(b)∨¬bn_Eq_Equal_length(a,b)">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="b" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scDirectOperatorDefinition name="*" org.eventb.core.source="/BinaryNumbers/BinaryEquality.tuf|org.eventb.theory.core.theoryRoot#BinaryEquality|org.eventb.theory.core.newOperatorDefinition#'|org.eventb.theory.core.directOperatorDefinition#*" org.eventb.theory.core.formula="bn_countBits(a)=bn_countBits(b)∧bn_Eq_Equal_length(a,b)"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_increment" org.eventb.core.label="bn_increment" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="bn_One ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,as)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,cons(FALSE,bn_increment(as)),cons(TRUE,as))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_decrement" org.eventb.core.label="bn_decrement" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/IncrementNaturals.tuf|org.eventb.theory.core.theoryRoot#IncrementNaturals|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#'|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE,cons(FALSE,xT),COND(bn_isZero(xT),nil ⦂ List(BOOL),cons(TRUE,bn_decrement(xT))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Add" org.eventb.core.label="bn_Add" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_nat_T" org.eventb.core.label="bn_nat_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL)·(x∈List(BOOL)∧bn_isNormal(x))∨¬x∈List(BOOL)∨¬bn_isNormal(x)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_Or" org.eventb.core.label="bn_Or" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And" org.eventb.core.label="bn_And" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_And_P" org.eventb.core.label="bn_And_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL)×List(BOOL)×List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL),y⦂List(BOOL)·(x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))))∨¬x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∨¬y∈(bn_nat_T ⦂ ℙ(List(BOOL)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat" org.eventb.core.label="bn_toNat" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(aB,aT)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#0|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(aB=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(aT)),(two ⦂ Nat) nTimes bn_toNat(aT))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toNat2" org.eventb.core.label="bn_toNat2" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="Nat" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="zero ⦂ Nat"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(bn_isZero(cons(xB,xs)),zero ⦂ Nat,suc(bn_toNat2(bn_decrement(cons(xB,xs)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="bn_toBin" org.eventb.core.label="bn_toBin" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.closed" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="a" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="Nat"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="(" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(" org.eventb.theory.core.inductiveArgument="a">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="zero ⦂ Nat" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="suc(xs)" org.eventb.core.source="/BinaryNumbers/NatBijection.tuf|org.eventb.theory.core.theoryRoot#NatBijection|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#(|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="bn_increment(bn_toBin(xs))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
</org.eventb.core.lang>
<org.eventb.core.prRule name="r0" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ goal (frees x,y)" org.eventb.core.prGoal="p0" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (∃a·a=x bn_Add y)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p3">
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="One Point Rule in goal" org.eventb.core.prGoal="p3" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p3">
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ hyp (∃a·a=x bn_Add y)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p3" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p4">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prHypAction>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (bn_toNat(x bn_Add y)=bn_toNat(a))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p5">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with a=x bn_Add y" org.eventb.core.prGoal="p5" org.eventb.core.prHyps="p4">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p6">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p6" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p5">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(x bn_Add y)=bn_toNat(a)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p5">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p8">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with a=x bn_Add y" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p4">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p8" org.eventb.core.prInfHyps="p9"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p8,p5"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p10">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst x,y)" org.eventb.core.prHyps="p10">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p11">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p10"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p11" org.eventb.core.prHyps="p9" org.eventb.core.prInfHyps="p12"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p12" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p13,p14"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p17">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p4" org.eventb.core.prInfHyps="p15"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p9" org.eventb.core.prInfHyps="p16"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p9,p4"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=nil" org.eventb.core.prGoal="p17" org.eventb.core.prHyps="p13">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p20">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p15" org.eventb.core.prInfHyps="p18"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p16" org.eventb.core.prInfHyps="p19"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p15,p16"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on goal" org.eventb.core.prGoal="p20" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p21" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prGoal="p22" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p23" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e0,e1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x=nil∧y=nil⇔x bn_Add y=nil"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p24,p25">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with a=x bn_Add y" org.eventb.core.prGoal="p7" org.eventb.core.prHyps="p4">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p1">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p5" org.eventb.core.prInfHyps="p6"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p25" org.eventb.core.prInfHyps="p26"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p25,p5"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p6"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x bn_Add y=cons(p_head,p_tail)" org.eventb.core.prGoal="p1" org.eventb.core.prHyps="p26">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p27">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p4"/>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p25"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p27" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p29">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="p29">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p30">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p30" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p31">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=TRUE" org.eventb.core.prHyps="p29">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p26" org.eventb.core.prInfHyps="p32"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p25" org.eventb.core.prInfHyps="p33"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p25,p26"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(p_tail)=bn_toNat(x) nAdd bn_toNat(y)" org.eventb.core.prGoal="p31" org.eventb.core.prHyps="p24">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34">
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p14">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p37">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p24" org.eventb.core.prInfHyps="p35"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p32" org.eventb.core.prInfHyps="p36"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p24,p32"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p37" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p38" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prGoal="p38" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p39" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p39" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prGoal="p40" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p41" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on nil bn_Add y=cons(TRUE,p_tail)" org.eventb.core.prHyps="p36">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p42,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p36"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p42"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(TRUE,p_tail)" org.eventb.core.prGoal="p41" org.eventb.core.prHyps="p42">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p44">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p35" org.eventb.core.prInfHyps="p43"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p35"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p44" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p45" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p45" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p46">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(p_tail)=bn_toNat(nil) nAdd bn_toNat(cons(TRUE,p_tail))" org.eventb.core.prHyps="p43">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p47">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p43"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p47"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p47" org.eventb.core.prInfHyps="p48"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p47"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(p_tail)=bn_toNat(cons(TRUE,p_tail))" org.eventb.core.prHyps="p48">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p49">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p48"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p49"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p49" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p50"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on bn_toNat(p_tail)=one nAdd (two nTimes bn_toNat(p_tail))" org.eventb.core.prHyps="p50">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p51">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p50"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p51"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="(1 + x) ∗ y = y + y * x on bn_toNat(p_tail)=one nAdd (suc(suc(zero)) nTimes bn_toNat(p_tail))" org.eventb.core.prHyps="p51">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p52,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p51"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p52"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p52" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p53"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="suc(zero) = one on bn_toNat(p_tail)=one nAdd bn_toNat(p_tail) nAdd (suc(zero) nTimes bn_toNat(p_tail))" org.eventb.core.prHyps="p53">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p54,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p53"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p54"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="1 * x = x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p54" org.eventb.core.prInfHyps="p55"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p54"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="AssociativeLeft on bn_toNat(p_tail)=one nAdd bn_toNat(p_tail) nAdd bn_toNat(p_tail)" org.eventb.core.prHyps="p55">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p56,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p55"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p56"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Commutive Swap on bn_toNat(p_tail)=(one nAdd bn_toNat(p_tail)) nAdd bn_toNat(p_tail)" org.eventb.core.prHyps="p56">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p57,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p56"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p57"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p58">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toNat(p_tail),one nAdd bn_toNat(p_tail))" org.eventb.core.prHyps="p58">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p59">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p58"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ hyp mp (bn_toNat(p_tail)=bn_toNat(p_tail) nAdd (one nAdd bn_toNat(p_tail))⇒one nAdd bn_toNat(p_tail)=zero)" org.eventb.core.prHyps="p59">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p57">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p59"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p57" org.eventb.core.prHyps="p57"/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p60">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p59"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on one nAdd bn_toNat(p_tail)=zero" org.eventb.core.prHyps="p60">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p61,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p60"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p61"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on suc(zero) nAdd bn_toNat(p_tail)=zero" org.eventb.core.prHyps="p61">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p62">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p61"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p62"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p62" org.eventb.core.prInfHyps="p63"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p62"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p57" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p64"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p63" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p65"/>
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p65"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2,e3"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x=x nAdd y⇒y=zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="CommRewrite"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="AssociativeRight"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TOneTimes"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="suc(zero) = one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.2.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="T(1 + x) ∗ y"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p66,p67">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p34" org.eventb.core.prHyps="p66">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p70">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p24" org.eventb.core.prInfHyps="p68"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p32" org.eventb.core.prInfHyps="p69"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p24,p32"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on one nAdd (two nTimes (bn_toNat(p_tail0) nAdd bn_toNat(y)))=bn_toNat(p_tail0) nAdd bn_toNat(y)" org.eventb.core.prHyps="p67">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p71,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p67"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p71"/>
<org.eventb.core.prRule name="r1" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="ah (∃a·a=bn_toNat(p_tail0) nAdd bn_toNat(y))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p72">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r3" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="One Point Rule in goal" org.eventb.core.prGoal="p72" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p72">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r4" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∃ hyp (∃a·a=bn_toNat(p_tail0) nAdd bn_toNat(y))" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p72" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p73">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
</org.eventb.core.prHypAction>
<org.eventb.core.prHypAction name="SELECT1" org.eventb.core.prHyps="p73"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with a0=bn_toNat(p_tail0) nAdd bn_toNat(y)" org.eventb.core.prHyps="p73">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p71" org.eventb.core.prInfHyps="p74"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p71"/>
<org.eventb.core.prRule name="r18" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sl/ds" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p73"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="(1 + x) ∗ y = y + y * x on one nAdd (suc(suc(zero)) nTimes a0)=a0" org.eventb.core.prHyps="p74">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p75">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p74"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p75"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p75" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p76"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="AssociativeLeft on one nAdd a0 nAdd (suc(zero) nTimes a0)=a0" org.eventb.core.prHyps="p76">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p77">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p76"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p77"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Commutive Swap on (one nAdd a0) nAdd (suc(zero) nTimes a0)=a0" org.eventb.core.prHyps="p77">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p78">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p77"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p78"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p78" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p79"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="AssociativeRight on a0 nAdd one nAdd (suc(zero) nTimes a0)=a0" org.eventb.core.prHyps="p79">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p80">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p79"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p80"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p58">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst a0,one nAdd (suc(zero) nTimes a0))" org.eventb.core.prHyps="p58">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p81">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p58"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ hyp mp (a0=a0 nAdd (one nAdd (suc(zero) nTimes a0))⇒one nAdd (suc(zero) nTimes a0)=zero)" org.eventb.core.prHyps="p81">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p82">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p81"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p82" org.eventb.core.prHyps="p80"/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p83">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p81"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on one nAdd (suc(zero) nTimes a0)=zero" org.eventb.core.prHyps="p83">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p84">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p83"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p84"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on suc(zero) nAdd (suc(zero) nTimes a0)=zero" org.eventb.core.prHyps="p84">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p85,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p84"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p85"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p85" org.eventb.core.prInfHyps="p86"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p85"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p80" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p79"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p86" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p65"/>
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p65"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e4,e5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x=x nAdd y⇒y=zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="AssociativeLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="CommRewrite"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="AssociativeRight"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="T(1 + x) ∗ y"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p72"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.1.1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p87">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prGoal="p28" org.eventb.core.prHyps="p87">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p88">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p88" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p90">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p87" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p89"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head=FALSE" org.eventb.core.prHyps="p89">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p26" org.eventb.core.prInfHyps="p91"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p25" org.eventb.core.prInfHyps="p92"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p25,p26"/>
<org.eventb.core.prRule name="r7" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dt induc in goal" org.eventb.core.prGoal="p90" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p90" org.eventb.core.prHyps="p14">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=nil" org.eventb.core.prGoal="p90" org.eventb.core.prHyps="p14">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p94">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p24" org.eventb.core.prInfHyps="p35"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p91" org.eventb.core.prInfHyps="p93"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p24,p91"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p94" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p95" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prGoal="p95" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p96" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_Add expansion on nil bn_Add y=cons(FALSE,p_tail)" org.eventb.core.prHyps="p93">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p97">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p93"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p97"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with y=cons(FALSE,p_tail)" org.eventb.core.prGoal="p96" org.eventb.core.prHyps="p97">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p99">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p35" org.eventb.core.prInfHyps="p98"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p35"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(p_tail)=bn_toNat(nil) nAdd bn_toNat(cons(FALSE,p_tail))" org.eventb.core.prHyps="p98">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p100,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p98"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p100"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p100" org.eventb.core.prInfHyps="p101"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p100"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(p_tail)=bn_toNat(cons(FALSE,p_tail))" org.eventb.core.prHyps="p101">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p102,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p101"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p102"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p102" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p103"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Commutative Swap on bn_toNat(p_tail)=two nTimes bn_toNat(p_tail)" org.eventb.core.prHyps="p103">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p104,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p103"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p104"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p105">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p105" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p106"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toNat(p_tail),two)" org.eventb.core.prHyps="p106">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p107">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p106"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p107" org.eventb.core.prHyps="p104" org.eventb.core.prInfHyps="p108"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p108" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p109"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_toNat(p_tail)=zero)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p110">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p109" org.eventb.core.prHyps="p110" org.eventb.core.prInfHyps="p111"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p111"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(p_tail)=zero" org.eventb.core.prGoal="p99" org.eventb.core.prHyps="p110">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p113">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p104" org.eventb.core.prInfHyps="p112"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p104"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 0 = 0  (auto rewrite)" org.eventb.core.prGoal="p113" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p114" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="0 * x = 0  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p112" org.eventb.core.prInfHyps="p115"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p112"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p115"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p114" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p116" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p116" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p117">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(p_tail)=zero" org.eventb.core.prGoal="p117" org.eventb.core.prHyps="p110">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p118">
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 0 = 0  (auto rewrite)" org.eventb.core.prGoal="p118" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p115" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p115" org.eventb.core.prHyps="p115"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesZero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TZeroTimes"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesZero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p119">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p109" org.eventb.core.prHyps="p119" org.eventb.core.prInfHyps="p120"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p120" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p121"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on one=two" org.eventb.core.prHyps="p121">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p122,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p121"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p122"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on suc(zero)=two" org.eventb.core.prHyps="p122">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p123">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p122"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p123"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p123" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p65"/>
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p65"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p110"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2,e6"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x≠zero⇒(x=x nTimes y⇒one=y)"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TCommutative"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="BinaryNaturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="BinaryNaturals.bn_Add case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 0"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p90" org.eventb.core.prHyps="p66,p124">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prRule name="r19" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="lae in bn_toNat(p_tail)=bn_toNat(x) nAdd bn_toNat(y)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p24" org.eventb.core.prHyps="p66" org.eventb.core.prInfHyps="p68"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with x=cons(p_head0,p_tail0)" org.eventb.core.prGoal="p90" org.eventb.core.prHyps="p66">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p126">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p91" org.eventb.core.prInfHyps="p125"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p91"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on bn_toNat(p_tail)=bn_toNat(cons(p_head0,p_tail0)) nAdd bn_toNat(y)" org.eventb.core.prHyps="p68">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p127,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p68"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p127"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (p_head0=TRUE)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p128">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p127" org.eventb.core.prHyps="p128" org.eventb.core.prInfHyps="p129"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p129" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p130"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=TRUE" org.eventb.core.prGoal="p126" org.eventb.core.prHyps="p128">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p133">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p66" org.eventb.core.prInfHyps="p131"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p125" org.eventb.core.prInfHyps="p132"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p125,p66"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on bn_toNat(p_tail)=one nAdd (two nTimes bn_toNat(p_tail0)) nAdd bn_toNat(y)" org.eventb.core.prHyps="p130">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p134">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p130"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p134"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="(1 + x) ∗ y = y + y * x on bn_toNat(p_tail)=one nAdd (suc(suc(zero)) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(y)" org.eventb.core.prHyps="p134">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p135,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p134"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p135"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Commutive Swap on bn_toNat(p_tail)=one nAdd (bn_toNat(p_tail0) nAdd (suc(zero) nTimes bn_toNat(p_tail0))) nAdd bn_toNat(y)" org.eventb.core.prHyps="p135">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p136,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p135"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p136"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="one expansion on bn_toNat(p_tail)=one nAdd ((suc(zero) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(p_tail0)) nAdd bn_toNat(y)" org.eventb.core.prHyps="p136">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p137,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p136"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p137"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="AssociativeRight on bn_toNat(p_tail)=suc(zero) nAdd ((suc(zero) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(p_tail0)) nAdd bn_toNat(y)" org.eventb.core.prHyps="p137">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p138">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p137"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p138"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on bn_toNat(p_tail)=suc(zero) nAdd (((suc(zero) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(p_tail0)) nAdd bn_toNat(y))" org.eventb.core.prHyps="p138">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p139,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p138"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p139"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification on bn_toNat(p_tail)=suc(zero nAdd (((suc(zero) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(p_tail0)) nAdd bn_toNat(y)))" org.eventb.core.prHyps="p139">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p140,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p139"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p140"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="suc(zero) = one on bn_toNat(p_tail)=suc(((suc(zero) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(p_tail0)) nAdd bn_toNat(y))" org.eventb.core.prHyps="p140">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p141">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p140"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p141"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="1 * x = x on bn_toNat(p_tail)=suc(((one nTimes bn_toNat(p_tail0)) nAdd bn_toNat(p_tail0)) nAdd bn_toNat(y))" org.eventb.core.prHyps="p141">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p142,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p141"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p142"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p142" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p143"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="AssociativeRight on bn_toNat(p_tail)=suc(bn_toNat(p_tail0) nAdd bn_toNat(p_tail0) nAdd bn_toNat(y))" org.eventb.core.prHyps="p143">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p144,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p143"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p144"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with two nTimes bn_toNat(p_tail)=bn_toNat(p_tail0) nAdd bn_toNat(y)" org.eventb.core.prHyps="p124">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p144" org.eventb.core.prInfHyps="p145"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p144"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucIntoAdditionLeft on bn_toNat(p_tail)=suc(bn_toNat(p_tail0) nAdd (two nTimes bn_toNat(p_tail)))" org.eventb.core.prHyps="p145">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p146,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p145"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p146"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on bn_toNat(p_tail)=suc(bn_toNat(p_tail0)) nAdd (two nTimes bn_toNat(p_tail))" org.eventb.core.prHyps="p146">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p147,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p146"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p147"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="(1 + x) ∗ y = y + y * x on bn_toNat(p_tail)=suc(bn_toNat(p_tail0)) nAdd (suc(suc(zero)) nTimes bn_toNat(p_tail))" org.eventb.core.prHyps="p147">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p148">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p147"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p148"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Commutive Swap on bn_toNat(p_tail)=suc(bn_toNat(p_tail0)) nAdd (bn_toNat(p_tail) nAdd (suc(zero) nTimes bn_toNat(p_tail)))" org.eventb.core.prHyps="p148">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p149,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p148"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p149"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p144" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p143"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p149" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p150"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="AssociativeRight on bn_toNat(p_tail)=bn_toNat(p_tail) nAdd (suc(zero) nTimes bn_toNat(p_tail)) nAdd suc(bn_toNat(p_tail0))" org.eventb.core.prHyps="p150">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p151">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p150"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p151"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p58">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toNat(p_tail),(suc(zero) nTimes bn_toNat(p_tail)) nAdd suc(bn_toNat(p_tail0)))" org.eventb.core.prHyps="p58">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p152">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p58"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ hyp mp (bn_toNat(p_tail)=bn_toNat(p_tail) nAdd ((suc(zero) nTimes bn_toNat(p_tail)) nAdd suc(bn_toNat(p_tail0)))⇒(suc(zero) nTimes bn_toNat(p_tail)) nAdd suc(bn_toNat(p_tail0))=zero)" org.eventb.core.prHyps="p152">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p151">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p152"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p151" org.eventb.core.prHyps="p151"/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p153">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p152"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="sucOutsideAddition on (suc(zero) nTimes bn_toNat(p_tail)) nAdd suc(bn_toNat(p_tail0))=zero" org.eventb.core.prHyps="p153">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p154,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p153"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p154"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p151" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p150"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p154" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p65"/>
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p65"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucRight"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2,e7"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x=x nAdd y⇒y=zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="AssociativeLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="CommRewrite"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="T(1 + x) ∗ y"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucIntoAddition"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="AssociativeLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TOneTimes"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="suc(zero) = one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="sucLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="AssociativeLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="CommRewrite"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="T(1 + x) ∗ y"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p155">
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p127" org.eventb.core.prHyps="p155" org.eventb.core.prInfHyps="p156"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p155" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p157"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p156" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p158"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with p_head0=FALSE" org.eventb.core.prGoal="p126" org.eventb.core.prHyps="p157">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p161">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p66" org.eventb.core.prInfHyps="p159"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p125" org.eventb.core.prInfHyps="p160"/>
<org.eventb.core.prHypAction name="DESELECT2" org.eventb.core.prHyps="p125,p66"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="bn_toNat expansion on goal" org.eventb.core.prGoal="p161" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p162" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on bn_toNat(p_tail)=(two nTimes bn_toNat(p_tail0)) nAdd bn_toNat(y)" org.eventb.core.prHyps="p158">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p163,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p158"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p163"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="(1 + x) ∗ y = y + y * x on bn_toNat(p_tail)=(suc(suc(zero)) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(y)" org.eventb.core.prHyps="p163">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p164,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p163"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p164"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Commutive Swap on bn_toNat(p_tail)=(bn_toNat(p_tail0) nAdd (suc(zero) nTimes bn_toNat(p_tail0))) nAdd bn_toNat(y)" org.eventb.core.prHyps="p164">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p165,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p164"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p165"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prGoal="p162" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p167">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p165" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p166"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="AssociativeRight on bn_toNat(p_tail)=(suc(zero) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(p_tail0) nAdd bn_toNat(y)" org.eventb.core.prHyps="p166">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p168">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p166"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p168"/>
<org.eventb.core.prRule name="r17" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="he with two nTimes bn_toNat(p_tail)=bn_toNat(p_tail0) nAdd bn_toNat(y)" org.eventb.core.prHyps="p124">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p168" org.eventb.core.prInfHyps="p169"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p168"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="two expansion on bn_toNat(p_tail)=(suc(zero) nTimes bn_toNat(p_tail0)) nAdd (two nTimes bn_toNat(p_tail))" org.eventb.core.prHyps="p169">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p170,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p169"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p170"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="(1 + x) ∗ y = y + y * x on bn_toNat(p_tail)=(suc(zero) nTimes bn_toNat(p_tail0)) nAdd (suc(suc(zero)) nTimes bn_toNat(p_tail))" org.eventb.core.prHyps="p170">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p171,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p170"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p171"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Commutive Swap on bn_toNat(p_tail)=(suc(zero) nTimes bn_toNat(p_tail0)) nAdd (bn_toNat(p_tail) nAdd (suc(zero) nTimes bn_toNat(p_tail)))" org.eventb.core.prHyps="p171">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p172,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p171"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p172"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p168" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p166"/>
<org.eventb.core.prHypAction name="REWRITE2" org.eventb.core.prHidden="p172" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p173"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="AssociativeRight on bn_toNat(p_tail)=bn_toNat(p_tail) nAdd (suc(zero) nTimes bn_toNat(p_tail)) nAdd (suc(zero) nTimes bn_toNat(p_tail0))" org.eventb.core.prHyps="p173">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2,p174">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p173"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p174"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p58">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toNat(p_tail),(suc(zero) nTimes bn_toNat(p_tail)) nAdd (suc(zero) nTimes bn_toNat(p_tail0)))" org.eventb.core.prHyps="p58">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p175">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p58"/>
<org.eventb.core.prRule name="r14" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⇒ hyp mp (bn_toNat(p_tail)=bn_toNat(p_tail) nAdd ((suc(zero) nTimes bn_toNat(p_tail)) nAdd (suc(zero) nTimes bn_toNat(p_tail0)))⇒(suc(zero) nTimes bn_toNat(p_tail)) nAdd (suc(zero) nTimes bn_toNat(p_tail0))=zero)" org.eventb.core.prHyps="p175">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p174">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p175"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p174" org.eventb.core.prHyps="p174"/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p176">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p175"/>
<org.eventb.core.prRule name="r13" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="dc (bn_toNat(p_tail)=zero)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p110">
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(p_tail)=zero" org.eventb.core.prGoal="p167" org.eventb.core.prHyps="p110">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p180">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p124" org.eventb.core.prInfHyps="p177"/>
<org.eventb.core.prHypAction name="FORWARD_INF1" org.eventb.core.prHyps="p174" org.eventb.core.prInfHyps="p178"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p176" org.eventb.core.prInfHyps="p179"/>
<org.eventb.core.prHypAction name="DESELECT3" org.eventb.core.prHyps="p124,p174,p176"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 0 = 0  (auto rewrite)" org.eventb.core.prGoal="p180" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p184" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p177" org.eventb.core.prInfHyps="p181"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p177"/>
<org.eventb.core.prHypAction name="FORWARD_INF2" org.eventb.core.prHyps="p178" org.eventb.core.prInfHyps="p182"/>
<org.eventb.core.prHypAction name="HIDE3" org.eventb.core.prHyps="p178"/>
<org.eventb.core.prHypAction name="FORWARD_INF4" org.eventb.core.prHyps="p179" org.eventb.core.prInfHyps="p183"/>
<org.eventb.core.prHypAction name="HIDE5" org.eventb.core.prHyps="p179"/>
<org.eventb.core.prHypAction name="SELECT6" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p183" org.eventb.core.prInfHyps="p185"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p183"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p174" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p173"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="AssociativeRight on zero=zero nAdd zero nAdd (suc(zero) nTimes bn_toNat(p_tail0))" org.eventb.core.prHyps="p182">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p186,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p182"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p186"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p186" org.eventb.core.prInfHyps="p187"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p186"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p187" org.eventb.core.prHyps="p185" org.eventb.core.prInfHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p188">
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst bn_toNat(p_tail0),bn_toNat(y))" org.eventb.core.prHyps="p188">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p189">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p188"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p189" org.eventb.core.prHyps="p181" org.eventb.core.prInfHyps="p190"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p190" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p191,p192"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(y)=zero" org.eventb.core.prGoal="p184" org.eventb.core.prHyps="p192">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p194">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p181" org.eventb.core.prInfHyps="p193"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p181"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Adding zero simplification  (auto rewrite)" org.eventb.core.prGoal="p194" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p196" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p193" org.eventb.core.prInfHyps="p195"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p193"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p195" org.eventb.core.prHyps="p191" org.eventb.core.prInfHyps="p2"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r5" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="eh with bn_toNat(p_tail0)=zero" org.eventb.core.prGoal="p196" org.eventb.core.prHyps="p191">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p118">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p185" org.eventb.core.prInfHyps="p197"/>
<org.eventb.core.prHypAction name="DESELECT1" org.eventb.core.prHyps="p185"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="x * 0 = 0  (auto rewrite)" org.eventb.core.prGoal="p118" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prGoal="p115" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p197" org.eventb.core.prInfHyps="p115"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p197"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r15" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="hyp" org.eventb.core.prGoal="p115" org.eventb.core.prHyps="p115"/>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesZero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroRight"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e8,e9"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x nAdd y=zero⇔x=zero∧y=zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="AssociativeLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="zeroLeft"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TTimesZero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name=")" org.eventb.core.prHyps="p119">
<org.eventb.core.prRule name="r8" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="Instantiate Theorem(s)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prHyps="p188">
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="HIDE0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="REWRITE1" org.eventb.core.prHidden="p174" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p173"/>
<org.eventb.core.prRule name="r9" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="∀ hyp (inst suc(zero) nTimes bn_toNat(p_tail),suc(zero) nTimes bn_toNat(p_tail0))" org.eventb.core.prHyps="p188">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p198">
<org.eventb.core.prHypAction name="DESELECT0" org.eventb.core.prHyps="p188"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p198" org.eventb.core.prHyps="p176" org.eventb.core.prInfHyps="p199"/>
<org.eventb.core.prRule name="r6" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="simplification rewrites" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p199" org.eventb.core.prHyps="" org.eventb.core.prInfHyps="p200,p185"/>
<org.eventb.core.prRule name="r11" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="suc(zero) = one on suc(zero) nTimes bn_toNat(p_tail)=zero" org.eventb.core.prHyps="p200">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p201,p2">
<org.eventb.core.prHypAction name="SELECT0" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p200"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p201"/>
<org.eventb.core.prRule name="r12" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="1 * x = x  (auto rewrite)" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'" org.eventb.core.prGoal="p2">
<org.eventb.core.prRule name="r2" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊤ goal" org.eventb.core.prGoal="p2" org.eventb.core.prHyps=""/>
</org.eventb.core.prAnte>
<org.eventb.core.prAnte name="(" org.eventb.core.prHyps="p2">
<org.eventb.core.prHypAction name="FORWARD_INF0" org.eventb.core.prHyps="p201" org.eventb.core.prInfHyps="p110"/>
<org.eventb.core.prHypAction name="HIDE1" org.eventb.core.prHyps="p201"/>
<org.eventb.core.prHypAction name="SELECT2" org.eventb.core.prHyps="p2"/>
<org.eventb.core.prRule name="r10" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="generalized MP" org.eventb.core.prHyps="">
<org.eventb.core.prAnte name="'">
<org.eventb.core.prHypAction name="REWRITE0" org.eventb.core.prHidden="p110" org.eventb.core.prHyps="p119" org.eventb.core.prInfHyps="p65"/>
<org.eventb.core.prRule name="r16" org.eventb.core.confidence="1000" org.eventb.core.prDisplay="⊥ hyp" org.eventb.core.prHyps="p65"/>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="TOneTimes"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="suc(zero) = one"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e10,e11"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x nAdd y=zero⇔x=zero∧y=zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p110"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prExprRef name=".exprs" org.eventb.core.prRef="e2,e12"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".string0" org.eventb.core.prSValue="∀x,y·x=x nAdd y⇒y=zero"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="AssociativeLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="CommRewrite"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="T(1 + x) ∗ y"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="AssociativeLeft"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="CommRewrite"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NaturalsMultiply"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="T(1 + x) ∗ y"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="Maths"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="Naturals"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="Naturals.two"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p128"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="1.0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p29"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".ThyProject" org.eventb.core.prSValue="BinaryNumbers"/>
<org.eventb.core.prString name=".Thy" org.eventb.core.prSValue="NatBijection"/>
<org.eventb.core.prString name=".Rule" org.eventb.core.prSValue="NatBijection.bn_toNat case 1"/>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prString name=".pos" org.eventb.core.prSValue="0.0"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p5"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
<org.eventb.core.prPredRef name=".pred" org.eventb.core.prRef="p3"/>
</org.eventb.core.prRule>
</org.eventb.core.prAnte>
</org.eventb.core.prRule>
<org.eventb.core.prPred name="p3" org.eventb.core.predicate="∃a⦂List(BOOL)·a=x bn_Add y">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p115" org.eventb.core.predicate="(zero ⦂ Nat)=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p193" org.eventb.core.predicate="(zero ⦂ Nat)=bn_toNat(p_tail0) nAdd (zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p159" org.eventb.core.predicate="x=cons(FALSE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p136" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd ((suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p95" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=(zero ⦂ Nat) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p12" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))∧y=(nil ⦂ List(BOOL))⇔⊤">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p24" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(x) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p189" org.eventb.core.predicate="bn_toNat(p_tail0) nAdd bn_toNat(y)=(zero ⦂ Nat)⇔bn_toNat(p_tail0)=(zero ⦂ Nat)∧bn_toNat(y)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p48" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p53" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd bn_toNat(p_tail) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p8" org.eventb.core.predicate="a=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p122" org.eventb.core.predicate="suc(zero ⦂ Nat)=(two ⦂ Nat)"/>
<org.eventb.core.prPred name="p21" org.eventb.core.predicate="bn_toNat(nil ⦂ List(BOOL))=bn_toNat(nil ⦂ List(BOOL)) nAdd bn_toNat(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p141" org.eventb.core.predicate="bn_toNat(p_tail)=suc((((one ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(p_tail0)) nAdd bn_toNat(y))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p192" org.eventb.core.predicate="bn_toNat(y)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p50" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p27" org.eventb.core.predicate="bn_toNat(cons(p_head,p_tail))=bn_toNat(x) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p124" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(p_tail0) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p158" org.eventb.core.predicate="bn_toNat(p_tail)=((two ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p170" org.eventb.core.predicate="bn_toNat(p_tail)=(suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd (suc(suc(zero ⦂ Nat)) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p119" org.eventb.core.predicate="¬bn_toNat(p_tail)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p102" org.eventb.core.predicate="bn_toNat(p_tail)=COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p7" org.eventb.core.predicate="bn_toNat(a)=bn_toNat(x) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p76" org.eventb.core.predicate="(one ⦂ Nat) nAdd a0 nAdd (suc(zero ⦂ Nat) nTimes a0)=a0">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p20" org.eventb.core.predicate="bn_toNat((nil ⦂ List(BOOL)) bn_Add (nil ⦂ List(BOOL)))=bn_toNat(nil ⦂ List(BOOL)) nAdd bn_toNat(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p35" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(nil ⦂ List(BOOL)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p88" org.eventb.core.predicate="COND(⊥,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=bn_toNat(x) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p38" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes ((zero ⦂ Nat) nAdd bn_toNat(y)))=bn_toNat(nil ⦂ List(BOOL)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p25" org.eventb.core.predicate="a=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p191" org.eventb.core.predicate="bn_toNat(p_tail0)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p58" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·x=x nAdd y⇒y=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p156" org.eventb.core.predicate="bn_toNat(p_tail)=COND(⊥,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0)),(two ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p59" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(p_tail) nAdd ((one ⦂ Nat) nAdd bn_toNat(p_tail))⇒(one ⦂ Nat) nAdd bn_toNat(p_tail)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p111" org.eventb.core.predicate="¬⊤⇒(one ⦂ Nat)=(two ⦂ Nat)"/>
<org.eventb.core.prPred name="p186" org.eventb.core.predicate="(zero ⦂ Nat)=(zero ⦂ Nat) nAdd ((zero ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p2" org.eventb.core.predicate="⊤"/>
<org.eventb.core.prPred name="p65" org.eventb.core.predicate="⊥"/>
<org.eventb.core.prPred name="p73" org.eventb.core.predicate="a0=bn_toNat(p_tail0) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p181" org.eventb.core.predicate="(zero ⦂ Nat)=bn_toNat(p_tail0) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p93" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Add y=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p43" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(nil ⦂ List(BOOL)) nAdd bn_toNat(cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p63" org.eventb.core.predicate="suc(bn_toNat(p_tail))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p196" org.eventb.core.predicate="(zero ⦂ Nat)=(two ⦂ Nat) nTimes bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p174" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(p_tail) nAdd ((suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p201" org.eventb.core.predicate="(one ⦂ Nat) nTimes bn_toNat(p_tail)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p52" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd (bn_toNat(p_tail) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p41" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(y))=bn_toNat(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p4" org.eventb.core.predicate="a=x bn_Add y">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p185" org.eventb.core.predicate="suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p40" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(y))=(zero ⦂ Nat) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p177" org.eventb.core.predicate="(two ⦂ Nat) nTimes (zero ⦂ Nat)=bn_toNat(p_tail0) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p120" org.eventb.core.predicate="¬⊥⇒(one ⦂ Nat)=(two ⦂ Nat)"/>
<org.eventb.core.prPred name="p172" org.eventb.core.predicate="bn_toNat(p_tail)=(bn_toNat(p_tail) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail))) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p126" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(cons(p_head0,p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p132" org.eventb.core.predicate="cons(TRUE,p_tail0) bn_Add y=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p57" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(p_tail) nAdd ((one ⦂ Nat) nAdd bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p116" org.eventb.core.predicate="(zero ⦂ Nat)=COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p130" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p190" org.eventb.core.predicate="⊤⇔bn_toNat(p_tail0)=(zero ⦂ Nat)∧bn_toNat(y)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p149" org.eventb.core.predicate="bn_toNat(p_tail)=(bn_toNat(p_tail) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail))) nAdd suc(bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p74" org.eventb.core.predicate="(one ⦂ Nat) nAdd (suc(suc(zero ⦂ Nat)) nTimes a0)=a0">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p175" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(p_tail) nAdd ((suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)))⇒(suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p29" org.eventb.core.predicate="p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p107" org.eventb.core.predicate="¬bn_toNat(p_tail)=(zero ⦂ Nat)⇒(bn_toNat(p_tail)=bn_toNat(p_tail) nTimes (two ⦂ Nat)⇒(one ⦂ Nat)=(two ⦂ Nat))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p113" org.eventb.core.predicate="(two ⦂ Nat) nTimes (zero ⦂ Nat)=bn_toNat(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p56" org.eventb.core.predicate="bn_toNat(p_tail)=((one ⦂ Nat) nAdd bn_toNat(p_tail)) nAdd bn_toNat(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p13" org.eventb.core.predicate="y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p89" org.eventb.core.predicate="p_head=FALSE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p16" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Add y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p54" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd bn_toNat(p_tail) nAdd ((one ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p150" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(p_tail) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)) nAdd suc(bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p129" org.eventb.core.predicate="bn_toNat(p_tail)=COND(⊤,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0)),(two ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p39" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(y))=bn_toNat(nil ⦂ List(BOOL)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p161" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(cons(FALSE,p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p30" org.eventb.core.predicate="COND(⊤,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=bn_toNat(x) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p18" org.eventb.core.predicate="a=(nil ⦂ List(BOOL)) bn_Add (nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p131" org.eventb.core.predicate="x=cons(TRUE,p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p31" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))=bn_toNat(x) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p33" org.eventb.core.predicate="a=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p146" org.eventb.core.predicate="bn_toNat(p_tail)=suc(bn_toNat(p_tail0)) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p64" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(p_tail) nAdd (one ⦂ Nat) nAdd bn_toNat(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p142" org.eventb.core.predicate="bn_toNat(p_tail)=suc((bn_toNat(p_tail0) nAdd bn_toNat(p_tail0)) nAdd bn_toNat(y))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p134" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd (suc(suc(zero ⦂ Nat)) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p75" org.eventb.core.predicate="(one ⦂ Nat) nAdd (a0 nAdd (suc(zero ⦂ Nat) nTimes a0))=a0">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p83" org.eventb.core.predicate="(one ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes a0)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p187" org.eventb.core.predicate="(zero ⦂ Nat)=suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p101" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p135" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd (bn_toNat(p_tail0) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0))) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p155" org.eventb.core.predicate="¬p_head0=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p109" org.eventb.core.predicate="¬bn_toNat(p_tail)=(zero ⦂ Nat)⇒(one ⦂ Nat)=(two ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p26" org.eventb.core.predicate="x bn_Add y=cons(p_head,p_tail)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p162" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=COND(FALSE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0)),(two ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p188" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·x nAdd y=(zero ⦂ Nat)⇔x=(zero ⦂ Nat)∧y=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p49" org.eventb.core.predicate="bn_toNat(p_tail)=COND(TRUE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p147" org.eventb.core.predicate="bn_toNat(p_tail)=suc(bn_toNat(p_tail0)) nAdd (suc(suc(zero ⦂ Nat)) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p127" org.eventb.core.predicate="bn_toNat(p_tail)=COND(p_head0=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail0)),(two ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p62" org.eventb.core.predicate="suc((zero ⦂ Nat) nAdd bn_toNat(p_tail))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p81" org.eventb.core.predicate="a0=a0 nAdd ((one ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes a0))⇒(one ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes a0)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p118" org.eventb.core.predicate="(zero ⦂ Nat)=(two ⦂ Nat) nTimes (zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p194" org.eventb.core.predicate="(zero ⦂ Nat)=((two ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd (zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p94" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(nil ⦂ List(BOOL)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p46" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(cons(TRUE,p_tail)))=(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p77" org.eventb.core.predicate="((one ⦂ Nat) nAdd a0) nAdd (suc(zero ⦂ Nat) nTimes a0)=a0">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p92" org.eventb.core.predicate="a=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p183" org.eventb.core.predicate="(zero ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p106" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·¬x=(zero ⦂ Nat)⇒(x=x nTimes y⇒(one ⦂ Nat)=y)"/>
<org.eventb.core.prPred name="p6" org.eventb.core.predicate="bn_toNat(x bn_Add y)=bn_toNat(x bn_Add y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p66" org.eventb.core.predicate="x=cons(p_head0,p_tail0)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p160" org.eventb.core.predicate="cons(FALSE,p_tail0) bn_Add y=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p154" org.eventb.core.predicate="suc((suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)) nAdd bn_toNat(p_tail0))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p5" org.eventb.core.predicate="bn_toNat(x bn_Add y)=bn_toNat(a)">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p17" org.eventb.core.predicate="bn_toNat((nil ⦂ List(BOOL)) bn_Add y)=bn_toNat(nil ⦂ List(BOOL)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p176" org.eventb.core.predicate="(suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p167" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=((two ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p108" org.eventb.core.predicate="¬bn_toNat(p_tail)=(zero ⦂ Nat)⇒(⊤⇒(one ⦂ Nat)=(two ⦂ Nat))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p123" org.eventb.core.predicate="suc(zero ⦂ Nat)=suc(suc(zero ⦂ Nat))"/>
<org.eventb.core.prPred name="p69" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Add y=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p168" org.eventb.core.predicate="bn_toNat(p_tail)=(suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd (bn_toNat(p_tail0) nAdd bn_toNat(y))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p80" org.eventb.core.predicate="a0 nAdd ((one ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes a0))=a0">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p45" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(cons(TRUE,p_tail)))=COND(TRUE=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p9" org.eventb.core.predicate="x bn_Add y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p104" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(p_tail) nTimes (two ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p199" org.eventb.core.predicate="⊤⇔suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)=(zero ⦂ Nat)∧suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p114" org.eventb.core.predicate="(zero ⦂ Nat)=bn_toNat(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p51" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd (suc(suc(zero ⦂ Nat)) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p145" org.eventb.core.predicate="bn_toNat(p_tail)=suc(bn_toNat(p_tail0) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p37" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes (bn_toNat(nil ⦂ List(BOOL)) nAdd bn_toNat(y)))=bn_toNat(nil ⦂ List(BOOL)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p139" org.eventb.core.predicate="bn_toNat(p_tail)=suc((zero ⦂ Nat) nAdd (((suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(p_tail0)) nAdd bn_toNat(y)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p90" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(x) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p110" org.eventb.core.predicate="bn_toNat(p_tail)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p157" org.eventb.core.predicate="p_head0=FALSE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p28" org.eventb.core.predicate="COND(p_head=TRUE,(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail)),(two ⦂ Nat) nTimes bn_toNat(p_tail))=bn_toNat(x) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p103" org.eventb.core.predicate="bn_toNat(p_tail)=(two ⦂ Nat) nTimes bn_toNat(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p32" org.eventb.core.predicate="x bn_Add y=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p34" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes (bn_toNat(x) nAdd bn_toNat(y)))=bn_toNat(x) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p178" org.eventb.core.predicate="(zero ⦂ Nat)=(zero ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes (zero ⦂ Nat)) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p44" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes bn_toNat(cons(TRUE,p_tail)))=bn_toNat(cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p144" org.eventb.core.predicate="bn_toNat(p_tail)=suc(bn_toNat(p_tail0) nAdd (bn_toNat(p_tail0) nAdd bn_toNat(y)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p99" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p173" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(p_tail) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p171" org.eventb.core.predicate="bn_toNat(p_tail)=(suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd (bn_toNat(p_tail) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p128" org.eventb.core.predicate="p_head0=TRUE">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p70" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes (bn_toNat(cons(p_head0,p_tail0)) nAdd bn_toNat(y)))=bn_toNat(cons(p_head0,p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p153" org.eventb.core.predicate="(suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)) nAdd suc(bn_toNat(p_tail0))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p84" org.eventb.core.predicate="suc(zero ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes a0)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p82" org.eventb.core.predicate="a0=a0 nAdd ((one ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes a0))">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p140" org.eventb.core.predicate="bn_toNat(p_tail)=suc(((suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(p_tail0)) nAdd bn_toNat(y))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p137" org.eventb.core.predicate="bn_toNat(p_tail)=suc(zero ⦂ Nat) nAdd ((suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p47" org.eventb.core.predicate="bn_toNat(p_tail)=(zero ⦂ Nat) nAdd bn_toNat(cons(TRUE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p125" org.eventb.core.predicate="cons(p_head0,p_tail0) bn_Add y=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p67" org.eventb.core.predicate="(one ⦂ Nat) nAdd ((two ⦂ Nat) nTimes (bn_toNat(p_tail0) nAdd bn_toNat(y)))=bn_toNat(p_tail0) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p86" org.eventb.core.predicate="suc(suc(zero ⦂ Nat) nTimes a0)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p0" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_toNat(x bn_Add y)=bn_toNat(x) nAdd bn_toNat(y)"/>
<org.eventb.core.prPred name="p61" org.eventb.core.predicate="suc(zero ⦂ Nat) nAdd bn_toNat(p_tail)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p85" org.eventb.core.predicate="suc((zero ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes a0))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p197" org.eventb.core.predicate="suc(zero ⦂ Nat) nTimes (zero ⦂ Nat)=(zero ⦂ Nat)"/>
<org.eventb.core.prPred name="p14" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p98" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(nil ⦂ List(BOOL)) nAdd bn_toNat(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p133" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(cons(TRUE,p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p79" org.eventb.core.predicate="a0 nAdd (one ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes a0)=a0">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p112" org.eventb.core.predicate="(zero ⦂ Nat)=(zero ⦂ Nat) nTimes (two ⦂ Nat)"/>
<org.eventb.core.prPred name="p55" org.eventb.core.predicate="bn_toNat(p_tail)=(one ⦂ Nat) nAdd bn_toNat(p_tail) nAdd bn_toNat(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p151" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(p_tail) nAdd ((suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)) nAdd suc(bn_toNat(p_tail0)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p143" org.eventb.core.predicate="bn_toNat(p_tail)=suc(bn_toNat(p_tail0) nAdd bn_toNat(p_tail0) nAdd bn_toNat(y))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p72" org.eventb.core.predicate="∃a⦂Nat·a=bn_toNat(p_tail0) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p169" org.eventb.core.predicate="bn_toNat(p_tail)=(suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd ((two ⦂ Nat) nTimes bn_toNat(p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p198" org.eventb.core.predicate="(suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0))=(zero ⦂ Nat)⇔suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)=(zero ⦂ Nat)∧suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p36" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Add y=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p42" org.eventb.core.predicate="y=cons(TRUE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p121" org.eventb.core.predicate="(one ⦂ Nat)=(two ⦂ Nat)"/>
<org.eventb.core.prPred name="p78" org.eventb.core.predicate="(a0 nAdd (one ⦂ Nat)) nAdd (suc(zero ⦂ Nat) nTimes a0)=a0">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p87" org.eventb.core.predicate="¬p_head=TRUE">
<org.eventb.core.prIdent name="p_head" org.eventb.core.type="BOOL"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p19" org.eventb.core.predicate="(nil ⦂ List(BOOL)) bn_Add (nil ⦂ List(BOOL))=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p100" org.eventb.core.predicate="bn_toNat(p_tail)=(zero ⦂ Nat) nAdd bn_toNat(cons(FALSE,p_tail))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p105" org.eventb.core.predicate="∀x⦂Nat,y⦂Nat·x≠(zero ⦂ Nat)⇒(x=x nTimes y⇒(one ⦂ Nat)=y)"/>
<org.eventb.core.prPred name="p71" org.eventb.core.predicate="(one ⦂ Nat) nAdd (suc(suc(zero ⦂ Nat)) nTimes (bn_toNat(p_tail0) nAdd bn_toNat(y)))=bn_toNat(p_tail0) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p165" org.eventb.core.predicate="bn_toNat(p_tail)=((suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p179" org.eventb.core.predicate="(suc(zero ⦂ Nat) nTimes (zero ⦂ Nat)) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p182" org.eventb.core.predicate="(zero ⦂ Nat)=(zero ⦂ Nat) nAdd (zero ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p96" org.eventb.core.predicate="(two ⦂ Nat) nTimes bn_toNat(p_tail)=bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p15" org.eventb.core.predicate="a=(nil ⦂ List(BOOL)) bn_Add y">
<org.eventb.core.prIdent name="a" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p195" org.eventb.core.predicate="(zero ⦂ Nat)=bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p138" org.eventb.core.predicate="bn_toNat(p_tail)=suc(zero ⦂ Nat) nAdd (((suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(p_tail0)) nAdd bn_toNat(y))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p68" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(cons(p_head0,p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_head0" org.eventb.core.type="BOOL"/>
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p11" org.eventb.core.predicate="x=(nil ⦂ List(BOOL))∧y=(nil ⦂ List(BOOL))⇔x bn_Add y=(nil ⦂ List(BOOL))">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p148" org.eventb.core.predicate="bn_toNat(p_tail)=suc(bn_toNat(p_tail0)) nAdd (bn_toNat(p_tail) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p1" org.eventb.core.predicate="bn_toNat(x bn_Add y)=bn_toNat(x) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p91" org.eventb.core.predicate="x bn_Add y=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p164" org.eventb.core.predicate="bn_toNat(p_tail)=(bn_toNat(p_tail0) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0))) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p152" org.eventb.core.predicate="bn_toNat(p_tail)=bn_toNat(p_tail) nAdd ((suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)) nAdd suc(bn_toNat(p_tail0)))⇒(suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)) nAdd suc(bn_toNat(p_tail0))=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p97" org.eventb.core.predicate="y=cons(FALSE,p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p22" org.eventb.core.predicate="bn_toNat(nil ⦂ List(BOOL))=(zero ⦂ Nat) nAdd bn_toNat(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p184" org.eventb.core.predicate="(zero ⦂ Nat)=((two ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p60" org.eventb.core.predicate="(one ⦂ Nat) nAdd bn_toNat(p_tail)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p163" org.eventb.core.predicate="bn_toNat(p_tail)=(suc(suc(zero ⦂ Nat)) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p10" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x=(nil ⦂ List(BOOL))∧y=(nil ⦂ List(BOOL))⇔x bn_Add y=(nil ⦂ List(BOOL))"/>
<org.eventb.core.prPred name="p180" org.eventb.core.predicate="(two ⦂ Nat) nTimes (zero ⦂ Nat)=((two ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p166" org.eventb.core.predicate="bn_toNat(p_tail)=(suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)) nAdd bn_toNat(p_tail0) nAdd bn_toNat(y)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p117" org.eventb.core.predicate="(zero ⦂ Nat)=(two ⦂ Nat) nTimes bn_toNat(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p200" org.eventb.core.predicate="suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)=(zero ⦂ Nat)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prPred>
<org.eventb.core.prPred name="p23" org.eventb.core.predicate="bn_toNat(nil ⦂ List(BOOL))=bn_toNat(nil ⦂ List(BOOL))"/>
<org.eventb.core.prExpr name="e4" org.eventb.core.expression="a0">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e3" org.eventb.core.expression="(one ⦂ Nat) nAdd bn_toNat(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e2" org.eventb.core.expression="bn_toNat(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e6" org.eventb.core.expression="two ⦂ Nat"/>
<org.eventb.core.prExpr name="e11" org.eventb.core.expression="suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e1" org.eventb.core.expression="y">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e7" org.eventb.core.expression="(suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)) nAdd suc(bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e9" org.eventb.core.expression="bn_toNat(y)">
<org.eventb.core.prIdent name="y" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e12" org.eventb.core.expression="(suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)) nAdd (suc(zero ⦂ Nat) nTimes bn_toNat(p_tail0))">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e10" org.eventb.core.expression="suc(zero ⦂ Nat) nTimes bn_toNat(p_tail)">
<org.eventb.core.prIdent name="p_tail" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e0" org.eventb.core.expression="x">
<org.eventb.core.prIdent name="x" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e5" org.eventb.core.expression="(one ⦂ Nat) nAdd (suc(zero ⦂ Nat) nTimes a0)">
<org.eventb.core.prIdent name="a0" org.eventb.core.type="Nat"/>
</org.eventb.core.prExpr>
<org.eventb.core.prExpr name="e8" org.eventb.core.expression="bn_toNat(p_tail0)">
<org.eventb.core.prIdent name="p_tail0" org.eventb.core.type="List(BOOL)"/>
</org.eventb.core.prExpr>
<org.eventb.core.prReas name="r7" org.eventb.core.prRID="org.eventb.core.seqprover.dtInduction"/>
<org.eventb.core.prReas name="r0" org.eventb.core.prRID="org.eventb.core.seqprover.allI"/>
<org.eventb.core.prReas name="r2" org.eventb.core.prRID="org.eventb.core.seqprover.trueGoal"/>
<org.eventb.core.prReas name="r8" org.eventb.core.prRID="org.eventb.theory.rbp.instantiateTheoremReasoner"/>
<org.eventb.core.prReas name="r9" org.eventb.core.prRID="org.eventb.core.seqprover.allD"/>
<org.eventb.core.prReas name="r3" org.eventb.core.prRID="org.eventb.core.seqprover.onePointRule:2"/>
<org.eventb.core.prReas name="r4" org.eventb.core.prRID="org.eventb.core.seqprover.exF"/>
<org.eventb.core.prReas name="r18" org.eventb.core.prRID="org.eventb.core.seqprover.mngHyp"/>
<org.eventb.core.prReas name="r17" org.eventb.core.prRID="org.eventb.core.seqprover.he:1"/>
<org.eventb.core.prReas name="r13" org.eventb.core.prRID="org.eventb.core.seqprover.doCase"/>
<org.eventb.core.prReas name="r6" org.eventb.core.prRID="org.eventb.core.seqprover.autoRewritesL4:0"/>
<org.eventb.core.prReas name="r10" org.eventb.core.prRID="org.eventb.core.seqprover.genMPL2"/>
<org.eventb.core.prReas name="r15" org.eventb.core.prRID="org.eventb.core.seqprover.hyp"/>
<org.eventb.core.prReas name="r16" org.eventb.core.prRID="org.eventb.core.seqprover.falseHyp"/>
<org.eventb.core.prReas name="r19" org.eventb.core.prRID="org.eventb.core.seqprover.locEq"/>
<org.eventb.core.prReas name="r1" org.eventb.core.prRID="org.eventb.core.seqprover.cut"/>
<org.eventb.core.prReas name="r5" org.eventb.core.prRID="org.eventb.core.seqprover.eq:1"/>
<org.eventb.core.prReas name="r14" org.eventb.core.prRID="org.eventb.core.seqprover.impE:2"/>
<org.eventb.core.prReas name="r11" org.eventb.core.prRID="org.eventb.theory.rbp.manualRewriteReasoner"/>
<org.eventb.core.prReas name="r12" org.eventb.core.prRID="org.eventb.theory.rbp.autoRewriteReasoner"/>
</org.eventb.core.prProof>
</org.eventb.core.prFile>
