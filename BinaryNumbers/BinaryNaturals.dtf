<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.deployedTheoryRoot org.eventb.core.accurate="true" org.eventb.core.comment="GENERATED THEORY FILE: !DO NOT CHANGE!" org.eventb.theory.core.modificationHashValue="60e581cd5043bc4acbee02e8aab72a61" org.eventb.theory.core.outdated="false">
<org.eventb.theory.core.useTheory name="NaturalsMultiply" org.eventb.core.scTarget="/Maths/NaturalsMultiply.dtf|org.eventb.theory.core.deployedTheoryRoot#NaturalsMultiply"/>
<org.eventb.theory.core.useTheory name="BOOL" org.eventb.core.scTarget="/BOOL/BOOL.dtf|org.eventb.theory.core.deployedTheoryRoot#BOOL"/>
<org.eventb.theory.core.useTheory name="BitwiseOps" org.eventb.core.scTarget="/BinaryNumbers/BitwiseOps.dtf|org.eventb.theory.core.deployedTheoryRoot#BitwiseOps"/>
<org.eventb.theory.core.useTheory name="BinaryEquality" org.eventb.core.scTarget="/BinaryNumbers/BinaryEquality.dtf|org.eventb.theory.core.deployedTheoryRoot#BinaryEquality"/>
<org.eventb.theory.core.useTheory name="IncrementNaturals" org.eventb.core.scTarget="/BinaryNumbers/IncrementNaturals.dtf|org.eventb.theory.core.deployedTheoryRoot#IncrementNaturals"/>
<org.eventb.theory.core.scNewOperatorDefinition name="*" org.eventb.core.label="bn_Add" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name="+" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xs)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;|org.eventb.theory.core.recursiveOperatorDefinition#+|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),cons(xB,xs),COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y)))))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scTheorem name="generatedBlocl" org.eventb.core.label="x bn_Add nil = x" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Add (nil ⦂ List(BOOL))=x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#v" org.eventb.theory.core.order="0"/>
<org.eventb.theory.core.scTheorem name="generatedBlocm" org.eventb.core.label="ReverseExpand" org.eventb.core.predicate="∀x⦂List(BOOL),yB⦂BOOL,yT⦂List(BOOL)·x bn_Add cons(yB,yT)=COND(yB=TRUE∧bn_LSB(x)=TRUE,cons(FALSE,bn_increment(bn_shiftLeft1(x) bn_Add yT)),COND(¬yB=TRUE∧¬bn_LSB(x)=TRUE,cons(FALSE,bn_shiftLeft1(x) bn_Add yT),cons(TRUE,bn_shiftLeft1(x) bn_Add yT)))" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#x" org.eventb.theory.core.order="1"/>
<org.eventb.theory.core.scTheorem name="generatedBlocn" org.eventb.core.label="nil add nil = nil" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x=(nil ⦂ List(BOOL))∧y=(nil ⦂ List(BOOL))⇔x bn_Add y=(nil ⦂ List(BOOL))" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#'0" org.eventb.theory.core.order="2"/>
<org.eventb.theory.core.scTheorem name="generatedBloco" org.eventb.core.label="expand cons" org.eventb.core.predicate="∀x⦂List(BOOL)·cons(FALSE,x) bn_Eq x bn_Add x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#'." org.eventb.theory.core.order="3"/>
<org.eventb.theory.core.scTheorem name="generatedBlocp" org.eventb.core.label="expand Cons TRUE" org.eventb.core.predicate="∀x⦂List(BOOL)·cons(TRUE,x) bn_Eq bn_increment(x bn_Add x)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#'\/" org.eventb.theory.core.order="4"/>
<org.eventb.theory.core.scTheorem name="generatedBlocq" org.eventb.core.label="hasSetBit(x) ⇒ hasSetBit(x bn_Add y)" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_hasSetBit(x)⇒bn_hasSetBit(x bn_Add y)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#'+" org.eventb.theory.core.order="5"/>
<org.eventb.theory.core.scTheorem name="generatedBlocr" org.eventb.core.label="zero bn_add Corrally1" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isZero(x)⇒x bn_Add y bn_Eq y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#{" org.eventb.theory.core.order="6"/>
<org.eventb.theory.core.scTheorem name="generatedBlocs" org.eventb.core.label="zero bn_add Corrally2" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x bn_Add y=y⇒bn_isZero(x)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#\|" org.eventb.theory.core.order="7"/>
<org.eventb.theory.core.scTheorem name="generatedBloct" org.eventb.core.label="zero bn_add x = x" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isZero(y)⇔y bn_Add x=x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#z" org.eventb.theory.core.order="8"/>
<org.eventb.theory.core.scTheorem name="generatedBlocu" org.eventb.core.label="zero Add Zero = zero" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isZero(x)∧bn_isZero(y)⇔bn_isZero(x bn_Add y)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#'(" org.eventb.theory.core.order="9"/>
<org.eventb.theory.core.scTheorem name="generatedBlocv" org.eventb.core.label="CountBitsImpl1" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_countBits(x bn_Add y)≥bn_countBits(x)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#'-" org.eventb.theory.core.order="10"/>
<org.eventb.theory.core.scTheorem name="generatedBlocw" org.eventb.core.label="add nil" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Add (nil ⦂ List(BOOL)) bn_Eq (nil ⦂ List(BOOL))" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#'," org.eventb.theory.core.order="11"/>
<org.eventb.theory.core.scTheorem name="generatedBlocx" org.eventb.core.label="add Equality" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL),z⦂List(BOOL)·x bn_Eq y⇔z bn_Add x bn_Eq z bn_Add y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#'*" org.eventb.theory.core.order="12"/>
<org.eventb.theory.core.scTheorem name="generatedBlocy" org.eventb.core.label="bn_Add zero" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isZero(y)⇔x bn_Add y bn_Eq x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#')" org.eventb.theory.core.order="13"/>
<org.eventb.theory.core.scTheorem name="generatedBlocz" org.eventb.core.label="incrementOutAddition" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_increment(x) bn_Add y bn_Eq bn_increment(x bn_Add y)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#''" org.eventb.theory.core.order="14"/>
<org.eventb.theory.core.scTheorem name="generatedBloc{" org.eventb.core.label="EqualNumsAddToSame" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL),z⦂List(BOOL)·y bn_Eq z⇒x bn_Add y bn_Eq x bn_Add z" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#~" org.eventb.theory.core.order="15"/>
<org.eventb.theory.core.scTheorem name="generatedBloc|" org.eventb.core.label="AdditionReduction" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL),z⦂List(BOOL)·x bn_Add y bn_Eq x bn_Add z⇒y bn_Eq z" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#y" org.eventb.theory.core.order="16"/>
<org.eventb.theory.core.scTheorem name="generatedBloc}" org.eventb.core.label="add xOR LSBs" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_LSB(x) xOR bn_LSB(y)=bn_LSB(x bn_Add y)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#}" org.eventb.theory.core.order="17"/>
<org.eventb.theory.core.scTheorem name="generatedBloc~" org.eventb.core.label="x + zero = x" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isZero(y)⇔x bn_Add y bn_Eq x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#u" org.eventb.theory.core.order="18"/>
<org.eventb.theory.core.scTheorem name="generatedBlod'" org.eventb.core.label="zero + zero = zero" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isZero(x)∧bn_isZero(y)⇔bn_isZero(x bn_Add y)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#t" org.eventb.theory.core.order="19"/>
<org.eventb.theory.core.scTheorem name="generatedBlod(" org.eventb.core.label="notZero add isNotZero" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·¬bn_isZero(x)⇒¬bn_isZero(x bn_Add y)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#q" org.eventb.theory.core.order="20"/>
<org.eventb.theory.core.scTheorem name="generatedBlod)" org.eventb.core.label="add increment ¬zero" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·¬bn_isZero(x bn_Add bn_increment(y))" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#p" org.eventb.theory.core.order="21"/>
<org.eventb.theory.core.scTheorem name="generatedBlod*" org.eventb.core.label="bn_AddZero" org.eventb.core.predicate="∀x⦂List(BOOL)·x bn_Add (nil ⦂ List(BOOL)) bn_Eq x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#D" org.eventb.theory.core.order="22"/>
<org.eventb.theory.core.scTheorem name="generatedBlod+" org.eventb.core.label="NotAddingZero" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·¬bn_isZero(x)∧¬bn_isZero(y)⇔¬bn_isZero(x bn_Add y)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#j" org.eventb.theory.core.order="23"/>
<org.eventb.theory.core.scTheorem name="generatedBlod," org.eventb.core.label="bn_AddAllZeros" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isZero(y)⇔x bn_Add y bn_Eq x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#h" org.eventb.theory.core.order="24"/>
<org.eventb.theory.core.scTheorem name="generatedBlod-" org.eventb.core.label="AdditionEquality" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL),z⦂List(BOOL)·x bn_Eq y⇔x bn_Add z=y bn_Add z" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#i" org.eventb.theory.core.order="25"/>
<org.eventb.theory.core.scTheorem name="generatedBlod." org.eventb.core.label="bn_appendList" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_concatonate(x,nil ⦂ List(BOOL))=x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#C" org.eventb.theory.core.order="26"/>
<org.eventb.theory.core.scTheorem name="generatedBlod/" org.eventb.core.label="Commutivity" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·x bn_Add y bn_Eq y bn_Add x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#g" org.eventb.theory.core.order="27"/>
<org.eventb.theory.core.scTheorem name="generatedBlod0" org.eventb.core.label="bn_add_intBitCount" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_countBits(x)≥bn_countBits(y)⇒bn_countBits(x bn_Add y)≥bn_countBits(x)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#e" org.eventb.theory.core.order="28"/>
<org.eventb.theory.core.scTheorem name="generatedBlod1" org.eventb.core.label="shiftLeftZero" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·¬bn_isZero(x bn_Add bn_shiftLeft1(y))⇒¬bn_isZero(x bn_Add y)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#d" org.eventb.theory.core.order="29"/>
<org.eventb.theory.core.scTheorem name="generatedBlod2" org.eventb.core.label="zero add zero = zero" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isZero(x bn_Add y)⇔bn_isZero(x)∧bn_isZero(y)" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.theorem#b" org.eventb.theory.core.order="30"/>
<org.eventb.theory.core.scProofRulesBlock name="generatedBlock" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;">
<org.eventb.theory.core.scMetavariable name="x" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scMetavariable name="y" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scMetavariable name="xB" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scMetavariable name="xs" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRewriteRule name="BinaryNaturals.bn_Add case 0" org.eventb.core.accurate="true" org.eventb.core.label="BinaryNaturals.bn_Add case 0" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_Add expansion" org.eventb.theory.core.formula="(nil ⦂ List(BOOL)) bn_Add y">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_Add rhs" org.eventb.core.label="bn_Add rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.formula="y"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BinaryNaturals.bn_Add case 1" org.eventb.core.accurate="true" org.eventb.core.label="BinaryNaturals.bn_Add case 1" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_Add expansion" org.eventb.theory.core.formula="cons(xB,xs) bn_Add y">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_Add rhs" org.eventb.core.label="bn_Add rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BinaryNaturals.tuf|org.eventb.theory.core.theoryRoot#BinaryNaturals|org.eventb.theory.core.newOperatorDefinition#;" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),cons(xB,xs),COND(xB=TRUE∧bn_LSB(y)=TRUE,cons(FALSE,bn_increment(xs bn_Add bn_shiftLeft1(y))),COND(¬xB=TRUE∧¬bn_LSB(y)=TRUE,cons(FALSE,xs bn_Add bn_shiftLeft1(y)),cons(TRUE,xs bn_Add bn_shiftLeft1(y)))))"/>
</org.eventb.theory.core.scRewriteRule>
</org.eventb.theory.core.scProofRulesBlock>
</org.eventb.theory.core.deployedTheoryRoot>
