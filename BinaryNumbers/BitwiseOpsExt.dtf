<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.theory.core.deployedTheoryRoot org.eventb.core.accurate="true" org.eventb.core.comment="GENERATED THEORY FILE: !DO NOT CHANGE!" org.eventb.theory.core.modificationHashValue="fc1f212700aef0f4c000f19ba3606f76" org.eventb.theory.core.outdated="true">
<org.eventb.theory.core.useTheory name="BinaryEquality" org.eventb.core.scTarget="/BinaryNumbers/BinaryEquality.dtf|org.eventb.theory.core.deployedTheoryRoot#BinaryEquality"/>
<org.eventb.theory.core.scNewOperatorDefinition name="(" org.eventb.core.label="bn_nat_T" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL)·(x∈List(BOOL)∧bn_isNormal(x))∨¬x∈List(BOOL)∨¬bn_isNormal(x)">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name=")" org.eventb.core.label="bn_Or" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="y"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="*" org.eventb.core.label="bn_And" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="infix extended expression group" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="INFIX" org.eventb.theory.core.type="List(BOOL)" org.eventb.theory.core.wd="⊤">
<org.eventb.theory.core.scOperatorArgument name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#'" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scOperatorArgument name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.operatorArgument#(" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRecursiveOperatorDefinition name=")" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)" org.eventb.theory.core.inductiveArgument="x">
<org.eventb.theory.core.scRecursiveDefinitionCase name="'" org.eventb.core.expression="nil ⦂ List(BOOL)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#'" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
<org.eventb.theory.core.scRecursiveDefinitionCase name="(" org.eventb.core.expression="cons(xB,xT)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)|org.eventb.theory.core.recursiveOperatorDefinition#)|org.eventb.theory.core.recursiveDefinitionCase#(" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y)))"/>
</org.eventb.theory.core.scRecursiveOperatorDefinition>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scNewOperatorDefinition name="+" org.eventb.core.label="bn_And_P" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.associative="false" org.eventb.theory.core.commutative="false" org.eventb.theory.core.formulaType="true" org.eventb.theory.core.groupID="org.eventb.core.ast.atomicExpr" org.eventb.theory.core.hasError="false" org.eventb.theory.core.notationType="PREFIX" org.eventb.theory.core.type="ℙ(List(BOOL)×List(BOOL)×List(BOOL))" org.eventb.theory.core.wd="∀x⦂List(BOOL),y⦂List(BOOL)·(x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))))∨¬x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∨¬y∈(bn_nat_T ⦂ ℙ(List(BOOL)))">
<org.eventb.theory.core.scDirectOperatorDefinition name="'" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*|org.eventb.theory.core.directOperatorDefinition#'" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scNewOperatorDefinition>
<org.eventb.theory.core.scTheorem name="generatedBlocl" org.eventb.core.label="Normalized is stripped" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_remTrailingZeros(x)=x⇔bn_isNormal(x)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.theorem#7" org.eventb.theory.core.order="0"/>
<org.eventb.theory.core.scTheorem name="generatedBlocm" org.eventb.core.label="when normal Eq ⇔ =" org.eventb.core.predicate="∀x⦂List(BOOL),y⦂List(BOOL)·bn_isNormal(x)∧bn_isNormal(y)⇒(x bn_Eq y⇔x=y)" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.theorem#:" org.eventb.theory.core.order="1"/>
<org.eventb.theory.core.scTheorem name="generatedBlocn" org.eventb.core.label="remZeros is normal" org.eventb.core.predicate="∀x⦂List(BOOL)·bn_isNormal(bn_remTrailingZeros(x))" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.theorem#8" org.eventb.theory.core.order="2"/>
<org.eventb.theory.core.scProofRulesBlock name="generatedBlock" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(">
<org.eventb.theory.core.scMetavariable name="x" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scMetavariable name="y" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scMetavariable name="xB" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.core.type="BOOL"/>
<org.eventb.theory.core.scMetavariable name="xT" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.core.type="List(BOOL)"/>
<org.eventb.theory.core.scRewriteRule name="BitwiseOpsExt.bn_nat_T" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOpsExt.bn_nat_T" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_nat_T expansion" org.eventb.theory.core.formula="bn_nat_T ⦂ ℙ(List(BOOL))">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_nat_T rhs" org.eventb.core.label="bn_nat_T rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#(" org.eventb.theory.core.formula="{x⦂List(BOOL)·x∈List(BOOL)∧bn_isNormal(x) ∣ x}"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOpsExt.bn_Or case 0" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOpsExt.bn_Or case 0" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_Or expansion" org.eventb.theory.core.formula="(nil ⦂ List(BOOL)) bn_Or y">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_Or rhs" org.eventb.core.label="bn_Or rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.formula="y"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOpsExt.bn_Or case 1" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOpsExt.bn_Or case 1" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_Or expansion" org.eventb.theory.core.formula="cons(xB,xT) bn_Or y">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_Or rhs" org.eventb.core.label="bn_Or rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#2" org.eventb.theory.core.formula="cons(xB OR bn_LSB(y),xT bn_Or bn_shiftLeft1(y))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOpsExt.bn_And case 0" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOpsExt.bn_And case 0" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_And expansion" org.eventb.theory.core.formula="(nil ⦂ List(BOOL)) bn_And y">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_And rhs" org.eventb.core.label="bn_And rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.formula="nil ⦂ List(BOOL)"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOpsExt.bn_And case 1" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOpsExt.bn_And case 1" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_And expansion" org.eventb.theory.core.formula="cons(xB,xT) bn_And y">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_And rhs" org.eventb.core.label="bn_And rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#)" org.eventb.theory.core.formula="COND(y=(nil ⦂ List(BOOL)),nil ⦂ List(BOOL),cons(xB AND bn_LSB(y),xT bn_And bn_shiftLeft1(y)))"/>
</org.eventb.theory.core.scRewriteRule>
<org.eventb.theory.core.scRewriteRule name="BitwiseOpsExt.bn_And_P" org.eventb.core.accurate="true" org.eventb.core.label="BitwiseOpsExt.bn_And_P" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.applicability="interactive" org.eventb.theory.core.complete="true" org.eventb.theory.core.definitional="true" org.eventb.theory.core.desc="bn_And_P expansion" org.eventb.theory.core.formula="bn_And_P ⦂ ℙ(List(BOOL)×List(BOOL)×List(BOOL))">
<org.eventb.theory.core.scRewriteRuleRHS name="bn_And_P rhs" org.eventb.core.label="bn_And_P rhs" org.eventb.core.predicate="⊤" org.eventb.core.source="/BinaryNumbers/BitwiseOpsExt.tuf|org.eventb.theory.core.theoryRoot#BitwiseOpsExt|org.eventb.theory.core.newOperatorDefinition#*" org.eventb.theory.core.formula="λx⦂List(BOOL) ↦ y⦂List(BOOL)·x∈(bn_nat_T ⦂ ℙ(List(BOOL)))∧y∈(bn_nat_T ⦂ ℙ(List(BOOL))) ∣ x bn_And y"/>
</org.eventb.theory.core.scRewriteRule>
</org.eventb.theory.core.scProofRulesBlock>
</org.eventb.theory.core.deployedTheoryRoot>
